/* automatically generated by rust-bindgen 0.60.1 */
use std::os::raw::{c_ulong, c_char, c_int, c_uint, c_long};
use std::ffi::CStr;
use std::env::args;
use std::fs::File;
use std::process::exit;
use std::os::unix::io::AsRawFd;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkl_host_operations {
    pub virtio_devices: c_ulong,
    pub print: ::std::option::Option<
        unsafe extern "C" fn(str_: *const c_char, len: c_int),
    >,
    pub panic: ::std::option::Option<unsafe extern "C" fn()>,
    pub func_ptrs: [c_ulong; 32usize],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lkl_disk {
    pub dev: c_ulong,
    pub fd: c_int,
    pub ops: c_ulong,
}
#[test]
fn bindgen_test_layout_lkl_disk() {
    assert_eq!(
        ::std::mem::size_of::<lkl_disk>(),
        24usize,
        concat!("Size of: ", stringify!(lkl_disk))
    );  
    assert_eq!(
        ::std::mem::align_of::<lkl_disk>(),
        8usize,
        concat!("Alignment of ", stringify!(lkl_disk))
    );  
    fn test_field_dev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lkl_disk>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lkl_disk),
                "::",
                stringify!(dev)
            )
        );
    }   
    test_field_dev();
    fn test_field_fd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lkl_disk>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lkl_disk),
                "::",
                stringify!(fd)
            )
        );
    }   
    test_field_fd();
    fn test_field_ops() {
	       assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lkl_disk>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ops) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(lkl_disk),
                "::",
                stringify!(ops)
            )
        );
    }
    test_field_ops();
}


#[test]
fn bindgen_test_layout_lkl_host_operations() {
    assert_eq!(
        ::std::mem::size_of::<lkl_host_operations>(),
        280usize,
        concat!("Size of: ", stringify!(lkl_host_operations))
    );
    assert_eq!(
        ::std::mem::align_of::<lkl_host_operations>(),
        8usize,
        concat!("Alignment of ", stringify!(lkl_host_operations))
    );
    fn test_field_virtio_devices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lkl_host_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).virtio_devices) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lkl_host_operations),
                "::",
                stringify!(virtio_devices)
            )
        );
    }
    test_field_virtio_devices();
    fn test_field_print() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lkl_host_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).print) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lkl_host_operations),
                "::",
                stringify!(print)
            )
        );
    }
    test_field_print();
    fn test_field_panic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lkl_host_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).panic) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(lkl_host_operations),
                "::",
                stringify!(panic)
            )
        );
    }
    test_field_panic();
    fn test_field_funcPtrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lkl_host_operations>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).funcPtrs) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(lkl_host_operations),
                "::",
                stringify!(funcPtrs)
            )
        );
    }
    test_field_funcPtrs();
}
extern "C" {

    static lkl_host_ops: lkl_host_operations;
    
    pub fn lkl_start_kernel(
        lkl_ops: &lkl_host_operations,
    	 cmd: *const i8
	) -> c_int;

    pub fn lkl_is_running() -> c_int;

    pub fn lkl_sys_halt() -> c_long;

    pub fn lkl_disk_add(disk: *mut lkl_disk) -> c_int;

    pub fn lkl_disk_remove(disk: lkl_disk) -> c_int;

    pub fn lkl_mount_dev(
	disk_id: c_uint,
	part: c_uint,
	fs_type: *const c_char,
	flags: c_int,
	opts: *const c_char,
	mnt_str: *mut c_char,
	mnt_str_len: c_uint,
    ) -> c_long;
}

fn main() {
	let filename = match args().nth(1) {
        	None => {
            		eprintln!("Usage: pass in filesystem image as an argument");
            		exit(1);
        	},
        	Some(k) => k,
    	};
	let file = match File::open(filename) {
		Err(e) => {
			eprintln!("Error opening {:}", e);
			exit(1);
		},
		Ok(k) => k,
	};
	let mut disk = lkl_disk {
		dev: 0,
		fd: file.as_raw_fd(),
		ops: 0,
	};
	let boot_arg = CStr::from_bytes_with_nul(b"mem=128M loglevel=8\0").unwrap();
	unsafe {
		lkl_disk_add(&mut disk); 
		lkl_start_kernel(&lkl_host_ops, boot_arg.as_ptr().cast()); 
		lkl_sys_halt();
		lkl_disk_remove(disk);
	} 
	println!("hello world");
}
