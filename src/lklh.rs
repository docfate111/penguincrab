pub mod lklh {
    #![allow(nonstandard_style)]
    pub const LKL_CONFIG_64BIT: u32 = 1;
    pub const __LKL__BITS_PER_LONG: u32 = 64;
    pub const __LKL__FD_SETSIZE: u32 = 1024;
    pub const __lkl__NR_io_setup: u32 = 0;
    pub const __lkl__NR_io_destroy: u32 = 1;
    pub const __lkl__NR_io_submit: u32 = 2;
    pub const __lkl__NR_io_cancel: u32 = 3;
    pub const __lkl__NR_io_getevents: u32 = 4;
    pub const __lkl__NR_setxattr: u32 = 5;
    pub const __lkl__NR_lsetxattr: u32 = 6;
    pub const __lkl__NR_fsetxattr: u32 = 7;
    pub const __lkl__NR_getxattr: u32 = 8;
    pub const __lkl__NR_lgetxattr: u32 = 9;
    pub const __lkl__NR_fgetxattr: u32 = 10;
    pub const __lkl__NR_listxattr: u32 = 11;
    pub const __lkl__NR_llistxattr: u32 = 12;
    pub const __lkl__NR_flistxattr: u32 = 13;
    pub const __lkl__NR_removexattr: u32 = 14;
    pub const __lkl__NR_lremovexattr: u32 = 15;
    pub const __lkl__NR_fremovexattr: u32 = 16;
    pub const __lkl__NR_getcwd: u32 = 17;
    pub const __lkl__NR_lookup_dcookie: u32 = 18;
    pub const __lkl__NR_eventfd2: u32 = 19;
    pub const __lkl__NR_epoll_create1: u32 = 20;
    pub const __lkl__NR_epoll_ctl: u32 = 21;
    pub const __lkl__NR_epoll_pwait: u32 = 22;
    pub const __lkl__NR_dup: u32 = 23;
    pub const __lkl__NR_dup3: u32 = 24;
    pub const __lkl__NR3264_fcntl: u32 = 25;
    pub const __lkl__NR_inotify_init1: u32 = 26;
    pub const __lkl__NR_inotify_add_watch: u32 = 27;
    pub const __lkl__NR_inotify_rm_watch: u32 = 28;
    pub const __lkl__NR_ioctl: u32 = 29;
    pub const __lkl__NR_ioprio_set: u32 = 30;
    pub const __lkl__NR_ioprio_get: u32 = 31;
    pub const __lkl__NR_flock: u32 = 32;
    pub const __lkl__NR_mknodat: u32 = 33;
    pub const __lkl__NR_mkdirat: u32 = 34;
    pub const __lkl__NR_unlinkat: u32 = 35;
    pub const __lkl__NR_symlinkat: u32 = 36;
    pub const __lkl__NR_linkat: u32 = 37;
    pub const __lkl__NR_renameat: u32 = 38;
    pub const __lkl__NR_umount2: u32 = 39;
    pub const __lkl__NR_mount: u32 = 40;
    pub const __lkl__NR_pivot_root: u32 = 41;
    pub const __lkl__NR_nfsservctl: u32 = 42;
    pub const __lkl__NR3264_statfs: u32 = 43;
    pub const __lkl__NR3264_fstatfs: u32 = 44;
    pub const __lkl__NR3264_truncate: u32 = 45;
    pub const __lkl__NR3264_ftruncate: u32 = 46;
    pub const __lkl__NR_fallocate: u32 = 47;
    pub const __lkl__NR_faccessat: u32 = 48;
    pub const __lkl__NR_chdir: u32 = 49;
    pub const __lkl__NR_fchdir: u32 = 50;
    pub const __lkl__NR_chroot: u32 = 51;
    pub const __lkl__NR_fchmod: u32 = 52;
    pub const __lkl__NR_fchmodat: u32 = 53;
    pub const __lkl__NR_fchownat: u32 = 54;
    pub const __lkl__NR_fchown: u32 = 55;
    pub const __lkl__NR_openat: u32 = 56;
    pub const __lkl__NR_close: u32 = 57;
    pub const __lkl__NR_vhangup: u32 = 58;
    pub const __lkl__NR_pipe2: u32 = 59;
    pub const __lkl__NR_quotactl: u32 = 60;
    pub const __lkl__NR_getdents64: u32 = 61;
    pub const __lkl__NR3264_lseek: u32 = 62;
    pub const __lkl__NR_read: u32 = 63;
    pub const __lkl__NR_write: u32 = 64;
    pub const __lkl__NR_readv: u32 = 65;
    pub const __lkl__NR_writev: u32 = 66;
    pub const __lkl__NR_pread64: u32 = 67;
    pub const __lkl__NR_pwrite64: u32 = 68;
    pub const __lkl__NR_preadv: u32 = 69;
    pub const __lkl__NR_pwritev: u32 = 70;
    pub const __lkl__NR3264_sendfile: u32 = 71;
    pub const __lkl__NR_pselect6: u32 = 72;
    pub const __lkl__NR_ppoll: u32 = 73;
    pub const __lkl__NR_signalfd4: u32 = 74;
    pub const __lkl__NR_vmsplice: u32 = 75;
    pub const __lkl__NR_splice: u32 = 76;
    pub const __lkl__NR_tee: u32 = 77;
    pub const __lkl__NR_readlinkat: u32 = 78;
    pub const __lkl__NR3264_fstatat: u32 = 79;
    pub const __lkl__NR3264_fstat: u32 = 80;
    pub const __lkl__NR_sync: u32 = 81;
    pub const __lkl__NR_fsync: u32 = 82;
    pub const __lkl__NR_fdatasync: u32 = 83;
    pub const __lkl__NR_sync_file_range: u32 = 84;
    pub const __lkl__NR_timerfd_create: u32 = 85;
    pub const __lkl__NR_timerfd_settime: u32 = 86;
    pub const __lkl__NR_timerfd_gettime: u32 = 87;
    pub const __lkl__NR_utimensat: u32 = 88;
    pub const __lkl__NR_acct: u32 = 89;
    pub const __lkl__NR_capget: u32 = 90;
    pub const __lkl__NR_capset: u32 = 91;
    pub const __lkl__NR_personality: u32 = 92;
    pub const __lkl__NR_exit: u32 = 93;
    pub const __lkl__NR_exit_group: u32 = 94;
    pub const __lkl__NR_waitid: u32 = 95;
    pub const __lkl__NR_set_tid_address: u32 = 96;
    pub const __lkl__NR_unshare: u32 = 97;
    pub const __lkl__NR_futex: u32 = 98;
    pub const __lkl__NR_set_robust_list: u32 = 99;
    pub const __lkl__NR_get_robust_list: u32 = 100;
    pub const __lkl__NR_nanosleep: u32 = 101;
    pub const __lkl__NR_getitimer: u32 = 102;
    pub const __lkl__NR_setitimer: u32 = 103;
    pub const __lkl__NR_kexec_load: u32 = 104;
    pub const __lkl__NR_init_module: u32 = 105;
    pub const __lkl__NR_delete_module: u32 = 106;
    pub const __lkl__NR_timer_create: u32 = 107;
    pub const __lkl__NR_timer_gettime: u32 = 108;
    pub const __lkl__NR_timer_getoverrun: u32 = 109;
    pub const __lkl__NR_timer_settime: u32 = 110;
    pub const __lkl__NR_timer_delete: u32 = 111;
    pub const __lkl__NR_clock_settime: u32 = 112;
    pub const __lkl__NR_clock_gettime: u32 = 113;
    pub const __lkl__NR_clock_getres: u32 = 114;
    pub const __lkl__NR_clock_nanosleep: u32 = 115;
    pub const __lkl__NR_syslog: u32 = 116;
    pub const __lkl__NR_ptrace: u32 = 117;
    pub const __lkl__NR_sched_setparam: u32 = 118;
    pub const __lkl__NR_sched_setscheduler: u32 = 119;
    pub const __lkl__NR_sched_getscheduler: u32 = 120;
    pub const __lkl__NR_sched_getparam: u32 = 121;
    pub const __lkl__NR_sched_setaffinity: u32 = 122;
    pub const __lkl__NR_sched_getaffinity: u32 = 123;
    pub const __lkl__NR_sched_yield: u32 = 124;
    pub const __lkl__NR_sched_get_priority_max: u32 = 125;
    pub const __lkl__NR_sched_get_priority_min: u32 = 126;
    pub const __lkl__NR_sched_rr_get_interval: u32 = 127;
    pub const __lkl__NR_restart_syscall: u32 = 128;
    pub const __lkl__NR_kill: u32 = 129;
    pub const __lkl__NR_tkill: u32 = 130;
    pub const __lkl__NR_tgkill: u32 = 131;
    pub const __lkl__NR_sigaltstack: u32 = 132;
    pub const __lkl__NR_rt_sigsuspend: u32 = 133;
    pub const __lkl__NR_rt_sigaction: u32 = 134;
    pub const __lkl__NR_rt_sigprocmask: u32 = 135;
    pub const __lkl__NR_rt_sigpending: u32 = 136;
    pub const __lkl__NR_rt_sigtimedwait: u32 = 137;
    pub const __lkl__NR_rt_sigqueueinfo: u32 = 138;
    pub const __lkl__NR_rt_sigreturn: u32 = 139;
    pub const __lkl__NR_setpriority: u32 = 140;
    pub const __lkl__NR_getpriority: u32 = 141;
    pub const __lkl__NR_reboot: u32 = 142;
    pub const __lkl__NR_setregid: u32 = 143;
    pub const __lkl__NR_setgid: u32 = 144;
    pub const __lkl__NR_setreuid: u32 = 145;
    pub const __lkl__NR_setuid: u32 = 146;
    pub const __lkl__NR_setresuid: u32 = 147;
    pub const __lkl__NR_getresuid: u32 = 148;
    pub const __lkl__NR_setresgid: u32 = 149;
    pub const __lkl__NR_getresgid: u32 = 150;
    pub const __lkl__NR_setfsuid: u32 = 151;
    pub const __lkl__NR_setfsgid: u32 = 152;
    pub const __lkl__NR_times: u32 = 153;
    pub const __lkl__NR_setpgid: u32 = 154;
    pub const __lkl__NR_getpgid: u32 = 155;
    pub const __lkl__NR_getsid: u32 = 156;
    pub const __lkl__NR_setsid: u32 = 157;
    pub const __lkl__NR_getgroups: u32 = 158;
    pub const __lkl__NR_setgroups: u32 = 159;
    pub const __lkl__NR_uname: u32 = 160;
    pub const __lkl__NR_sethostname: u32 = 161;
    pub const __lkl__NR_setdomainname: u32 = 162;
    pub const __lkl__NR_getrlimit: u32 = 163;
    pub const __lkl__NR_setrlimit: u32 = 164;
    pub const __lkl__NR_getrusage: u32 = 165;
    pub const __lkl__NR_umask: u32 = 166;
    pub const __lkl__NR_prctl: u32 = 167;
    pub const __lkl__NR_getcpu: u32 = 168;
    pub const __lkl__NR_gettimeofday: u32 = 169;
    pub const __lkl__NR_settimeofday: u32 = 170;
    pub const __lkl__NR_adjtimex: u32 = 171;
    pub const __lkl__NR_getpid: u32 = 172;
    pub const __lkl__NR_getppid: u32 = 173;
    pub const __lkl__NR_getuid: u32 = 174;
    pub const __lkl__NR_geteuid: u32 = 175;
    pub const __lkl__NR_getgid: u32 = 176;
    pub const __lkl__NR_getegid: u32 = 177;
    pub const __lkl__NR_gettid: u32 = 178;
    pub const __lkl__NR_sysinfo: u32 = 179;
    pub const __lkl__NR_mq_open: u32 = 180;
    pub const __lkl__NR_mq_unlink: u32 = 181;
    pub const __lkl__NR_mq_timedsend: u32 = 182;
    pub const __lkl__NR_mq_timedreceive: u32 = 183;
    pub const __lkl__NR_mq_notify: u32 = 184;
    pub const __lkl__NR_mq_getsetattr: u32 = 185;
    pub const __lkl__NR_msgget: u32 = 186;
    pub const __lkl__NR_msgctl: u32 = 187;
    pub const __lkl__NR_msgrcv: u32 = 188;
    pub const __lkl__NR_msgsnd: u32 = 189;
    pub const __lkl__NR_semget: u32 = 190;
    pub const __lkl__NR_semctl: u32 = 191;
    pub const __lkl__NR_semtimedop: u32 = 192;
    pub const __lkl__NR_semop: u32 = 193;
    pub const __lkl__NR_shmget: u32 = 194;
    pub const __lkl__NR_shmctl: u32 = 195;
    pub const __lkl__NR_shmat: u32 = 196;
    pub const __lkl__NR_shmdt: u32 = 197;
    pub const __lkl__NR_socket: u32 = 198;
    pub const __lkl__NR_socketpair: u32 = 199;
    pub const __lkl__NR_bind: u32 = 200;
    pub const __lkl__NR_listen: u32 = 201;
    pub const __lkl__NR_accept: u32 = 202;
    pub const __lkl__NR_connect: u32 = 203;
    pub const __lkl__NR_getsockname: u32 = 204;
    pub const __lkl__NR_getpeername: u32 = 205;
    pub const __lkl__NR_sendto: u32 = 206;
    pub const __lkl__NR_recvfrom: u32 = 207;
    pub const __lkl__NR_setsockopt: u32 = 208;
    pub const __lkl__NR_getsockopt: u32 = 209;
    pub const __lkl__NR_shutdown: u32 = 210;
    pub const __lkl__NR_sendmsg: u32 = 211;
    pub const __lkl__NR_recvmsg: u32 = 212;
    pub const __lkl__NR_readahead: u32 = 213;
    pub const __lkl__NR_brk: u32 = 214;
    pub const __lkl__NR_munmap: u32 = 215;
    pub const __lkl__NR_mremap: u32 = 216;
    pub const __lkl__NR_add_key: u32 = 217;
    pub const __lkl__NR_request_key: u32 = 218;
    pub const __lkl__NR_keyctl: u32 = 219;
    pub const __lkl__NR_clone: u32 = 220;
    pub const __lkl__NR_execve: u32 = 221;
    pub const __lkl__NR3264_mmap: u32 = 222;
    pub const __lkl__NR3264_fadvise64: u32 = 223;
    pub const __lkl__NR_swapon: u32 = 224;
    pub const __lkl__NR_swapoff: u32 = 225;
    pub const __lkl__NR_mprotect: u32 = 226;
    pub const __lkl__NR_msync: u32 = 227;
    pub const __lkl__NR_mlock: u32 = 228;
    pub const __lkl__NR_munlock: u32 = 229;
    pub const __lkl__NR_mlockall: u32 = 230;
    pub const __lkl__NR_munlockall: u32 = 231;
    pub const __lkl__NR_mincore: u32 = 232;
    pub const __lkl__NR_madvise: u32 = 233;
    pub const __lkl__NR_remap_file_pages: u32 = 234;
    pub const __lkl__NR_mbind: u32 = 235;
    pub const __lkl__NR_get_mempolicy: u32 = 236;
    pub const __lkl__NR_set_mempolicy: u32 = 237;
    pub const __lkl__NR_migrate_pages: u32 = 238;
    pub const __lkl__NR_move_pages: u32 = 239;
    pub const __lkl__NR_rt_tgsigqueueinfo: u32 = 240;
    pub const __lkl__NR_perf_event_open: u32 = 241;
    pub const __lkl__NR_accept4: u32 = 242;
    pub const __lkl__NR_recvmmsg: u32 = 243;
    pub const __lkl__NR_arch_specific_syscall: u32 = 244;
    pub const __lkl__NR_wait4: u32 = 260;
    pub const __lkl__NR_prlimit64: u32 = 261;
    pub const __lkl__NR_fanotify_init: u32 = 262;
    pub const __lkl__NR_fanotify_mark: u32 = 263;
    pub const __lkl__NR_name_to_handle_at: u32 = 264;
    pub const __lkl__NR_open_by_handle_at: u32 = 265;
    pub const __lkl__NR_clock_adjtime: u32 = 266;
    pub const __lkl__NR_syncfs: u32 = 267;
    pub const __lkl__NR_setns: u32 = 268;
    pub const __lkl__NR_sendmmsg: u32 = 269;
    pub const __lkl__NR_process_vm_readv: u32 = 270;
    pub const __lkl__NR_process_vm_writev: u32 = 271;
    pub const __lkl__NR_kcmp: u32 = 272;
    pub const __lkl__NR_finit_module: u32 = 273;
    pub const __lkl__NR_sched_setattr: u32 = 274;
    pub const __lkl__NR_sched_getattr: u32 = 275;
    pub const __lkl__NR_renameat2: u32 = 276;
    pub const __lkl__NR_seccomp: u32 = 277;
    pub const __lkl__NR_getrandom: u32 = 278;
    pub const __lkl__NR_memfd_create: u32 = 279;
    pub const __lkl__NR_bpf: u32 = 280;
    pub const __lkl__NR_execveat: u32 = 281;
    pub const __lkl__NR_userfaultfd: u32 = 282;
    pub const __lkl__NR_membarrier: u32 = 283;
    pub const __lkl__NR_mlock2: u32 = 284;
    pub const __lkl__NR_copy_file_range: u32 = 285;
    pub const __lkl__NR_preadv2: u32 = 286;
    pub const __lkl__NR_pwritev2: u32 = 287;
    pub const __lkl__NR_pkey_mprotect: u32 = 288;
    pub const __lkl__NR_pkey_alloc: u32 = 289;
    pub const __lkl__NR_pkey_free: u32 = 290;
    pub const __lkl__NR_statx: u32 = 291;
    pub const __lkl__NR_io_pgetevents: u32 = 292;
    pub const __lkl__NR_rseq: u32 = 293;
    pub const __lkl__NR_kexec_file_load: u32 = 294;
    pub const __lkl__NR_pidfd_send_signal: u32 = 424;
    pub const __lkl__NR_io_uring_setup: u32 = 425;
    pub const __lkl__NR_io_uring_enter: u32 = 426;
    pub const __lkl__NR_io_uring_register: u32 = 427;
    pub const __lkl__NR_open_tree: u32 = 428;
    pub const __lkl__NR_move_mount: u32 = 429;
    pub const __lkl__NR_fsopen: u32 = 430;
    pub const __lkl__NR_fsconfig: u32 = 431;
    pub const __lkl__NR_fsmount: u32 = 432;
    pub const __lkl__NR_fspick: u32 = 433;
    pub const __lkl__NR_pidfd_open: u32 = 434;
    pub const __lkl__NR_close_range: u32 = 436;
    pub const __lkl__NR_openat2: u32 = 437;
    pub const __lkl__NR_pidfd_getfd: u32 = 438;
    pub const __lkl__NR_faccessat2: u32 = 439;
    pub const __lkl__NR_process_madvise: u32 = 440;
    pub const __lkl__NR_syscalls: u32 = 441;
    pub const __lkl__NR_fcntl: u32 = 25;
    pub const __lkl__NR_statfs: u32 = 43;
    pub const __lkl__NR_fstatfs: u32 = 44;
    pub const __lkl__NR_truncate: u32 = 45;
    pub const __lkl__NR_ftruncate: u32 = 46;
    pub const __lkl__NR_lseek: u32 = 62;
    pub const __lkl__NR_sendfile: u32 = 71;
    pub const __lkl__NR_newfstatat: u32 = 79;
    pub const __lkl__NR_fstat: u32 = 80;
    pub const __lkl__NR_mmap: u32 = 222;
    pub const __lkl__NR_fadvise64: u32 = 223;
    pub const __lkl__NR_virtio_mmio_device_add: u32 = 244;
    pub const __lkl__NR_umount: u32 = 39;
    pub const __lkl__NR_newfstat: u32 = 80;
    pub const __lkl__NR_mmap_pgoff: u32 = 222;
    pub const LKL_ITIMER_REAL: u32 = 0;
    pub const LKL_ITIMER_VIRTUAL: u32 = 1;
    pub const LKL_ITIMER_PROF: u32 = 2;
    pub const LKL_CLOCK_REALTIME: u32 = 0;
    pub const LKL_CLOCK_MONOTONIC: u32 = 1;
    pub const LKL_CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
    pub const LKL_CLOCK_THREAD_CPUTIME_ID: u32 = 3;
    pub const LKL_CLOCK_MONOTONIC_RAW: u32 = 4;
    pub const LKL_CLOCK_REALTIME_COARSE: u32 = 5;
    pub const LKL_CLOCK_MONOTONIC_COARSE: u32 = 6;
    pub const LKL_CLOCK_BOOTTIME: u32 = 7;
    pub const LKL_CLOCK_REALTIME_ALARM: u32 = 8;
    pub const LKL_CLOCK_BOOTTIME_ALARM: u32 = 9;
    pub const LKL_CLOCK_SGI_CYCLE: u32 = 10;
    pub const LKL_CLOCK_TAI: u32 = 11;
    pub const LKL_MAX_CLOCKS: u32 = 16;
    pub const LKL_CLOCKS_MASK: u32 = 1;
    pub const LKL_CLOCKS_MONO: u32 = 1;
    pub const LKL_TIMER_ABSTIME: u32 = 1;
    pub const LKL_NTP_API: u32 = 4;
    pub const LKL_ADJ_OFFSET: u32 = 1;
    pub const LKL_ADJ_FREQUENCY: u32 = 2;
    pub const LKL_ADJ_MAXERROR: u32 = 4;
    pub const LKL_ADJ_ESTERROR: u32 = 8;
    pub const LKL_ADJ_STATUS: u32 = 16;
    pub const LKL_ADJ_TIMECONST: u32 = 32;
    pub const LKL_ADJ_TAI: u32 = 128;
    pub const LKL_ADJ_SETOFFSET: u32 = 256;
    pub const LKL_ADJ_MICRO: u32 = 4096;
    pub const LKL_ADJ_NANO: u32 = 8192;
    pub const LKL_ADJ_TICK: u32 = 16384;
    pub const LKL_ADJ_OFFSET_SINGLESHOT: u32 = 32769;
    pub const LKL_ADJ_OFFSET_SS_READ: u32 = 40961;
    pub const LKL_MOD_OFFSET: u32 = 1;
    pub const LKL_MOD_FREQUENCY: u32 = 2;
    pub const LKL_MOD_MAXERROR: u32 = 4;
    pub const LKL_MOD_ESTERROR: u32 = 8;
    pub const LKL_MOD_STATUS: u32 = 16;
    pub const LKL_MOD_TIMECONST: u32 = 32;
    pub const LKL_MOD_TAI: u32 = 128;
    pub const LKL_MOD_MICRO: u32 = 4096;
    pub const LKL_MOD_NANO: u32 = 8192;
    pub const LKL_STA_PLL: u32 = 1;
    pub const LKL_STA_PPSFREQ: u32 = 2;
    pub const LKL_STA_PPSTIME: u32 = 4;
    pub const LKL_STA_FLL: u32 = 8;
    pub const LKL_STA_INS: u32 = 16;
    pub const LKL_STA_DEL: u32 = 32;
    pub const LKL_STA_UNSYNC: u32 = 64;
    pub const LKL_STA_FREQHOLD: u32 = 128;
    pub const LKL_STA_PPSSIGNAL: u32 = 256;
    pub const LKL_STA_PPSJITTER: u32 = 512;
    pub const LKL_STA_PPSWANDER: u32 = 1024;
    pub const LKL_STA_PPSERROR: u32 = 2048;
    pub const LKL_STA_CLOCKERR: u32 = 4096;
    pub const LKL_STA_NANO: u32 = 8192;
    pub const LKL_STA_MODE: u32 = 16384;
    pub const LKL_STA_CLK: u32 = 32768;
    pub const LKL_STA_RONLY: u32 = 65280;
    pub const LKL_TIME_OK: u32 = 0;
    pub const LKL_TIME_INS: u32 = 1;
    pub const LKL_TIME_DEL: u32 = 2;
    pub const LKL_TIME_OOP: u32 = 3;
    pub const LKL_TIME_WAIT: u32 = 4;
    pub const LKL_TIME_ERROR: u32 = 5;
    pub const LKL_TIME_BAD: u32 = 5;
    pub const _LKL_LINUX_CAPABILITY_VERSION_1: u32 = 429392688;
    pub const _LKL_LINUX_CAPABILITY_U32S_1: u32 = 1;
    pub const _LKL_LINUX_CAPABILITY_VERSION_2: u32 = 537333798;
    pub const _LKL_LINUX_CAPABILITY_U32S_2: u32 = 2;
    pub const _LKL_LINUX_CAPABILITY_VERSION_3: u32 = 537396514;
    pub const _LKL_LINUX_CAPABILITY_U32S_3: u32 = 2;
    pub const LKL_VFS_CAP_REVISION_MASK: u32 = 4278190080;
    pub const LKL_VFS_CAP_REVISION_SHIFT: u32 = 24;
    pub const LKL_VFS_CAP_FLAGS_MASK: i64 = -4278190081;
    pub const LKL_VFS_CAP_FLAGS_EFFECTIVE: u32 = 1;
    pub const LKL_VFS_CAP_REVISION_1: u32 = 16777216;
    pub const LKL_VFS_CAP_U32_1: u32 = 1;
    pub const LKL_VFS_CAP_REVISION_2: u32 = 33554432;
    pub const LKL_VFS_CAP_U32_2: u32 = 2;
    pub const LKL_VFS_CAP_REVISION_3: u32 = 50331648;
    pub const LKL_VFS_CAP_U32_3: u32 = 2;
    pub const LKL_VFS_CAP_U32: u32 = 2;
    pub const LKL_VFS_CAP_REVISION: u32 = 50331648;
    pub const _LKL_LINUX_CAPABILITY_VERSION: u32 = 429392688;
    pub const _LKL_LINUX_CAPABILITY_U32S: u32 = 1;
    pub const LKL_CAP_CHOWN: u32 = 0;
    pub const LKL_CAP_DAC_OVERRIDE: u32 = 1;
    pub const LKL_CAP_DAC_READ_SEARCH: u32 = 2;
    pub const LKL_CAP_FOWNER: u32 = 3;
    pub const LKL_CAP_FSETID: u32 = 4;
    pub const LKL_CAP_KILL: u32 = 5;
    pub const LKL_CAP_SETGID: u32 = 6;
    pub const LKL_CAP_SETUID: u32 = 7;
    pub const LKL_CAP_SETPCAP: u32 = 8;
    pub const LKL_CAP_LINUX_IMMUTABLE: u32 = 9;
    pub const LKL_CAP_NET_BIND_SERVICE: u32 = 10;
    pub const LKL_CAP_NET_BROADCAST: u32 = 11;
    pub const LKL_CAP_NET_ADMIN: u32 = 12;
    pub const LKL_CAP_NET_RAW: u32 = 13;
    pub const LKL_CAP_IPC_LOCK: u32 = 14;
    pub const LKL_CAP_IPC_OWNER: u32 = 15;
    pub const LKL_CAP_SYS_MODULE: u32 = 16;
    pub const LKL_CAP_SYS_RAWIO: u32 = 17;
    pub const LKL_CAP_SYS_CHROOT: u32 = 18;
    pub const LKL_CAP_SYS_PTRACE: u32 = 19;
    pub const LKL_CAP_SYS_PACCT: u32 = 20;
    pub const LKL_CAP_SYS_ADMIN: u32 = 21;
    pub const LKL_CAP_SYS_BOOT: u32 = 22;
    pub const LKL_CAP_SYS_NICE: u32 = 23;
    pub const LKL_CAP_SYS_RESOURCE: u32 = 24;
    pub const LKL_CAP_SYS_TIME: u32 = 25;
    pub const LKL_CAP_SYS_TTY_CONFIG: u32 = 26;
    pub const LKL_CAP_MKNOD: u32 = 27;
    pub const LKL_CAP_LEASE: u32 = 28;
    pub const LKL_CAP_AUDIT_WRITE: u32 = 29;
    pub const LKL_CAP_AUDIT_CONTROL: u32 = 30;
    pub const LKL_CAP_SETFCAP: u32 = 31;
    pub const LKL_CAP_MAC_OVERRIDE: u32 = 32;
    pub const LKL_CAP_MAC_ADMIN: u32 = 33;
    pub const LKL_CAP_SYSLOG: u32 = 34;
    pub const LKL_CAP_WAKE_ALARM: u32 = 35;
    pub const LKL_CAP_BLOCK_SUSPEND: u32 = 36;
    pub const LKL_CAP_AUDIT_READ: u32 = 37;
    pub const LKL_CAP_PERFMON: u32 = 38;
    pub const LKL_CAP_BPF: u32 = 39;
    pub const LKL_CAP_CHECKPOINT_RESTORE: u32 = 40;
    pub const LKL_CAP_LAST_CAP: u32 = 40;
    pub const LKL_S_IFMT: u32 = 61440;
    pub const LKL_S_IFSOCK: u32 = 49152;
    pub const LKL_S_IFLNK: u32 = 40960;
    pub const LKL_S_IFREG: u32 = 32768;
    pub const LKL_S_IFBLK: u32 = 24576;
    pub const LKL_S_IFDIR: u32 = 16384;
    pub const LKL_S_IFCHR: u32 = 8192;
    pub const LKL_S_IFIFO: u32 = 4096;
    pub const LKL_S_ISUID: u32 = 2048;
    pub const LKL_S_ISGID: u32 = 1024;
    pub const LKL_S_ISVTX: u32 = 512;
    pub const LKL_S_IRWXU: u32 = 448;
    pub const LKL_S_IRUSR: u32 = 256;
    pub const LKL_S_IWUSR: u32 = 128;
    pub const LKL_S_IXUSR: u32 = 64;
    pub const LKL_S_IRWXG: u32 = 56;
    pub const LKL_S_IRGRP: u32 = 32;
    pub const LKL_S_IWGRP: u32 = 16;
    pub const LKL_S_IXGRP: u32 = 8;
    pub const LKL_S_IRWXO: u32 = 7;
    pub const LKL_S_IROTH: u32 = 4;
    pub const LKL_S_IWOTH: u32 = 2;
    pub const LKL_S_IXOTH: u32 = 1;
    pub const LKL_STATX_TYPE: u32 = 1;
    pub const LKL_STATX_MODE: u32 = 2;
    pub const LKL_STATX_NLINK: u32 = 4;
    pub const LKL_STATX_UID: u32 = 8;
    pub const LKL_STATX_GID: u32 = 16;
    pub const LKL_STATX_ATIME: u32 = 32;
    pub const LKL_STATX_MTIME: u32 = 64;
    pub const LKL_STATX_CTIME: u32 = 128;
    pub const LKL_STATX_INO: u32 = 256;
    pub const LKL_STATX_SIZE: u32 = 512;
    pub const LKL_STATX_BLOCKS: u32 = 1024;
    pub const LKL_STATX_BASIC_STATS: u32 = 2047;
    pub const LKL_STATX_BTIME: u32 = 2048;
    pub const LKL_STATX_MNT_ID: u32 = 4096;
    pub const LKL_STATX__RESERVED: u32 = 2147483648;
    pub const LKL_STATX_ALL: u32 = 4095;
    pub const LKL_STATX_ATTR_COMPRESSED: u32 = 4;
    pub const LKL_STATX_ATTR_IMMUTABLE: u32 = 16;
    pub const LKL_STATX_ATTR_APPEND: u32 = 32;
    pub const LKL_STATX_ATTR_NODUMP: u32 = 64;
    pub const LKL_STATX_ATTR_ENCRYPTED: u32 = 2048;
    pub const LKL_STATX_ATTR_AUTOMOUNT: u32 = 4096;
    pub const LKL_STATX_ATTR_MOUNT_ROOT: u32 = 8192;
    pub const LKL_STATX_ATTR_VERITY: u32 = 1048576;
    pub const LKL_STATX_ATTR_DAX: u32 = 2097152;
    pub const LKL_EPERM: u32 = 1;
    pub const LKL_ENOENT: u32 = 2;
    pub const LKL_ESRCH: u32 = 3;
    pub const LKL_EINTR: u32 = 4;
    pub const LKL_EIO: u32 = 5;
    pub const LKL_ENXIO: u32 = 6;
    pub const LKL_E2BIG: u32 = 7;
    pub const LKL_ENOEXEC: u32 = 8;
    pub const LKL_EBADF: u32 = 9;
    pub const LKL_ECHILD: u32 = 10;
    pub const LKL_EAGAIN: u32 = 11;
    pub const LKL_ENOMEM: u32 = 12;
    pub const LKL_EACCES: u32 = 13;
    pub const LKL_EFAULT: u32 = 14;
    pub const LKL_ENOTBLK: u32 = 15;
    pub const LKL_EBUSY: u32 = 16;
    pub const LKL_EEXIST: u32 = 17;
    pub const LKL_EXDEV: u32 = 18;
    pub const LKL_ENODEV: u32 = 19;
    pub const LKL_ENOTDIR: u32 = 20;
    pub const LKL_EISDIR: u32 = 21;
    pub const LKL_EINVAL: u32 = 22;
    pub const LKL_ENFILE: u32 = 23;
    pub const LKL_EMFILE: u32 = 24;
    pub const LKL_ENOTTY: u32 = 25;
    pub const LKL_ETXTBSY: u32 = 26;
    pub const LKL_EFBIG: u32 = 27;
    pub const LKL_ENOSPC: u32 = 28;
    pub const LKL_ESPIPE: u32 = 29;
    pub const LKL_EROFS: u32 = 30;
    pub const LKL_EMLINK: u32 = 31;
    pub const LKL_EPIPE: u32 = 32;
    pub const LKL_EDOM: u32 = 33;
    pub const LKL_ERANGE: u32 = 34;
    pub const LKL_EDEADLK: u32 = 35;
    pub const LKL_ENAMETOOLONG: u32 = 36;
    pub const LKL_ENOLCK: u32 = 37;
    pub const LKL_ENOSYS: u32 = 38;
    pub const LKL_ENOTEMPTY: u32 = 39;
    pub const LKL_ELOOP: u32 = 40;
    pub const LKL_EWOULDBLOCK: u32 = 11;
    pub const LKL_ENOMSG: u32 = 42;
    pub const LKL_EIDRM: u32 = 43;
    pub const LKL_ECHRNG: u32 = 44;
    pub const LKL_EL2NSYNC: u32 = 45;
    pub const LKL_EL3HLT: u32 = 46;
    pub const LKL_EL3RST: u32 = 47;
    pub const LKL_ELNRNG: u32 = 48;
    pub const LKL_EUNATCH: u32 = 49;
    pub const LKL_ENOCSI: u32 = 50;
    pub const LKL_EL2HLT: u32 = 51;
    pub const LKL_EBADE: u32 = 52;
    pub const LKL_EBADR: u32 = 53;
    pub const LKL_EXFULL: u32 = 54;
    pub const LKL_ENOANO: u32 = 55;
    pub const LKL_EBADRQC: u32 = 56;
    pub const LKL_EBADSLT: u32 = 57;
    pub const LKL_EDEADLOCK: u32 = 35;
    pub const LKL_EBFONT: u32 = 59;
    pub const LKL_ENOSTR: u32 = 60;
    pub const LKL_ENODATA: u32 = 61;
    pub const LKL_ETIME: u32 = 62;
    pub const LKL_ENOSR: u32 = 63;
    pub const LKL_ENONET: u32 = 64;
    pub const LKL_ENOPKG: u32 = 65;
    pub const LKL_EREMOTE: u32 = 66;
    pub const LKL_ENOLINK: u32 = 67;
    pub const LKL_EADV: u32 = 68;
    pub const LKL_ESRMNT: u32 = 69;
    pub const LKL_ECOMM: u32 = 70;
    pub const LKL_EPROTO: u32 = 71;
    pub const LKL_EMULTIHOP: u32 = 72;
    pub const LKL_EDOTDOT: u32 = 73;
    pub const LKL_EBADMSG: u32 = 74;
    pub const LKL_EOVERFLOW: u32 = 75;
    pub const LKL_ENOTUNIQ: u32 = 76;
    pub const LKL_EBADFD: u32 = 77;
    pub const LKL_EREMCHG: u32 = 78;
    pub const LKL_ELIBACC: u32 = 79;
    pub const LKL_ELIBBAD: u32 = 80;
    pub const LKL_ELIBSCN: u32 = 81;
    pub const LKL_ELIBMAX: u32 = 82;
    pub const LKL_ELIBEXEC: u32 = 83;
    pub const LKL_EILSEQ: u32 = 84;
    pub const LKL_ERESTART: u32 = 85;
    pub const LKL_ESTRPIPE: u32 = 86;
    pub const LKL_EUSERS: u32 = 87;
    pub const LKL_ENOTSOCK: u32 = 88;
    pub const LKL_EDESTADDRREQ: u32 = 89;
    pub const LKL_EMSGSIZE: u32 = 90;
    pub const LKL_EPROTOTYPE: u32 = 91;
    pub const LKL_ENOPROTOOPT: u32 = 92;
    pub const LKL_EPROTONOSUPPORT: u32 = 93;
    pub const LKL_ESOCKTNOSUPPORT: u32 = 94;
    pub const LKL_EOPNOTSUPP: u32 = 95;
    pub const LKL_EPFNOSUPPORT: u32 = 96;
    pub const LKL_EAFNOSUPPORT: u32 = 97;
    pub const LKL_EADDRINUSE: u32 = 98;
    pub const LKL_EADDRNOTAVAIL: u32 = 99;
    pub const LKL_ENETDOWN: u32 = 100;
    pub const LKL_ENETUNREACH: u32 = 101;
    pub const LKL_ENETRESET: u32 = 102;
    pub const LKL_ECONNABORTED: u32 = 103;
    pub const LKL_ECONNRESET: u32 = 104;
    pub const LKL_ENOBUFS: u32 = 105;
    pub const LKL_EISCONN: u32 = 106;
    pub const LKL_ENOTCONN: u32 = 107;
    pub const LKL_ESHUTDOWN: u32 = 108;
    pub const LKL_ETOOMANYREFS: u32 = 109;
    pub const LKL_ETIMEDOUT: u32 = 110;
    pub const LKL_ECONNREFUSED: u32 = 111;
    pub const LKL_EHOSTDOWN: u32 = 112;
    pub const LKL_EHOSTUNREACH: u32 = 113;
    pub const LKL_EALREADY: u32 = 114;
    pub const LKL_EINPROGRESS: u32 = 115;
    pub const LKL_ESTALE: u32 = 116;
    pub const LKL_EUCLEAN: u32 = 117;
    pub const LKL_ENOTNAM: u32 = 118;
    pub const LKL_ENAVAIL: u32 = 119;
    pub const LKL_EISNAM: u32 = 120;
    pub const LKL_EREMOTEIO: u32 = 121;
    pub const LKL_EDQUOT: u32 = 122;
    pub const LKL_ENOMEDIUM: u32 = 123;
    pub const LKL_EMEDIUMTYPE: u32 = 124;
    pub const LKL_ECANCELED: u32 = 125;
    pub const LKL_ENOKEY: u32 = 126;
    pub const LKL_EKEYEXPIRED: u32 = 127;
    pub const LKL_EKEYREVOKED: u32 = 128;
    pub const LKL_EKEYREJECTED: u32 = 129;
    pub const LKL_EOWNERDEAD: u32 = 130;
    pub const LKL_ENOTRECOVERABLE: u32 = 131;
    pub const LKL_ERFKILL: u32 = 132;
    pub const LKL_EHWPOISON: u32 = 133;
    pub const LKL_O_ACCMODE: u32 = 3;
    pub const LKL_O_RDONLY: u32 = 0;
    pub const LKL_O_WRONLY: u32 = 1;
    pub const LKL_O_RDWR: u32 = 2;
    pub const LKL_O_CREAT: u32 = 64;
    pub const LKL_O_EXCL: u32 = 128;
    pub const LKL_O_NOCTTY: u32 = 256;
    pub const LKL_O_TRUNC: u32 = 512;
    pub const LKL_O_APPEND: u32 = 1024;
    pub const LKL_O_NONBLOCK: u32 = 2048;
    pub const LKL_O_DSYNC: u32 = 4096;
    pub const LKL_FASYNC: u32 = 8192;
    pub const LKL_O_DIRECT: u32 = 16384;
    pub const LKL_O_LARGEFILE: u32 = 32768;
    pub const LKL_O_DIRECTORY: u32 = 65536;
    pub const LKL_O_NOFOLLOW: u32 = 131072;
    pub const LKL_O_NOATIME: u32 = 262144;
    pub const LKL_O_CLOEXEC: u32 = 524288;
    pub const __LKL__O_SYNC: u32 = 1048576;
    pub const LKL_O_SYNC: u32 = 1052672;
    pub const LKL_O_PATH: u32 = 2097152;
    pub const __LKL__O_TMPFILE: u32 = 4194304;
    pub const LKL_O_TMPFILE: u32 = 4259840;
    pub const LKL_O_TMPFILE_MASK: u32 = 4259904;
    pub const LKL_O_NDELAY: u32 = 2048;
    pub const LKL_F_DUPFD: u32 = 0;
    pub const LKL_F_GETFD: u32 = 1;
    pub const LKL_F_SETFD: u32 = 2;
    pub const LKL_F_GETFL: u32 = 3;
    pub const LKL_F_SETFL: u32 = 4;
    pub const LKL_F_GETLK: u32 = 5;
    pub const LKL_F_SETLK: u32 = 6;
    pub const LKL_F_SETLKW: u32 = 7;
    pub const LKL_F_SETOWN: u32 = 8;
    pub const LKL_F_GETOWN: u32 = 9;
    pub const LKL_F_SETSIG: u32 = 10;
    pub const LKL_F_GETSIG: u32 = 11;
    pub const LKL_F_GETLK64: u32 = 12;
    pub const LKL_F_SETLK64: u32 = 13;
    pub const LKL_F_SETLKW64: u32 = 14;
    pub const LKL_F_SETOWN_EX: u32 = 15;
    pub const LKL_F_GETOWN_EX: u32 = 16;
    pub const LKL_F_GETOWNER_UIDS: u32 = 17;
    pub const LKL_F_OFD_GETLK: u32 = 36;
    pub const LKL_F_OFD_SETLK: u32 = 37;
    pub const LKL_F_OFD_SETLKW: u32 = 38;
    pub const LKL_F_OWNER_TID: u32 = 0;
    pub const LKL_F_OWNER_PID: u32 = 1;
    pub const LKL_F_OWNER_PGRP: u32 = 2;
    pub const LKL_FD_CLOEXEC: u32 = 1;
    pub const LKL_F_RDLCK: u32 = 0;
    pub const LKL_F_WRLCK: u32 = 1;
    pub const LKL_F_UNLCK: u32 = 2;
    pub const LKL_F_EXLCK: u32 = 4;
    pub const LKL_F_SHLCK: u32 = 8;
    pub const LKL_LOCK_SH: u32 = 1;
    pub const LKL_LOCK_EX: u32 = 2;
    pub const LKL_LOCK_NB: u32 = 4;
    pub const LKL_LOCK_UN: u32 = 8;
    pub const LKL_LOCK_MAND: u32 = 32;
    pub const LKL_LOCK_READ: u32 = 64;
    pub const LKL_LOCK_WRITE: u32 = 128;
    pub const LKL_LOCK_RW: u32 = 192;
    pub const LKL_F_LINUX_SPECIFIC_BASE: u32 = 1024;
    pub const LKL_RESOLVE_NO_XDEV: u32 = 1;
    pub const LKL_RESOLVE_NO_MAGICLINKS: u32 = 2;
    pub const LKL_RESOLVE_NO_SYMLINKS: u32 = 4;
    pub const LKL_RESOLVE_BENEATH: u32 = 8;
    pub const LKL_RESOLVE_IN_ROOT: u32 = 16;
    pub const LKL_F_SETLEASE: u32 = 1024;
    pub const LKL_F_GETLEASE: u32 = 1025;
    pub const LKL_F_CANCELLK: u32 = 1029;
    pub const LKL_F_DUPFD_CLOEXEC: u32 = 1030;
    pub const LKL_F_NOTIFY: u32 = 1026;
    pub const LKL_F_SETPIPE_SZ: u32 = 1031;
    pub const LKL_F_GETPIPE_SZ: u32 = 1032;
    pub const LKL_F_ADD_SEALS: u32 = 1033;
    pub const LKL_F_GET_SEALS: u32 = 1034;
    pub const LKL_F_SEAL_SEAL: u32 = 1;
    pub const LKL_F_SEAL_SHRINK: u32 = 2;
    pub const LKL_F_SEAL_GROW: u32 = 4;
    pub const LKL_F_SEAL_WRITE: u32 = 8;
    pub const LKL_F_SEAL_FUTURE_WRITE: u32 = 16;
    pub const LKL_F_GET_RW_HINT: u32 = 1035;
    pub const LKL_F_SET_RW_HINT: u32 = 1036;
    pub const LKL_F_GET_FILE_RW_HINT: u32 = 1037;
    pub const LKL_F_SET_FILE_RW_HINT: u32 = 1038;
    pub const LKL_RWH_WRITE_LIFE_NOT_SET: u32 = 0;
    pub const LKL_RWH_WRITE_LIFE_NONE: u32 = 1;
    pub const LKL_RWH_WRITE_LIFE_SHORT: u32 = 2;
    pub const LKL_RWH_WRITE_LIFE_MEDIUM: u32 = 3;
    pub const LKL_RWH_WRITE_LIFE_LONG: u32 = 4;
    pub const LKL_RWH_WRITE_LIFE_EXTREME: u32 = 5;
    pub const LKL_RWF_WRITE_LIFE_NOT_SET: u32 = 0;
    pub const LKL_DN_ACCESS: u32 = 1;
    pub const LKL_DN_MODIFY: u32 = 2;
    pub const LKL_DN_CREATE: u32 = 4;
    pub const LKL_DN_DELETE: u32 = 8;
    pub const LKL_DN_RENAME: u32 = 16;
    pub const LKL_DN_ATTRIB: u32 = 32;
    pub const LKL_DN_MULTISHOT: u32 = 2147483648;
    pub const LKL_AT_FDCWD: i32 = -100;
    pub const LKL_AT_SYMLINK_NOFOLLOW: u32 = 256;
    pub const LKL_AT_EACCESS: u32 = 512;
    pub const LKL_AT_REMOVEDIR: u32 = 512;
    pub const LKL_AT_SYMLINK_FOLLOW: u32 = 1024;
    pub const LKL_AT_NO_AUTOMOUNT: u32 = 2048;
    pub const LKL_AT_EMPTY_PATH: u32 = 4096;
    pub const LKL_AT_STATX_SYNC_TYPE: u32 = 24576;
    pub const LKL_AT_STATX_SYNC_AS_STAT: u32 = 0;
    pub const LKL_AT_STATX_FORCE_SYNC: u32 = 8192;
    pub const LKL_AT_STATX_DONT_SYNC: u32 = 16384;
    pub const LKL_AT_RECURSIVE: u32 = 32768;
    pub const LKL_NR_OPEN: u32 = 1024;
    pub const LKL_NGROUPS_MAX: u32 = 65536;
    pub const LKL_ARG_MAX: u32 = 131072;
    pub const LKL_LINK_MAX: u32 = 127;
    pub const LKL_MAX_CANON: u32 = 255;
    pub const LKL_MAX_INPUT: u32 = 255;
    pub const LKL_NAME_MAX: u32 = 255;
    pub const LKL_PATH_MAX: u32 = 4096;
    pub const LKL_PIPE_BUF: u32 = 4096;
    pub const LKL_XATTR_NAME_MAX: u32 = 255;
    pub const LKL_XATTR_SIZE_MAX: u32 = 65536;
    pub const LKL_XATTR_LIST_MAX: u32 = 65536;
    pub const LKL_RTSIG_MAX: u32 = 32;
    pub const _LKL_IOC_NRBITS: u32 = 8;
    pub const _LKL_IOC_TYPEBITS: u32 = 8;
    pub const _LKL_IOC_SIZEBITS: u32 = 14;
    pub const _LKL_IOC_DIRBITS: u32 = 2;
    pub const _LKL_IOC_NRMASK: u32 = 255;
    pub const _LKL_IOC_TYPEMASK: u32 = 255;
    pub const _LKL_IOC_SIZEMASK: u32 = 16383;
    pub const _LKL_IOC_DIRMASK: u32 = 3;
    pub const _LKL_IOC_NRSHIFT: u32 = 0;
    pub const _LKL_IOC_TYPESHIFT: u32 = 8;
    pub const _LKL_IOC_SIZESHIFT: u32 = 16;
    pub const _LKL_IOC_DIRSHIFT: u32 = 30;
    pub const _LKL_IOC_NONE: u32 = 0;
    pub const _LKL_IOC_WRITE: u32 = 1;
    pub const _LKL_IOC_READ: u32 = 2;
    pub const LKL_IOC_IN: u32 = 1073741824;
    pub const LKL_IOC_OUT: u32 = 2147483648;
    pub const LKL_IOC_INOUT: u32 = 3221225472;
    pub const LKL_IOCSIZE_MASK: u32 = 1073676288;
    pub const LKL_IOCSIZE_SHIFT: u32 = 16;
    pub const LKL_FSCRYPT_POLICY_FLAGS_PAD_4: u32 = 0;
    pub const LKL_FSCRYPT_POLICY_FLAGS_PAD_8: u32 = 1;
    pub const LKL_FSCRYPT_POLICY_FLAGS_PAD_16: u32 = 2;
    pub const LKL_FSCRYPT_POLICY_FLAGS_PAD_32: u32 = 3;
    pub const LKL_FSCRYPT_POLICY_FLAGS_PAD_MASK: u32 = 3;
    pub const LKL_FSCRYPT_POLICY_FLAG_DIRECT_KEY: u32 = 4;
    pub const LKL_FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64: u32 = 8;
    pub const LKL_FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32: u32 = 16;
    pub const LKL_FSCRYPT_POLICY_FLAGS_VALID: u32 = 31;
    pub const LKL_FSCRYPT_MODE_AES_256_XTS: u32 = 1;
    pub const LKL_FSCRYPT_MODE_AES_256_CTS: u32 = 4;
    pub const LKL_FSCRYPT_MODE_AES_128_CBC: u32 = 5;
    pub const LKL_FSCRYPT_MODE_AES_128_CTS: u32 = 6;
    pub const LKL_FSCRYPT_MODE_ADIANTUM: u32 = 9;
    pub const __LKL__FSCRYPT_MODE_MAX: u32 = 9;
    pub const LKL_FSCRYPT_POLICY_V1: u32 = 0;
    pub const LKL_FSCRYPT_KEY_DESCRIPTOR_SIZE: u32 = 8;
    pub const LKL_FSCRYPT_KEY_DESC_PREFIX: &[u8; 9usize] = b"fscrypt:\0";
    pub const LKL_FSCRYPT_KEY_DESC_PREFIX_SIZE: u32 = 8;
    pub const LKL_FSCRYPT_MAX_KEY_SIZE: u32 = 64;
    pub const LKL_FSCRYPT_POLICY_V2: u32 = 2;
    pub const LKL_FSCRYPT_KEY_IDENTIFIER_SIZE: u32 = 16;
    pub const LKL_FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR: u32 = 1;
    pub const LKL_FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER: u32 = 2;
    pub const LKL_FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY: u32 = 1;
    pub const LKL_FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS: u32 = 2;
    pub const LKL_FSCRYPT_KEY_STATUS_ABSENT: u32 = 1;
    pub const LKL_FSCRYPT_KEY_STATUS_PRESENT: u32 = 2;
    pub const LKL_FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED: u32 = 3;
    pub const LKL_FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF: u32 = 1;
    pub const LKL_FS_KEY_DESCRIPTOR_SIZE: u32 = 8;
    pub const LKL_FS_POLICY_FLAGS_PAD_4: u32 = 0;
    pub const LKL_FS_POLICY_FLAGS_PAD_8: u32 = 1;
    pub const LKL_FS_POLICY_FLAGS_PAD_16: u32 = 2;
    pub const LKL_FS_POLICY_FLAGS_PAD_32: u32 = 3;
    pub const LKL_FS_POLICY_FLAGS_PAD_MASK: u32 = 3;
    pub const LKL_FS_POLICY_FLAG_DIRECT_KEY: u32 = 4;
    pub const LKL_FS_POLICY_FLAGS_VALID: u32 = 31;
    pub const LKL_FS_ENCRYPTION_MODE_INVALID: u32 = 0;
    pub const LKL_FS_ENCRYPTION_MODE_AES_256_XTS: u32 = 1;
    pub const LKL_FS_ENCRYPTION_MODE_AES_256_GCM: u32 = 2;
    pub const LKL_FS_ENCRYPTION_MODE_AES_256_CBC: u32 = 3;
    pub const LKL_FS_ENCRYPTION_MODE_AES_256_CTS: u32 = 4;
    pub const LKL_FS_ENCRYPTION_MODE_AES_128_CBC: u32 = 5;
    pub const LKL_FS_ENCRYPTION_MODE_AES_128_CTS: u32 = 6;
    pub const LKL_FS_ENCRYPTION_MODE_SPECK128_256_XTS: u32 = 7;
    pub const LKL_FS_ENCRYPTION_MODE_SPECK128_256_CTS: u32 = 8;
    pub const LKL_FS_ENCRYPTION_MODE_ADIANTUM: u32 = 9;
    pub const LKL_FS_KEY_DESC_PREFIX: &[u8; 9usize] = b"fscrypt:\0";
    pub const LKL_FS_KEY_DESC_PREFIX_SIZE: u32 = 8;
    pub const LKL_FS_MAX_KEY_SIZE: u32 = 64;
    pub const LKL_MS_RDONLY: u32 = 1;
    pub const LKL_MS_NOSUID: u32 = 2;
    pub const LKL_MS_NODEV: u32 = 4;
    pub const LKL_MS_NOEXEC: u32 = 8;
    pub const LKL_MS_SYNCHRONOUS: u32 = 16;
    pub const LKL_MS_REMOUNT: u32 = 32;
    pub const LKL_MS_MANDLOCK: u32 = 64;
    pub const LKL_MS_DIRSYNC: u32 = 128;
    pub const LKL_MS_NOSYMFOLLOW: u32 = 256;
    pub const LKL_MS_NOATIME: u32 = 1024;
    pub const LKL_MS_NODIRATIME: u32 = 2048;
    pub const LKL_MS_BIND: u32 = 4096;
    pub const LKL_MS_MOVE: u32 = 8192;
    pub const LKL_MS_REC: u32 = 16384;
    pub const LKL_MS_VERBOSE: u32 = 32768;
    pub const LKL_MS_SILENT: u32 = 32768;
    pub const LKL_MS_POSIXACL: u32 = 65536;
    pub const LKL_MS_UNBINDABLE: u32 = 131072;
    pub const LKL_MS_PRIVATE: u32 = 262144;
    pub const LKL_MS_SLAVE: u32 = 524288;
    pub const LKL_MS_SHARED: u32 = 1048576;
    pub const LKL_MS_RELATIME: u32 = 2097152;
    pub const LKL_MS_KERNMOUNT: u32 = 4194304;
    pub const LKL_MS_I_VERSION: u32 = 8388608;
    pub const LKL_MS_STRICTATIME: u32 = 16777216;
    pub const LKL_MS_LAZYTIME: u32 = 33554432;
    pub const LKL_MS_SUBMOUNT: u32 = 67108864;
    pub const LKL_MS_NOREMOTELOCK: u32 = 134217728;
    pub const LKL_MS_NOSEC: u32 = 268435456;
    pub const LKL_MS_BORN: u32 = 536870912;
    pub const LKL_MS_ACTIVE: u32 = 1073741824;
    pub const LKL_MS_NOUSER: u32 = 2147483648;
    pub const LKL_MS_RMT_MASK: u32 = 41943121;
    pub const LKL_MS_MGC_VAL: u32 = 3236757504;
    pub const LKL_MS_MGC_MSK: u32 = 4294901760;
    pub const LKL_OPEN_TREE_CLONE: u32 = 1;
    pub const LKL_OPEN_TREE_CLOEXEC: u32 = 524288;
    pub const LKL_MOVE_MOUNT_F_SYMLINKS: u32 = 1;
    pub const LKL_MOVE_MOUNT_F_AUTOMOUNTS: u32 = 2;
    pub const LKL_MOVE_MOUNT_F_EMPTY_PATH: u32 = 4;
    pub const LKL_MOVE_MOUNT_T_SYMLINKS: u32 = 16;
    pub const LKL_MOVE_MOUNT_T_AUTOMOUNTS: u32 = 32;
    pub const LKL_MOVE_MOUNT_T_EMPTY_PATH: u32 = 64;
    pub const LKL_MOVE_MOUNT__MASK: u32 = 119;
    pub const LKL_FSOPEN_CLOEXEC: u32 = 1;
    pub const LKL_FSPICK_CLOEXEC: u32 = 1;
    pub const LKL_FSPICK_SYMLINK_NOFOLLOW: u32 = 2;
    pub const LKL_FSPICK_NO_AUTOMOUNT: u32 = 4;
    pub const LKL_FSPICK_EMPTY_PATH: u32 = 8;
    pub const LKL_FSMOUNT_CLOEXEC: u32 = 1;
    pub const LKL_MOUNT_ATTR_RDONLY: u32 = 1;
    pub const LKL_MOUNT_ATTR_NOSUID: u32 = 2;
    pub const LKL_MOUNT_ATTR_NODEV: u32 = 4;
    pub const LKL_MOUNT_ATTR_NOEXEC: u32 = 8;
    pub const LKL_MOUNT_ATTR__ATIME: u32 = 112;
    pub const LKL_MOUNT_ATTR_RELATIME: u32 = 0;
    pub const LKL_MOUNT_ATTR_NOATIME: u32 = 16;
    pub const LKL_MOUNT_ATTR_STRICTATIME: u32 = 32;
    pub const LKL_MOUNT_ATTR_NODIRATIME: u32 = 128;
    pub const LKL_INR_OPEN_CUR: u32 = 1024;
    pub const LKL_INR_OPEN_MAX: u32 = 4096;
    pub const LKL_BLOCK_SIZE_BITS: u32 = 10;
    pub const LKL_BLOCK_SIZE: u32 = 1024;
    pub const LKL_SEEK_SET: u32 = 0;
    pub const LKL_SEEK_CUR: u32 = 1;
    pub const LKL_SEEK_END: u32 = 2;
    pub const LKL_SEEK_DATA: u32 = 3;
    pub const LKL_SEEK_HOLE: u32 = 4;
    pub const LKL_SEEK_MAX: u32 = 4;
    pub const LKL_RENAME_NOREPLACE: u32 = 1;
    pub const LKL_RENAME_EXCHANGE: u32 = 2;
    pub const LKL_RENAME_WHITEOUT: u32 = 4;
    pub const LKL_FILE_DEDUPE_RANGE_SAME: u32 = 0;
    pub const LKL_FILE_DEDUPE_RANGE_DIFFERS: u32 = 1;
    pub const LKL_NR_FILE: u32 = 8192;
    pub const LKL_FS_XFLAG_REALTIME: u32 = 1;
    pub const LKL_FS_XFLAG_PREALLOC: u32 = 2;
    pub const LKL_FS_XFLAG_IMMUTABLE: u32 = 8;
    pub const LKL_FS_XFLAG_APPEND: u32 = 16;
    pub const LKL_FS_XFLAG_SYNC: u32 = 32;
    pub const LKL_FS_XFLAG_NOATIME: u32 = 64;
    pub const LKL_FS_XFLAG_NODUMP: u32 = 128;
    pub const LKL_FS_XFLAG_RTINHERIT: u32 = 256;
    pub const LKL_FS_XFLAG_PROJINHERIT: u32 = 512;
    pub const LKL_FS_XFLAG_NOSYMLINKS: u32 = 1024;
    pub const LKL_FS_XFLAG_EXTSIZE: u32 = 2048;
    pub const LKL_FS_XFLAG_EXTSZINHERIT: u32 = 4096;
    pub const LKL_FS_XFLAG_NODEFRAG: u32 = 8192;
    pub const LKL_FS_XFLAG_FILESTREAM: u32 = 16384;
    pub const LKL_FS_XFLAG_DAX: u32 = 32768;
    pub const LKL_FS_XFLAG_COWEXTSIZE: u32 = 65536;
    pub const LKL_FS_XFLAG_HASATTR: u32 = 2147483648;
    pub const LKL_BMAP_IOCTL: u32 = 1;
    pub const LKL_FSLABEL_MAX: u32 = 256;
    pub const LKL_FS_SECRM_FL: u32 = 1;
    pub const LKL_FS_UNRM_FL: u32 = 2;
    pub const LKL_FS_COMPR_FL: u32 = 4;
    pub const LKL_FS_SYNC_FL: u32 = 8;
    pub const LKL_FS_IMMUTABLE_FL: u32 = 16;
    pub const LKL_FS_APPEND_FL: u32 = 32;
    pub const LKL_FS_NODUMP_FL: u32 = 64;
    pub const LKL_FS_NOATIME_FL: u32 = 128;
    pub const LKL_FS_DIRTY_FL: u32 = 256;
    pub const LKL_FS_COMPRBLK_FL: u32 = 512;
    pub const LKL_FS_NOCOMP_FL: u32 = 1024;
    pub const LKL_FS_ENCRYPT_FL: u32 = 2048;
    pub const LKL_FS_BTREE_FL: u32 = 4096;
    pub const LKL_FS_INDEX_FL: u32 = 4096;
    pub const LKL_FS_IMAGIC_FL: u32 = 8192;
    pub const LKL_FS_JOURNAL_DATA_FL: u32 = 16384;
    pub const LKL_FS_NOTAIL_FL: u32 = 32768;
    pub const LKL_FS_DIRSYNC_FL: u32 = 65536;
    pub const LKL_FS_TOPDIR_FL: u32 = 131072;
    pub const LKL_FS_HUGE_FILE_FL: u32 = 262144;
    pub const LKL_FS_EXTENT_FL: u32 = 524288;
    pub const LKL_FS_VERITY_FL: u32 = 1048576;
    pub const LKL_FS_EA_INODE_FL: u32 = 2097152;
    pub const LKL_FS_EOFBLOCKS_FL: u32 = 4194304;
    pub const LKL_FS_NOCOW_FL: u32 = 8388608;
    pub const LKL_FS_DAX_FL: u32 = 33554432;
    pub const LKL_FS_INLINE_DATA_FL: u32 = 268435456;
    pub const LKL_FS_PROJINHERIT_FL: u32 = 536870912;
    pub const LKL_FS_CASEFOLD_FL: u32 = 1073741824;
    pub const LKL_FS_RESERVED_FL: u32 = 2147483648;
    pub const LKL_FS_FL_USER_VISIBLE: u32 = 253951;
    pub const LKL_FS_FL_USER_MODIFIABLE: u32 = 229631;
    pub const LKL_SYNC_FILE_RANGE_WAIT_BEFORE: u32 = 1;
    pub const LKL_SYNC_FILE_RANGE_WRITE: u32 = 2;
    pub const LKL_SYNC_FILE_RANGE_WAIT_AFTER: u32 = 4;
    pub const LKL_SYNC_FILE_RANGE_WRITE_AND_WAIT: u32 = 7;
    pub const LKL_STAT_HAVE_NSEC: u32 = 1;
    pub const LKL_BPF_LD: u32 = 0;
    pub const LKL_BPF_LDX: u32 = 1;
    pub const LKL_BPF_ST: u32 = 2;
    pub const LKL_BPF_STX: u32 = 3;
    pub const LKL_BPF_ALU: u32 = 4;
    pub const LKL_BPF_JMP: u32 = 5;
    pub const LKL_BPF_RET: u32 = 6;
    pub const LKL_BPF_MISC: u32 = 7;
    pub const LKL_BPF_W: u32 = 0;
    pub const LKL_BPF_H: u32 = 8;
    pub const LKL_BPF_B: u32 = 16;
    pub const LKL_BPF_IMM: u32 = 0;
    pub const LKL_BPF_ABS: u32 = 32;
    pub const LKL_BPF_IND: u32 = 64;
    pub const LKL_BPF_MEM: u32 = 96;
    pub const LKL_BPF_LEN: u32 = 128;
    pub const LKL_BPF_MSH: u32 = 160;
    pub const LKL_BPF_ADD: u32 = 0;
    pub const LKL_BPF_SUB: u32 = 16;
    pub const LKL_BPF_MUL: u32 = 32;
    pub const LKL_BPF_DIV: u32 = 48;
    pub const LKL_BPF_OR: u32 = 64;
    pub const LKL_BPF_AND: u32 = 80;
    pub const LKL_BPF_LSH: u32 = 96;
    pub const LKL_BPF_RSH: u32 = 112;
    pub const LKL_BPF_NEG: u32 = 128;
    pub const LKL_BPF_MOD: u32 = 144;
    pub const LKL_BPF_XOR: u32 = 160;
    pub const LKL_BPF_JA: u32 = 0;
    pub const LKL_BPF_JEQ: u32 = 16;
    pub const LKL_BPF_JGT: u32 = 32;
    pub const LKL_BPF_JGE: u32 = 48;
    pub const LKL_BPF_JSET: u32 = 64;
    pub const LKL_BPF_K: u32 = 0;
    pub const LKL_BPF_X: u32 = 8;
    pub const LKL_BPF_MAXINSNS: u32 = 4096;
    pub const LKL_BPF_JMP32: u32 = 6;
    pub const LKL_BPF_ALU64: u32 = 7;
    pub const LKL_BPF_DW: u32 = 24;
    pub const LKL_BPF_XADD: u32 = 192;
    pub const LKL_BPF_MOV: u32 = 176;
    pub const LKL_BPF_ARSH: u32 = 192;
    pub const LKL_BPF_END: u32 = 208;
    pub const LKL_BPF_TO_LE: u32 = 0;
    pub const LKL_BPF_TO_BE: u32 = 8;
    pub const LKL_BPF_FROM_LE: u32 = 0;
    pub const LKL_BPF_FROM_BE: u32 = 8;
    pub const LKL_BPF_JNE: u32 = 80;
    pub const LKL_BPF_JLT: u32 = 160;
    pub const LKL_BPF_JLE: u32 = 176;
    pub const LKL_BPF_JSGT: u32 = 96;
    pub const LKL_BPF_JSGE: u32 = 112;
    pub const LKL_BPF_JSLT: u32 = 192;
    pub const LKL_BPF_JSLE: u32 = 208;
    pub const LKL_BPF_CALL: u32 = 128;
    pub const LKL_BPF_EXIT: u32 = 144;
    pub const LKL_BPF_F_ALLOW_OVERRIDE: u32 = 1;
    pub const LKL_BPF_F_ALLOW_MULTI: u32 = 2;
    pub const LKL_BPF_F_REPLACE: u32 = 4;
    pub const LKL_BPF_F_STRICT_ALIGNMENT: u32 = 1;
    pub const LKL_BPF_F_ANY_ALIGNMENT: u32 = 2;
    pub const LKL_BPF_F_TEST_RND_HI32: u32 = 4;
    pub const LKL_BPF_F_TEST_STATE_FREQ: u32 = 8;
    pub const LKL_BPF_F_SLEEPABLE: u32 = 16;
    pub const LKL_BPF_PSEUDO_MAP_FD: u32 = 1;
    pub const LKL_BPF_PSEUDO_MAP_VALUE: u32 = 2;
    pub const LKL_BPF_PSEUDO_BTF_ID: u32 = 3;
    pub const LKL_BPF_PSEUDO_CALL: u32 = 1;
    pub const LKL_BPF_F_QUERY_EFFECTIVE: u32 = 1;
    pub const LKL_BPF_F_TEST_RUN_ON_CPU: u32 = 1;
    pub const LKL_BPF_BUILD_ID_SIZE: u32 = 20;
    pub const LKL_BPF_OBJ_NAME_LEN: u32 = 16;
    pub const LKL_XDP_PACKET_HEADROOM: u32 = 256;
    pub const LKL_BPF_TAG_SIZE: u32 = 8;
    pub const LKL_IPC_CREAT: u32 = 512;
    pub const LKL_IPC_EXCL: u32 = 1024;
    pub const LKL_IPC_NOWAIT: u32 = 2048;
    pub const LKL_IPC_DIPC: u32 = 4096;
    pub const LKL_IPC_OWN: u32 = 8192;
    pub const LKL_IPC_RMID: u32 = 0;
    pub const LKL_IPC_SET: u32 = 1;
    pub const LKL_IPC_STAT: u32 = 2;
    pub const LKL_IPC_INFO: u32 = 3;
    pub const LKL_IPC_OLD: u32 = 0;
    pub const LKL_IPC_64: u32 = 256;
    pub const LKL_SEMOP: u32 = 1;
    pub const LKL_SEMGET: u32 = 2;
    pub const LKL_SEMCTL: u32 = 3;
    pub const LKL_SEMTIMEDOP: u32 = 4;
    pub const LKL_MSGSND: u32 = 11;
    pub const LKL_MSGRCV: u32 = 12;
    pub const LKL_MSGGET: u32 = 13;
    pub const LKL_MSGCTL: u32 = 14;
    pub const LKL_SHMAT: u32 = 21;
    pub const LKL_SHMDT: u32 = 22;
    pub const LKL_SHMGET: u32 = 23;
    pub const LKL_SHMCTL: u32 = 24;
    pub const LKL_DIPC: u32 = 25;
    pub const LKL_MSG_STAT: u32 = 11;
    pub const LKL_MSG_INFO: u32 = 12;
    pub const LKL_MSG_STAT_ANY: u32 = 13;
    pub const LKL_MSG_NOERROR: u32 = 4096;
    pub const LKL_MSG_EXCEPT: u32 = 8192;
    pub const LKL_MSG_COPY: u32 = 16384;
    pub const LKL_MSGMNI: u32 = 32000;
    pub const LKL_MSGMAX: u32 = 8192;
    pub const LKL_MSGMNB: u32 = 16384;
    pub const LKL_MSGPOOL: u32 = 512000;
    pub const LKL_MSGTQL: u32 = 16384;
    pub const LKL_MSGMAP: u32 = 16384;
    pub const LKL_MSGSSZ: u32 = 16;
    pub const __LKL__MSGSEG: u32 = 32768000;
    pub const LKL_RUSAGE_SELF: u32 = 0;
    pub const LKL_RUSAGE_CHILDREN: i32 = -1;
    pub const LKL_RUSAGE_BOTH: i32 = -2;
    pub const LKL_RUSAGE_THREAD: u32 = 1;
    pub const LKL_RLIM64_INFINITY: i32 = -1;
    pub const LKL_PRIO_MIN: i32 = -20;
    pub const LKL_PRIO_MAX: u32 = 20;
    pub const LKL_PRIO_PROCESS: u32 = 0;
    pub const LKL_PRIO_PGRP: u32 = 1;
    pub const LKL_PRIO_USER: u32 = 2;
    pub const _LKL_STK_LIM: u32 = 8388608;
    pub const LKL_RLIMIT_CPU: u32 = 0;
    pub const LKL_RLIMIT_FSIZE: u32 = 1;
    pub const LKL_RLIMIT_DATA: u32 = 2;
    pub const LKL_RLIMIT_STACK: u32 = 3;
    pub const LKL_RLIMIT_CORE: u32 = 4;
    pub const LKL_RLIMIT_RSS: u32 = 5;
    pub const LKL_RLIMIT_NPROC: u32 = 6;
    pub const LKL_RLIMIT_NOFILE: u32 = 7;
    pub const LKL_RLIMIT_MEMLOCK: u32 = 8;
    pub const LKL_RLIMIT_AS: u32 = 9;
    pub const LKL_RLIMIT_LOCKS: u32 = 10;
    pub const LKL_RLIMIT_SIGPENDING: u32 = 11;
    pub const LKL_RLIMIT_MSGQUEUE: u32 = 12;
    pub const LKL_RLIMIT_NICE: u32 = 13;
    pub const LKL_RLIMIT_RTPRIO: u32 = 14;
    pub const LKL_RLIMIT_RTTIME: u32 = 15;
    pub const LKL_RLIM_NLIMITS: u32 = 16;
    pub const LKL_RLIM_INFINITY: i32 = -1;
    pub const LKL_SI_LOAD_SHIFT: u32 = 16;
    pub const LKL_HUGETLB_FLAG_ENCODE_SHIFT: u32 = 26;
    pub const LKL_HUGETLB_FLAG_ENCODE_MASK: u32 = 63;
    pub const LKL_HUGETLB_FLAG_ENCODE_16KB: u32 = 939524096;
    pub const LKL_HUGETLB_FLAG_ENCODE_64KB: u32 = 1073741824;
    pub const LKL_HUGETLB_FLAG_ENCODE_512KB: u32 = 1275068416;
    pub const LKL_HUGETLB_FLAG_ENCODE_1MB: u32 = 1342177280;
    pub const LKL_HUGETLB_FLAG_ENCODE_2MB: u32 = 1409286144;
    pub const LKL_HUGETLB_FLAG_ENCODE_8MB: u32 = 1543503872;
    pub const LKL_HUGETLB_FLAG_ENCODE_16MB: u32 = 1610612736;
    pub const LKL_HUGETLB_FLAG_ENCODE_32MB: u32 = 1677721600;
    pub const LKL_HUGETLB_FLAG_ENCODE_256MB: u32 = 1879048192;
    pub const LKL_HUGETLB_FLAG_ENCODE_512MB: u32 = 1946157056;
    pub const LKL_HUGETLB_FLAG_ENCODE_1GB: u32 = 2013265920;
    pub const LKL_HUGETLB_FLAG_ENCODE_2GB: u32 = 2080374784;
    pub const LKL_HUGETLB_FLAG_ENCODE_16GB: u32 = 2281701376;
    pub const _UNISTD_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2X: u32 = 0;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_POSIX_IMPLICITLY: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 31;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 1;
    pub const _POSIX_VERSION: u32 = 200809;
    pub const __POSIX2_THIS_VERSION: u32 = 200809;
    pub const _POSIX2_VERSION: u32 = 200809;
    pub const _POSIX2_C_VERSION: u32 = 200809;
    pub const _POSIX2_C_BIND: u32 = 200809;
    pub const _POSIX2_C_DEV: u32 = 200809;
    pub const _POSIX2_SW_DEV: u32 = 200809;
    pub const _POSIX2_LOCALEDEF: u32 = 200809;
    pub const _XOPEN_VERSION: u32 = 700;
    pub const _XOPEN_XCU_VERSION: u32 = 4;
    pub const _XOPEN_XPG2: u32 = 1;
    pub const _XOPEN_XPG3: u32 = 1;
    pub const _XOPEN_XPG4: u32 = 1;
    pub const _XOPEN_UNIX: u32 = 1;
    pub const _XOPEN_ENH_I18N: u32 = 1;
    pub const _XOPEN_LEGACY: u32 = 1;
    pub const _BITS_POSIX_OPT_H: u32 = 1;
    pub const _POSIX_JOB_CONTROL: u32 = 1;
    pub const _POSIX_SAVED_IDS: u32 = 1;
    pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
    pub const _POSIX_FSYNC: u32 = 200809;
    pub const _POSIX_MAPPED_FILES: u32 = 200809;
    pub const _POSIX_MEMLOCK: u32 = 200809;
    pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
    pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
    pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
    pub const _POSIX_VDISABLE: u8 = 0u8;
    pub const _POSIX_NO_TRUNC: u32 = 1;
    pub const _XOPEN_REALTIME: u32 = 1;
    pub const _XOPEN_REALTIME_THREADS: u32 = 1;
    pub const _XOPEN_SHM: u32 = 1;
    pub const _POSIX_THREADS: u32 = 200809;
    pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
    pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
    pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
    pub const _POSIX_SEMAPHORES: u32 = 200809;
    pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
    pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
    pub const _POSIX_ASYNC_IO: u32 = 1;
    pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
    pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
    pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
    pub const _LFS_LARGEFILE: u32 = 1;
    pub const _LFS64_LARGEFILE: u32 = 1;
    pub const _LFS64_STDIO: u32 = 1;
    pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
    pub const _POSIX_CPUTIME: u32 = 0;
    pub const _POSIX_THREAD_CPUTIME: u32 = 0;
    pub const _POSIX_REGEXP: u32 = 1;
    pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
    pub const _POSIX_SHELL: u32 = 1;
    pub const _POSIX_TIMEOUTS: u32 = 200809;
    pub const _POSIX_SPIN_LOCKS: u32 = 200809;
    pub const _POSIX_SPAWN: u32 = 200809;
    pub const _POSIX_TIMERS: u32 = 200809;
    pub const _POSIX_BARRIERS: u32 = 200809;
    pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
    pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
    pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
    pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
    pub const _POSIX_ADVISORY_INFO: u32 = 200809;
    pub const _POSIX_IPV6: u32 = 200809;
    pub const _POSIX_RAW_SOCKETS: u32 = 200809;
    pub const _POSIX2_CHAR_TERM: u32 = 200809;
    pub const _POSIX_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_TRACE: i32 = -1;
    pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
    pub const _POSIX_TRACE_INHERIT: i32 = -1;
    pub const _POSIX_TRACE_LOG: i32 = -1;
    pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
    pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
    pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V7_LP64_OFF64: u32 = 1;
    pub const _POSIX_V6_LP64_OFF64: u32 = 1;
    pub const _XBS5_LP64_OFF64: u32 = 1;
    pub const __ILP32_OFF32_CFLAGS: &[u8; 5usize] = b"-m32\0";
    pub const __ILP32_OFF32_LDFLAGS: &[u8; 5usize] = b"-m32\0";
    pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48usize] =
        b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
    pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5usize] = b"-m32\0";
    pub const __LP64_OFF64_CFLAGS: &[u8; 5usize] = b"-m64\0";
    pub const __LP64_OFF64_LDFLAGS: &[u8; 5usize] = b"-m64\0";
    pub const STDIN_FILENO: u32 = 0;
    pub const STDOUT_FILENO: u32 = 1;
    pub const STDERR_FILENO: u32 = 2;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const __TIMESIZE: u32 = 64;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __STATFS_MATCHES_STATFS64: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_TIME64_H: u32 = 1;
    pub const R_OK: u32 = 4;
    pub const W_OK: u32 = 2;
    pub const X_OK: u32 = 1;
    pub const F_OK: u32 = 0;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const L_SET: u32 = 0;
    pub const L_INCR: u32 = 1;
    pub const L_XTND: u32 = 2;
    pub const _GETOPT_POSIX_H: u32 = 1;
    pub const _GETOPT_CORE_H: u32 = 1;
    pub const F_ULOCK: u32 = 0;
    pub const F_LOCK: u32 = 1;
    pub const F_TLOCK: u32 = 2;
    pub const F_TEST: u32 = 3;
    pub const LKL_SHMMIN: u32 = 1;
    pub const LKL_SHMMNI: u32 = 4096;
    pub const LKL_SHMSEG: u32 = 4096;
    pub const LKL_SHM_R: u32 = 256;
    pub const LKL_SHM_W: u32 = 128;
    pub const LKL_SHM_HUGETLB: u32 = 2048;
    pub const LKL_SHM_NORESERVE: u32 = 4096;
    pub const LKL_SHM_HUGE_SHIFT: u32 = 26;
    pub const LKL_SHM_HUGE_MASK: u32 = 63;
    pub const LKL_SHM_HUGE_64KB: u32 = 1073741824;
    pub const LKL_SHM_HUGE_512KB: u32 = 1275068416;
    pub const LKL_SHM_HUGE_1MB: u32 = 1342177280;
    pub const LKL_SHM_HUGE_2MB: u32 = 1409286144;
    pub const LKL_SHM_HUGE_8MB: u32 = 1543503872;
    pub const LKL_SHM_HUGE_16MB: u32 = 1610612736;
    pub const LKL_SHM_HUGE_32MB: u32 = 1677721600;
    pub const LKL_SHM_HUGE_256MB: u32 = 1879048192;
    pub const LKL_SHM_HUGE_512MB: u32 = 1946157056;
    pub const LKL_SHM_HUGE_1GB: u32 = 2013265920;
    pub const LKL_SHM_HUGE_2GB: u32 = 2080374784;
    pub const LKL_SHM_HUGE_16GB: u32 = 2281701376;
    pub const LKL_SHM_RDONLY: u32 = 4096;
    pub const LKL_SHM_RND: u32 = 8192;
    pub const LKL_SHM_REMAP: u32 = 16384;
    pub const LKL_SHM_EXEC: u32 = 32768;
    pub const LKL_SHM_LOCK: u32 = 11;
    pub const LKL_SHM_UNLOCK: u32 = 12;
    pub const LKL_SHM_STAT: u32 = 13;
    pub const LKL_SHM_INFO: u32 = 14;
    pub const LKL_SHM_STAT_ANY: u32 = 15;
    pub const __LKL__LITTLE_ENDIAN: u32 = 1234;
    pub const LKL_IOCB_FLAG_RESFD: u32 = 1;
    pub const LKL_IOCB_FLAG_IOPRIO: u32 = 2;
    pub const _LKL_K_SS_MAXSIZE: u32 = 128;
    pub const LKL_PERF_ATTR_SIZE_VER0: u32 = 64;
    pub const LKL_PERF_ATTR_SIZE_VER1: u32 = 72;
    pub const LKL_PERF_ATTR_SIZE_VER2: u32 = 80;
    pub const LKL_PERF_ATTR_SIZE_VER3: u32 = 96;
    pub const LKL_PERF_ATTR_SIZE_VER4: u32 = 104;
    pub const LKL_PERF_ATTR_SIZE_VER5: u32 = 112;
    pub const LKL_PERF_ATTR_SIZE_VER6: u32 = 120;
    pub const LKL_PERF_RECORD_MISC_CPUMODE_MASK: u32 = 7;
    pub const LKL_PERF_RECORD_MISC_CPUMODE_UNKNOWN: u32 = 0;
    pub const LKL_PERF_RECORD_MISC_KERNEL: u32 = 1;
    pub const LKL_PERF_RECORD_MISC_USER: u32 = 2;
    pub const LKL_PERF_RECORD_MISC_HYPERVISOR: u32 = 3;
    pub const LKL_PERF_RECORD_MISC_GUEST_KERNEL: u32 = 4;
    pub const LKL_PERF_RECORD_MISC_GUEST_USER: u32 = 5;
    pub const LKL_PERF_RECORD_MISC_PROC_MAP_PARSE_TIMEOUT: u32 = 4096;
    pub const LKL_PERF_RECORD_MISC_MMAP_DATA: u32 = 8192;
    pub const LKL_PERF_RECORD_MISC_COMM_EXEC: u32 = 8192;
    pub const LKL_PERF_RECORD_MISC_FORK_EXEC: u32 = 8192;
    pub const LKL_PERF_RECORD_MISC_SWITCH_OUT: u32 = 8192;
    pub const LKL_PERF_RECORD_MISC_EXACT_IP: u32 = 16384;
    pub const LKL_PERF_RECORD_MISC_SWITCH_OUT_PREEMPT: u32 = 16384;
    pub const LKL_PERF_RECORD_MISC_EXT_RESERVED: u32 = 32768;
    pub const LKL_PERF_RECORD_KSYMBOL_FLAGS_UNREGISTER: u32 = 1;
    pub const LKL_PERF_MAX_STACK_DEPTH: u32 = 127;
    pub const LKL_PERF_MAX_CONTEXTS_PER_STACK: u32 = 8;
    pub const LKL_PERF_AUX_FLAG_TRUNCATED: u32 = 1;
    pub const LKL_PERF_AUX_FLAG_OVERWRITE: u32 = 2;
    pub const LKL_PERF_AUX_FLAG_PARTIAL: u32 = 4;
    pub const LKL_PERF_AUX_FLAG_COLLISION: u32 = 8;
    pub const LKL_PERF_FLAG_FD_NO_GROUP: u32 = 1;
    pub const LKL_PERF_FLAG_FD_OUTPUT: u32 = 2;
    pub const LKL_PERF_FLAG_PID_CGROUP: u32 = 4;
    pub const LKL_PERF_FLAG_FD_CLOEXEC: u32 = 8;
    pub const LKL_PERF_MEM_OP_NA: u32 = 1;
    pub const LKL_PERF_MEM_OP_LOAD: u32 = 2;
    pub const LKL_PERF_MEM_OP_STORE: u32 = 4;
    pub const LKL_PERF_MEM_OP_PFETCH: u32 = 8;
    pub const LKL_PERF_MEM_OP_EXEC: u32 = 16;
    pub const LKL_PERF_MEM_OP_SHIFT: u32 = 0;
    pub const LKL_PERF_MEM_LVL_NA: u32 = 1;
    pub const LKL_PERF_MEM_LVL_HIT: u32 = 2;
    pub const LKL_PERF_MEM_LVL_MISS: u32 = 4;
    pub const LKL_PERF_MEM_LVL_L1: u32 = 8;
    pub const LKL_PERF_MEM_LVL_LFB: u32 = 16;
    pub const LKL_PERF_MEM_LVL_L2: u32 = 32;
    pub const LKL_PERF_MEM_LVL_L3: u32 = 64;
    pub const LKL_PERF_MEM_LVL_LOC_RAM: u32 = 128;
    pub const LKL_PERF_MEM_LVL_REM_RAM1: u32 = 256;
    pub const LKL_PERF_MEM_LVL_REM_RAM2: u32 = 512;
    pub const LKL_PERF_MEM_LVL_REM_CCE1: u32 = 1024;
    pub const LKL_PERF_MEM_LVL_REM_CCE2: u32 = 2048;
    pub const LKL_PERF_MEM_LVL_IO: u32 = 4096;
    pub const LKL_PERF_MEM_LVL_UNC: u32 = 8192;
    pub const LKL_PERF_MEM_LVL_SHIFT: u32 = 5;
    pub const LKL_PERF_MEM_REMOTE_REMOTE: u32 = 1;
    pub const LKL_PERF_MEM_REMOTE_SHIFT: u32 = 37;
    pub const LKL_PERF_MEM_LVLNUM_L1: u32 = 1;
    pub const LKL_PERF_MEM_LVLNUM_L2: u32 = 2;
    pub const LKL_PERF_MEM_LVLNUM_L3: u32 = 3;
    pub const LKL_PERF_MEM_LVLNUM_L4: u32 = 4;
    pub const LKL_PERF_MEM_LVLNUM_ANY_CACHE: u32 = 11;
    pub const LKL_PERF_MEM_LVLNUM_LFB: u32 = 12;
    pub const LKL_PERF_MEM_LVLNUM_RAM: u32 = 13;
    pub const LKL_PERF_MEM_LVLNUM_PMEM: u32 = 14;
    pub const LKL_PERF_MEM_LVLNUM_NA: u32 = 15;
    pub const LKL_PERF_MEM_LVLNUM_SHIFT: u32 = 33;
    pub const LKL_PERF_MEM_SNOOP_NA: u32 = 1;
    pub const LKL_PERF_MEM_SNOOP_NONE: u32 = 2;
    pub const LKL_PERF_MEM_SNOOP_HIT: u32 = 4;
    pub const LKL_PERF_MEM_SNOOP_MISS: u32 = 8;
    pub const LKL_PERF_MEM_SNOOP_HITM: u32 = 16;
    pub const LKL_PERF_MEM_SNOOP_SHIFT: u32 = 19;
    pub const LKL_PERF_MEM_SNOOPX_FWD: u32 = 1;
    pub const LKL_PERF_MEM_SNOOPX_SHIFT: u32 = 38;
    pub const LKL_PERF_MEM_LOCK_NA: u32 = 1;
    pub const LKL_PERF_MEM_LOCK_LOCKED: u32 = 2;
    pub const LKL_PERF_MEM_LOCK_SHIFT: u32 = 24;
    pub const LKL_PERF_MEM_TLB_NA: u32 = 1;
    pub const LKL_PERF_MEM_TLB_HIT: u32 = 2;
    pub const LKL_PERF_MEM_TLB_MISS: u32 = 4;
    pub const LKL_PERF_MEM_TLB_L1: u32 = 8;
    pub const LKL_PERF_MEM_TLB_L2: u32 = 16;
    pub const LKL_PERF_MEM_TLB_WK: u32 = 32;
    pub const LKL_PERF_MEM_TLB_OS: u32 = 64;
    pub const LKL_PERF_MEM_TLB_SHIFT: u32 = 26;
    pub const LKL_SEM_UNDO: u32 = 4096;
    pub const LKL_GETPID: u32 = 11;
    pub const LKL_GETVAL: u32 = 12;
    pub const LKL_GETALL: u32 = 13;
    pub const LKL_GETNCNT: u32 = 14;
    pub const LKL_GETZCNT: u32 = 15;
    pub const LKL_SETVAL: u32 = 16;
    pub const LKL_SETALL: u32 = 17;
    pub const LKL_SEM_STAT: u32 = 18;
    pub const LKL_SEM_INFO: u32 = 19;
    pub const LKL_SEM_STAT_ANY: u32 = 20;
    pub const LKL_SEMMNI: u32 = 32000;
    pub const LKL_SEMMSL: u32 = 32000;
    pub const LKL_SEMMNS: u32 = 1024000000;
    pub const LKL_SEMOPM: u32 = 500;
    pub const LKL_SEMVMX: u32 = 32767;
    pub const LKL_SEMAEM: u32 = 32767;
    pub const LKL_SEMUME: u32 = 500;
    pub const LKL_SEMMNU: u32 = 1024000000;
    pub const LKL_SEMMAP: u32 = 1024000000;
    pub const LKL_SEMUSZ: u32 = 20;
    pub const LKL_FUTEX_WAIT: u32 = 0;
    pub const LKL_FUTEX_WAKE: u32 = 1;
    pub const LKL_FUTEX_FD: u32 = 2;
    pub const LKL_FUTEX_REQUEUE: u32 = 3;
    pub const LKL_FUTEX_CMP_REQUEUE: u32 = 4;
    pub const LKL_FUTEX_WAKE_OP: u32 = 5;
    pub const LKL_FUTEX_LOCK_PI: u32 = 6;
    pub const LKL_FUTEX_UNLOCK_PI: u32 = 7;
    pub const LKL_FUTEX_TRYLOCK_PI: u32 = 8;
    pub const LKL_FUTEX_WAIT_BITSET: u32 = 9;
    pub const LKL_FUTEX_WAKE_BITSET: u32 = 10;
    pub const LKL_FUTEX_WAIT_REQUEUE_PI: u32 = 11;
    pub const LKL_FUTEX_CMP_REQUEUE_PI: u32 = 12;
    pub const LKL_FUTEX_PRIVATE_FLAG: u32 = 128;
    pub const LKL_FUTEX_CLOCK_REALTIME: u32 = 256;
    pub const LKL_FUTEX_CMD_MASK: i32 = -385;
    pub const LKL_FUTEX_WAIT_PRIVATE: u32 = 128;
    pub const LKL_FUTEX_WAKE_PRIVATE: u32 = 129;
    pub const LKL_FUTEX_REQUEUE_PRIVATE: u32 = 131;
    pub const LKL_FUTEX_CMP_REQUEUE_PRIVATE: u32 = 132;
    pub const LKL_FUTEX_WAKE_OP_PRIVATE: u32 = 133;
    pub const LKL_FUTEX_LOCK_PI_PRIVATE: u32 = 134;
    pub const LKL_FUTEX_UNLOCK_PI_PRIVATE: u32 = 135;
    pub const LKL_FUTEX_TRYLOCK_PI_PRIVATE: u32 = 136;
    pub const LKL_FUTEX_WAIT_BITSET_PRIVATE: u32 = 137;
    pub const LKL_FUTEX_WAKE_BITSET_PRIVATE: u32 = 138;
    pub const LKL_FUTEX_WAIT_REQUEUE_PI_PRIVATE: u32 = 139;
    pub const LKL_FUTEX_CMP_REQUEUE_PI_PRIVATE: u32 = 140;
    pub const LKL_FUTEX_WAITERS: u32 = 2147483648;
    pub const LKL_FUTEX_OWNER_DIED: u32 = 1073741824;
    pub const LKL_FUTEX_TID_MASK: u32 = 1073741823;
    pub const LKL_ROBUST_LIST_LIMIT: u32 = 2048;
    pub const LKL_FUTEX_BITSET_MATCH_ANY: u32 = 4294967295;
    pub const LKL_FUTEX_OP_SET: u32 = 0;
    pub const LKL_FUTEX_OP_ADD: u32 = 1;
    pub const LKL_FUTEX_OP_OR: u32 = 2;
    pub const LKL_FUTEX_OP_ANDN: u32 = 3;
    pub const LKL_FUTEX_OP_XOR: u32 = 4;
    pub const LKL_FUTEX_OP_OPARG_SHIFT: u32 = 8;
    pub const LKL_FUTEX_OP_CMP_EQ: u32 = 0;
    pub const LKL_FUTEX_OP_CMP_NE: u32 = 1;
    pub const LKL_FUTEX_OP_CMP_LT: u32 = 2;
    pub const LKL_FUTEX_OP_CMP_LE: u32 = 3;
    pub const LKL_FUTEX_OP_CMP_GT: u32 = 4;
    pub const LKL_FUTEX_OP_CMP_GE: u32 = 5;
    pub const LKL_POLLIN: u32 = 1;
    pub const LKL_POLLPRI: u32 = 2;
    pub const LKL_POLLOUT: u32 = 4;
    pub const LKL_POLLERR: u32 = 8;
    pub const LKL_POLLHUP: u32 = 16;
    pub const LKL_POLLNVAL: u32 = 32;
    pub const LKL_POLLRDNORM: u32 = 64;
    pub const LKL_POLLRDBAND: u32 = 128;
    pub const LKL_POLLWRNORM: u32 = 256;
    pub const LKL_POLLWRBAND: u32 = 512;
    pub const LKL_POLLMSG: u32 = 1024;
    pub const LKL_POLLREMOVE: u32 = 4096;
    pub const LKL_POLLRDHUP: u32 = 8192;
    pub const LKL_MQ_PRIO_MAX: u32 = 32768;
    pub const LKL_MQ_BYTES_MAX: u32 = 819200;
    pub const LKL_NOTIFY_NONE: u32 = 0;
    pub const LKL_NOTIFY_WOKENUP: u32 = 1;
    pub const LKL_NOTIFY_REMOVED: u32 = 2;
    pub const LKL_NOTIFY_COOKIE_LEN: u32 = 32;
    pub const LKL_EPOLL_CLOEXEC: u32 = 524288;
    pub const LKL_EPOLL_CTL_ADD: u32 = 1;
    pub const LKL_EPOLL_CTL_DEL: u32 = 2;
    pub const LKL_EPOLL_CTL_MOD: u32 = 3;
    pub const LKL_UIO_FASTIOV: u32 = 8;
    pub const LKL_UIO_MAXIOV: u32 = 1024;
    pub const _LKL_NSIG: u32 = 64;
    pub const _LKL_NSIG_BPW: u32 = 64;
    pub const _LKL_NSIG_WORDS: u32 = 1;
    pub const LKL_SIGHUP: u32 = 1;
    pub const LKL_SIGINT: u32 = 2;
    pub const LKL_SIGQUIT: u32 = 3;
    pub const LKL_SIGILL: u32 = 4;
    pub const LKL_SIGTRAP: u32 = 5;
    pub const LKL_SIGABRT: u32 = 6;
    pub const LKL_SIGIOT: u32 = 6;
    pub const LKL_SIGBUS: u32 = 7;
    pub const LKL_SIGFPE: u32 = 8;
    pub const LKL_SIGKILL: u32 = 9;
    pub const LKL_SIGUSR1: u32 = 10;
    pub const LKL_SIGSEGV: u32 = 11;
    pub const LKL_SIGUSR2: u32 = 12;
    pub const LKL_SIGPIPE: u32 = 13;
    pub const LKL_SIGALRM: u32 = 14;
    pub const LKL_SIGTERM: u32 = 15;
    pub const LKL_SIGSTKFLT: u32 = 16;
    pub const LKL_SIGCHLD: u32 = 17;
    pub const LKL_SIGCONT: u32 = 18;
    pub const LKL_SIGSTOP: u32 = 19;
    pub const LKL_SIGTSTP: u32 = 20;
    pub const LKL_SIGTTIN: u32 = 21;
    pub const LKL_SIGTTOU: u32 = 22;
    pub const LKL_SIGURG: u32 = 23;
    pub const LKL_SIGXCPU: u32 = 24;
    pub const LKL_SIGXFSZ: u32 = 25;
    pub const LKL_SIGVTALRM: u32 = 26;
    pub const LKL_SIGPROF: u32 = 27;
    pub const LKL_SIGWINCH: u32 = 28;
    pub const LKL_SIGIO: u32 = 29;
    pub const LKL_SIGPOLL: u32 = 29;
    pub const LKL_SIGPWR: u32 = 30;
    pub const LKL_SIGSYS: u32 = 31;
    pub const LKL_SIGUNUSED: u32 = 31;
    pub const LKL_SIGRTMIN: u32 = 32;
    pub const LKL_SIGRTMAX: u32 = 64;
    pub const LKL_SA_NOCLDSTOP: u32 = 1;
    pub const LKL_SA_NOCLDWAIT: u32 = 2;
    pub const LKL_SA_SIGINFO: u32 = 4;
    pub const LKL_SA_ONSTACK: u32 = 134217728;
    pub const LKL_SA_RESTART: u32 = 268435456;
    pub const LKL_SA_NODEFER: u32 = 1073741824;
    pub const LKL_SA_RESETHAND: u32 = 2147483648;
    pub const LKL_SA_NOMASK: u32 = 1073741824;
    pub const LKL_SA_ONESHOT: u32 = 2147483648;
    pub const LKL_MINSIGSTKSZ: u32 = 2048;
    pub const LKL_SIGSTKSZ: u32 = 8192;
    pub const LKL_SIG_BLOCK: u32 = 0;
    pub const LKL_SIG_UNBLOCK: u32 = 1;
    pub const LKL_SIG_SETMASK: u32 = 2;
    pub const LKL_SI_MAX_SIZE: u32 = 128;
    pub const LKL_SI_USER: u32 = 0;
    pub const LKL_SI_KERNEL: u32 = 128;
    pub const LKL_SI_QUEUE: i32 = -1;
    pub const LKL_SI_TIMER: i32 = -2;
    pub const LKL_SI_MESGQ: i32 = -3;
    pub const LKL_SI_ASYNCIO: i32 = -4;
    pub const LKL_SI_SIGIO: i32 = -5;
    pub const LKL_SI_TKILL: i32 = -6;
    pub const LKL_SI_DETHREAD: i32 = -7;
    pub const LKL_SI_ASYNCNL: i32 = -60;
    pub const LKL_ILL_ILLOPC: u32 = 1;
    pub const LKL_ILL_ILLOPN: u32 = 2;
    pub const LKL_ILL_ILLADR: u32 = 3;
    pub const LKL_ILL_ILLTRP: u32 = 4;
    pub const LKL_ILL_PRVOPC: u32 = 5;
    pub const LKL_ILL_PRVREG: u32 = 6;
    pub const LKL_ILL_COPROC: u32 = 7;
    pub const LKL_ILL_BADSTK: u32 = 8;
    pub const LKL_ILL_BADIADDR: u32 = 9;
    pub const __LKL__ILL_BREAK: u32 = 10;
    pub const __LKL__ILL_BNDMOD: u32 = 11;
    pub const LKL_NSIGILL: u32 = 11;
    pub const LKL_FPE_INTDIV: u32 = 1;
    pub const LKL_FPE_INTOVF: u32 = 2;
    pub const LKL_FPE_FLTDIV: u32 = 3;
    pub const LKL_FPE_FLTOVF: u32 = 4;
    pub const LKL_FPE_FLTUND: u32 = 5;
    pub const LKL_FPE_FLTRES: u32 = 6;
    pub const LKL_FPE_FLTINV: u32 = 7;
    pub const LKL_FPE_FLTSUB: u32 = 8;
    pub const __LKL__FPE_DECOVF: u32 = 9;
    pub const __LKL__FPE_DECDIV: u32 = 10;
    pub const __LKL__FPE_DECERR: u32 = 11;
    pub const __LKL__FPE_INVASC: u32 = 12;
    pub const __LKL__FPE_INVDEC: u32 = 13;
    pub const LKL_FPE_FLTUNK: u32 = 14;
    pub const LKL_FPE_CONDTRAP: u32 = 15;
    pub const LKL_NSIGFPE: u32 = 15;
    pub const LKL_SEGV_MAPERR: u32 = 1;
    pub const LKL_SEGV_ACCERR: u32 = 2;
    pub const LKL_SEGV_BNDERR: u32 = 3;
    pub const LKL_SEGV_PKUERR: u32 = 4;
    pub const LKL_SEGV_ACCADI: u32 = 5;
    pub const LKL_SEGV_ADIDERR: u32 = 6;
    pub const LKL_SEGV_ADIPERR: u32 = 7;
    pub const LKL_SEGV_MTEAERR: u32 = 8;
    pub const LKL_SEGV_MTESERR: u32 = 9;
    pub const LKL_NSIGSEGV: u32 = 9;
    pub const LKL_BUS_ADRALN: u32 = 1;
    pub const LKL_BUS_ADRERR: u32 = 2;
    pub const LKL_BUS_OBJERR: u32 = 3;
    pub const LKL_BUS_MCEERR_AR: u32 = 4;
    pub const LKL_BUS_MCEERR_AO: u32 = 5;
    pub const LKL_NSIGBUS: u32 = 5;
    pub const LKL_TRAP_BRKPT: u32 = 1;
    pub const LKL_TRAP_TRACE: u32 = 2;
    pub const LKL_TRAP_BRANCH: u32 = 3;
    pub const LKL_TRAP_HWBKPT: u32 = 4;
    pub const LKL_TRAP_UNK: u32 = 5;
    pub const LKL_NSIGTRAP: u32 = 5;
    pub const LKL_CLD_EXITED: u32 = 1;
    pub const LKL_CLD_KILLED: u32 = 2;
    pub const LKL_CLD_DUMPED: u32 = 3;
    pub const LKL_CLD_TRAPPED: u32 = 4;
    pub const LKL_CLD_STOPPED: u32 = 5;
    pub const LKL_CLD_CONTINUED: u32 = 6;
    pub const LKL_NSIGCHLD: u32 = 6;
    pub const LKL_POLL_IN: u32 = 1;
    pub const LKL_POLL_OUT: u32 = 2;
    pub const LKL_POLL_MSG: u32 = 3;
    pub const LKL_POLL_ERR: u32 = 4;
    pub const LKL_POLL_PRI: u32 = 5;
    pub const LKL_POLL_HUP: u32 = 6;
    pub const LKL_NSIGPOLL: u32 = 6;
    pub const LKL_SYS_SECCOMP: u32 = 1;
    pub const LKL_NSIGSYS: u32 = 1;
    pub const LKL_EMT_TAGOVF: u32 = 1;
    pub const LKL_NSIGEMT: u32 = 1;
    pub const LKL_SIGEV_SIGNAL: u32 = 0;
    pub const LKL_SIGEV_NONE: u32 = 1;
    pub const LKL_SIGEV_THREAD: u32 = 2;
    pub const LKL_SIGEV_THREAD_ID: u32 = 4;
    pub const LKL_SIGEV_MAX_SIZE: u32 = 64;
    pub const LKL_FIOSETOWN: u32 = 35073;
    pub const LKL_SIOCSPGRP: u32 = 35074;
    pub const LKL_FIOGETOWN: u32 = 35075;
    pub const LKL_SIOCGPGRP: u32 = 35076;
    pub const LKL_SIOCATMARK: u32 = 35077;
    pub const LKL_SIOCGSTAMP_OLD: u32 = 35078;
    pub const LKL_SIOCGSTAMPNS_OLD: u32 = 35079;
    pub const LKL_SOL_SOCKET: u32 = 1;
    pub const LKL_SO_DEBUG: u32 = 1;
    pub const LKL_SO_REUSEADDR: u32 = 2;
    pub const LKL_SO_TYPE: u32 = 3;
    pub const LKL_SO_ERROR: u32 = 4;
    pub const LKL_SO_DONTROUTE: u32 = 5;
    pub const LKL_SO_BROADCAST: u32 = 6;
    pub const LKL_SO_SNDBUF: u32 = 7;
    pub const LKL_SO_RCVBUF: u32 = 8;
    pub const LKL_SO_SNDBUFFORCE: u32 = 32;
    pub const LKL_SO_RCVBUFFORCE: u32 = 33;
    pub const LKL_SO_KEEPALIVE: u32 = 9;
    pub const LKL_SO_OOBINLINE: u32 = 10;
    pub const LKL_SO_NO_CHECK: u32 = 11;
    pub const LKL_SO_PRIORITY: u32 = 12;
    pub const LKL_SO_LINGER: u32 = 13;
    pub const LKL_SO_BSDCOMPAT: u32 = 14;
    pub const LKL_SO_REUSEPORT: u32 = 15;
    pub const LKL_SO_PASSCRED: u32 = 16;
    pub const LKL_SO_PEERCRED: u32 = 17;
    pub const LKL_SO_RCVLOWAT: u32 = 18;
    pub const LKL_SO_SNDLOWAT: u32 = 19;
    pub const LKL_SO_RCVTIMEO_OLD: u32 = 20;
    pub const LKL_SO_SNDTIMEO_OLD: u32 = 21;
    pub const LKL_SO_SECURITY_AUTHENTICATION: u32 = 22;
    pub const LKL_SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
    pub const LKL_SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
    pub const LKL_SO_BINDTODEVICE: u32 = 25;
    pub const LKL_SO_ATTACH_FILTER: u32 = 26;
    pub const LKL_SO_DETACH_FILTER: u32 = 27;
    pub const LKL_SO_GET_FILTER: u32 = 26;
    pub const LKL_SO_PEERNAME: u32 = 28;
    pub const LKL_SO_ACCEPTCONN: u32 = 30;
    pub const LKL_SO_PEERSEC: u32 = 31;
    pub const LKL_SO_PASSSEC: u32 = 34;
    pub const LKL_SO_MARK: u32 = 36;
    pub const LKL_SO_PROTOCOL: u32 = 38;
    pub const LKL_SO_DOMAIN: u32 = 39;
    pub const LKL_SO_RXQ_OVFL: u32 = 40;
    pub const LKL_SO_WIFI_STATUS: u32 = 41;
    pub const LKL_SCM_WIFI_STATUS: u32 = 41;
    pub const LKL_SO_PEEK_OFF: u32 = 42;
    pub const LKL_SO_NOFCS: u32 = 43;
    pub const LKL_SO_LOCK_FILTER: u32 = 44;
    pub const LKL_SO_SELECT_ERR_QUEUE: u32 = 45;
    pub const LKL_SO_BUSY_POLL: u32 = 46;
    pub const LKL_SO_MAX_PACING_RATE: u32 = 47;
    pub const LKL_SO_BPF_EXTENSIONS: u32 = 48;
    pub const LKL_SO_INCOMING_CPU: u32 = 49;
    pub const LKL_SO_ATTACH_BPF: u32 = 50;
    pub const LKL_SO_DETACH_BPF: u32 = 27;
    pub const LKL_SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
    pub const LKL_SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
    pub const LKL_SO_CNX_ADVICE: u32 = 53;
    pub const LKL_SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
    pub const LKL_SO_MEMINFO: u32 = 55;
    pub const LKL_SO_INCOMING_NAPI_ID: u32 = 56;
    pub const LKL_SO_COOKIE: u32 = 57;
    pub const LKL_SCM_TIMESTAMPING_PKTINFO: u32 = 58;
    pub const LKL_SO_PEERGROUPS: u32 = 59;
    pub const LKL_SO_ZEROCOPY: u32 = 60;
    pub const LKL_SO_TXTIME: u32 = 61;
    pub const LKL_SCM_TXTIME: u32 = 61;
    pub const LKL_SO_BINDTOIFINDEX: u32 = 62;
    pub const LKL_SO_TIMESTAMP_OLD: u32 = 29;
    pub const LKL_SO_TIMESTAMPNS_OLD: u32 = 35;
    pub const LKL_SO_TIMESTAMPING_OLD: u32 = 37;
    pub const LKL_SO_TIMESTAMP_NEW: u32 = 63;
    pub const LKL_SO_TIMESTAMPNS_NEW: u32 = 64;
    pub const LKL_SO_TIMESTAMPING_NEW: u32 = 65;
    pub const LKL_SO_RCVTIMEO_NEW: u32 = 66;
    pub const LKL_SO_SNDTIMEO_NEW: u32 = 67;
    pub const LKL_SO_DETACH_REUSEPORT_BPF: u32 = 68;
    pub const LKL_SO_TIMESTAMP: u32 = 29;
    pub const LKL_SO_TIMESTAMPNS: u32 = 35;
    pub const LKL_SO_TIMESTAMPING: u32 = 37;
    pub const LKL_SO_RCVTIMEO: u32 = 20;
    pub const LKL_SO_SNDTIMEO: u32 = 21;
    pub const LKL_SCM_TIMESTAMP: u32 = 29;
    pub const LKL_SCM_TIMESTAMPNS: u32 = 35;
    pub const LKL_SCM_TIMESTAMPING: u32 = 37;
    pub const LKL_ICMP_ECHOREPLY: u32 = 0;
    pub const LKL_ICMP_DEST_UNREACH: u32 = 3;
    pub const LKL_ICMP_SOURCE_QUENCH: u32 = 4;
    pub const LKL_ICMP_REDIRECT: u32 = 5;
    pub const LKL_ICMP_ECHO: u32 = 8;
    pub const LKL_ICMP_TIME_EXCEEDED: u32 = 11;
    pub const LKL_ICMP_PARAMETERPROB: u32 = 12;
    pub const LKL_ICMP_TIMESTAMP: u32 = 13;
    pub const LKL_ICMP_TIMESTAMPREPLY: u32 = 14;
    pub const LKL_ICMP_INFO_REQUEST: u32 = 15;
    pub const LKL_ICMP_INFO_REPLY: u32 = 16;
    pub const LKL_ICMP_ADDRESS: u32 = 17;
    pub const LKL_ICMP_ADDRESSREPLY: u32 = 18;
    pub const LKL_NR_ICMP_TYPES: u32 = 18;
    pub const LKL_ICMP_NET_UNREACH: u32 = 0;
    pub const LKL_ICMP_HOST_UNREACH: u32 = 1;
    pub const LKL_ICMP_PROT_UNREACH: u32 = 2;
    pub const LKL_ICMP_PORT_UNREACH: u32 = 3;
    pub const LKL_ICMP_FRAG_NEEDED: u32 = 4;
    pub const LKL_ICMP_SR_FAILED: u32 = 5;
    pub const LKL_ICMP_NET_UNKNOWN: u32 = 6;
    pub const LKL_ICMP_HOST_UNKNOWN: u32 = 7;
    pub const LKL_ICMP_HOST_ISOLATED: u32 = 8;
    pub const LKL_ICMP_NET_ANO: u32 = 9;
    pub const LKL_ICMP_HOST_ANO: u32 = 10;
    pub const LKL_ICMP_NET_UNR_TOS: u32 = 11;
    pub const LKL_ICMP_HOST_UNR_TOS: u32 = 12;
    pub const LKL_ICMP_PKT_FILTERED: u32 = 13;
    pub const LKL_ICMP_PREC_VIOLATION: u32 = 14;
    pub const LKL_ICMP_PREC_CUTOFF: u32 = 15;
    pub const LKL_NR_ICMP_UNREACH: u32 = 15;
    pub const LKL_ICMP_REDIR_NET: u32 = 0;
    pub const LKL_ICMP_REDIR_HOST: u32 = 1;
    pub const LKL_ICMP_REDIR_NETTOS: u32 = 2;
    pub const LKL_ICMP_REDIR_HOSTTOS: u32 = 3;
    pub const LKL_ICMP_EXC_TTL: u32 = 0;
    pub const LKL_ICMP_EXC_FRAGTIME: u32 = 1;
    pub const LKL_ICMP_FILTER: u32 = 1;
    pub const LKL_IPTOS_TOS_MASK: u32 = 30;
    pub const LKL_IPTOS_LOWDELAY: u32 = 16;
    pub const LKL_IPTOS_THROUGHPUT: u32 = 8;
    pub const LKL_IPTOS_RELIABILITY: u32 = 4;
    pub const LKL_IPTOS_MINCOST: u32 = 2;
    pub const LKL_IPTOS_PREC_MASK: u32 = 224;
    pub const LKL_IPTOS_PREC_NETCONTROL: u32 = 224;
    pub const LKL_IPTOS_PREC_INTERNETCONTROL: u32 = 192;
    pub const LKL_IPTOS_PREC_CRITIC_ECP: u32 = 160;
    pub const LKL_IPTOS_PREC_FLASHOVERRIDE: u32 = 128;
    pub const LKL_IPTOS_PREC_FLASH: u32 = 96;
    pub const LKL_IPTOS_PREC_IMMEDIATE: u32 = 64;
    pub const LKL_IPTOS_PREC_PRIORITY: u32 = 32;
    pub const LKL_IPTOS_PREC_ROUTINE: u32 = 0;
    pub const LKL_IPOPT_COPY: u32 = 128;
    pub const LKL_IPOPT_CLASS_MASK: u32 = 96;
    pub const LKL_IPOPT_NUMBER_MASK: u32 = 31;
    pub const LKL_IPOPT_CONTROL: u32 = 0;
    pub const LKL_IPOPT_RESERVED1: u32 = 32;
    pub const LKL_IPOPT_MEASUREMENT: u32 = 64;
    pub const LKL_IPOPT_RESERVED2: u32 = 96;
    pub const LKL_IPOPT_END: u32 = 0;
    pub const LKL_IPOPT_NOOP: u32 = 1;
    pub const LKL_IPOPT_SEC: u32 = 130;
    pub const LKL_IPOPT_LSRR: u32 = 131;
    pub const LKL_IPOPT_TIMESTAMP: u32 = 68;
    pub const LKL_IPOPT_CIPSO: u32 = 134;
    pub const LKL_IPOPT_RR: u32 = 7;
    pub const LKL_IPOPT_SID: u32 = 136;
    pub const LKL_IPOPT_SSRR: u32 = 137;
    pub const LKL_IPOPT_RA: u32 = 148;
    pub const LKL_IPVERSION: u32 = 4;
    pub const LKL_MAXTTL: u32 = 255;
    pub const LKL_IPDEFTTL: u32 = 64;
    pub const LKL_IPOPT_OPTVAL: u32 = 0;
    pub const LKL_IPOPT_OLEN: u32 = 1;
    pub const LKL_IPOPT_OFFSET: u32 = 2;
    pub const LKL_IPOPT_MINOFF: u32 = 4;
    pub const LKL_MAX_IPOPTLEN: u32 = 40;
    pub const LKL_IPOPT_NOP: u32 = 1;
    pub const LKL_IPOPT_EOL: u32 = 0;
    pub const LKL_IPOPT_TS: u32 = 68;
    pub const LKL_IPOPT_TS_TSONLY: u32 = 0;
    pub const LKL_IPOPT_TS_TSANDADDR: u32 = 1;
    pub const LKL_IPOPT_TS_PRESPEC: u32 = 3;
    pub const LKL_IPV4_BEET_PHMAXLEN: u32 = 8;
    pub const __LKL__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO: u32 = 1;
    pub const __LKL__UAPI_DEF_IF_IFNAMSIZ: u32 = 1;
    pub const __LKL__UAPI_DEF_IF_NET_DEVICE_FLAGS: u32 = 1;
    pub const __LKL__UAPI_DEF_IF_IFREQ: u32 = 1;
    pub const __LKL__UAPI_DEF_IF_IFMAP: u32 = 1;
    pub const _SYS_SOCKET_H: u32 = 1;
    pub const __iovec_defined: u32 = 1;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const _BITS_ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const _BITS_ENDIANNESS_H: u32 = 1;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __FD_ZERO_STOS: &[u8; 6usize] = b"stosq\0";
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const PF_UNSPEC: u32 = 0;
    pub const PF_LOCAL: u32 = 1;
    pub const PF_UNIX: u32 = 1;
    pub const PF_FILE: u32 = 1;
    pub const PF_INET: u32 = 2;
    pub const PF_AX25: u32 = 3;
    pub const PF_IPX: u32 = 4;
    pub const PF_APPLETALK: u32 = 5;
    pub const PF_NETROM: u32 = 6;
    pub const PF_BRIDGE: u32 = 7;
    pub const PF_ATMPVC: u32 = 8;
    pub const PF_X25: u32 = 9;
    pub const PF_INET6: u32 = 10;
    pub const PF_ROSE: u32 = 11;
    pub const PF_DECnet: u32 = 12;
    pub const PF_NETBEUI: u32 = 13;
    pub const PF_SECURITY: u32 = 14;
    pub const PF_KEY: u32 = 15;
    pub const PF_NETLINK: u32 = 16;
    pub const PF_ROUTE: u32 = 16;
    pub const PF_PACKET: u32 = 17;
    pub const PF_ASH: u32 = 18;
    pub const PF_ECONET: u32 = 19;
    pub const PF_ATMSVC: u32 = 20;
    pub const PF_RDS: u32 = 21;
    pub const PF_SNA: u32 = 22;
    pub const PF_IRDA: u32 = 23;
    pub const PF_PPPOX: u32 = 24;
    pub const PF_WANPIPE: u32 = 25;
    pub const PF_LLC: u32 = 26;
    pub const PF_IB: u32 = 27;
    pub const PF_MPLS: u32 = 28;
    pub const PF_CAN: u32 = 29;
    pub const PF_TIPC: u32 = 30;
    pub const PF_BLUETOOTH: u32 = 31;
    pub const PF_IUCV: u32 = 32;
    pub const PF_RXRPC: u32 = 33;
    pub const PF_ISDN: u32 = 34;
    pub const PF_PHONET: u32 = 35;
    pub const PF_IEEE802154: u32 = 36;
    pub const PF_CAIF: u32 = 37;
    pub const PF_ALG: u32 = 38;
    pub const PF_NFC: u32 = 39;
    pub const PF_VSOCK: u32 = 40;
    pub const PF_KCM: u32 = 41;
    pub const PF_QIPCRTR: u32 = 42;
    pub const PF_SMC: u32 = 43;
    pub const PF_XDP: u32 = 44;
    pub const PF_MAX: u32 = 45;
    pub const AF_UNSPEC: u32 = 0;
    pub const AF_LOCAL: u32 = 1;
    pub const AF_UNIX: u32 = 1;
    pub const AF_FILE: u32 = 1;
    pub const AF_INET: u32 = 2;
    pub const AF_AX25: u32 = 3;
    pub const AF_IPX: u32 = 4;
    pub const AF_APPLETALK: u32 = 5;
    pub const AF_NETROM: u32 = 6;
    pub const AF_BRIDGE: u32 = 7;
    pub const AF_ATMPVC: u32 = 8;
    pub const AF_X25: u32 = 9;
    pub const AF_INET6: u32 = 10;
    pub const AF_ROSE: u32 = 11;
    pub const AF_DECnet: u32 = 12;
    pub const AF_NETBEUI: u32 = 13;
    pub const AF_SECURITY: u32 = 14;
    pub const AF_KEY: u32 = 15;
    pub const AF_NETLINK: u32 = 16;
    pub const AF_ROUTE: u32 = 16;
    pub const AF_PACKET: u32 = 17;
    pub const AF_ASH: u32 = 18;
    pub const AF_ECONET: u32 = 19;
    pub const AF_ATMSVC: u32 = 20;
    pub const AF_RDS: u32 = 21;
    pub const AF_SNA: u32 = 22;
    pub const AF_IRDA: u32 = 23;
    pub const AF_PPPOX: u32 = 24;
    pub const AF_WANPIPE: u32 = 25;
    pub const AF_LLC: u32 = 26;
    pub const AF_IB: u32 = 27;
    pub const AF_MPLS: u32 = 28;
    pub const AF_CAN: u32 = 29;
    pub const AF_TIPC: u32 = 30;
    pub const AF_BLUETOOTH: u32 = 31;
    pub const AF_IUCV: u32 = 32;
    pub const AF_RXRPC: u32 = 33;
    pub const AF_ISDN: u32 = 34;
    pub const AF_PHONET: u32 = 35;
    pub const AF_IEEE802154: u32 = 36;
    pub const AF_CAIF: u32 = 37;
    pub const AF_ALG: u32 = 38;
    pub const AF_NFC: u32 = 39;
    pub const AF_VSOCK: u32 = 40;
    pub const AF_KCM: u32 = 41;
    pub const AF_QIPCRTR: u32 = 42;
    pub const AF_SMC: u32 = 43;
    pub const AF_XDP: u32 = 44;
    pub const AF_MAX: u32 = 45;
    pub const SOL_RAW: u32 = 255;
    pub const SOL_DECNET: u32 = 261;
    pub const SOL_X25: u32 = 262;
    pub const SOL_PACKET: u32 = 263;
    pub const SOL_ATM: u32 = 264;
    pub const SOL_AAL: u32 = 265;
    pub const SOL_IRDA: u32 = 266;
    pub const SOL_NETBEUI: u32 = 267;
    pub const SOL_LLC: u32 = 268;
    pub const SOL_DCCP: u32 = 269;
    pub const SOL_NETLINK: u32 = 270;
    pub const SOL_TIPC: u32 = 271;
    pub const SOL_RXRPC: u32 = 272;
    pub const SOL_PPPOL2TP: u32 = 273;
    pub const SOL_BLUETOOTH: u32 = 274;
    pub const SOL_PNPIPE: u32 = 275;
    pub const SOL_RDS: u32 = 276;
    pub const SOL_IUCV: u32 = 277;
    pub const SOL_CAIF: u32 = 278;
    pub const SOL_ALG: u32 = 279;
    pub const SOL_NFC: u32 = 280;
    pub const SOL_KCM: u32 = 281;
    pub const SOL_TLS: u32 = 282;
    pub const SOL_XDP: u32 = 283;
    pub const SOMAXCONN: u32 = 4096;
    pub const _BITS_SOCKADDR_H: u32 = 1;
    pub const _SS_SIZE: u32 = 128;
    pub const __BITS_PER_LONG: u32 = 64;
    pub const FIOSETOWN: u32 = 35073;
    pub const SIOCSPGRP: u32 = 35074;
    pub const FIOGETOWN: u32 = 35075;
    pub const SIOCGPGRP: u32 = 35076;
    pub const SIOCATMARK: u32 = 35077;
    pub const SIOCGSTAMP_OLD: u32 = 35078;
    pub const SIOCGSTAMPNS_OLD: u32 = 35079;
    pub const SOL_SOCKET: u32 = 1;
    pub const SO_DEBUG: u32 = 1;
    pub const SO_REUSEADDR: u32 = 2;
    pub const SO_TYPE: u32 = 3;
    pub const SO_ERROR: u32 = 4;
    pub const SO_DONTROUTE: u32 = 5;
    pub const SO_BROADCAST: u32 = 6;
    pub const SO_SNDBUF: u32 = 7;
    pub const SO_RCVBUF: u32 = 8;
    pub const SO_SNDBUFFORCE: u32 = 32;
    pub const SO_RCVBUFFORCE: u32 = 33;
    pub const SO_KEEPALIVE: u32 = 9;
    pub const SO_OOBINLINE: u32 = 10;
    pub const SO_NO_CHECK: u32 = 11;
    pub const SO_PRIORITY: u32 = 12;
    pub const SO_LINGER: u32 = 13;
    pub const SO_BSDCOMPAT: u32 = 14;
    pub const SO_REUSEPORT: u32 = 15;
    pub const SO_PASSCRED: u32 = 16;
    pub const SO_PEERCRED: u32 = 17;
    pub const SO_RCVLOWAT: u32 = 18;
    pub const SO_SNDLOWAT: u32 = 19;
    pub const SO_RCVTIMEO_OLD: u32 = 20;
    pub const SO_SNDTIMEO_OLD: u32 = 21;
    pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
    pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
    pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
    pub const SO_BINDTODEVICE: u32 = 25;
    pub const SO_ATTACH_FILTER: u32 = 26;
    pub const SO_DETACH_FILTER: u32 = 27;
    pub const SO_GET_FILTER: u32 = 26;
    pub const SO_PEERNAME: u32 = 28;
    pub const SO_ACCEPTCONN: u32 = 30;
    pub const SO_PEERSEC: u32 = 31;
    pub const SO_PASSSEC: u32 = 34;
    pub const SO_MARK: u32 = 36;
    pub const SO_PROTOCOL: u32 = 38;
    pub const SO_DOMAIN: u32 = 39;
    pub const SO_RXQ_OVFL: u32 = 40;
    pub const SO_WIFI_STATUS: u32 = 41;
    pub const SCM_WIFI_STATUS: u32 = 41;
    pub const SO_PEEK_OFF: u32 = 42;
    pub const SO_NOFCS: u32 = 43;
    pub const SO_LOCK_FILTER: u32 = 44;
    pub const SO_SELECT_ERR_QUEUE: u32 = 45;
    pub const SO_BUSY_POLL: u32 = 46;
    pub const SO_MAX_PACING_RATE: u32 = 47;
    pub const SO_BPF_EXTENSIONS: u32 = 48;
    pub const SO_INCOMING_CPU: u32 = 49;
    pub const SO_ATTACH_BPF: u32 = 50;
    pub const SO_DETACH_BPF: u32 = 27;
    pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
    pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
    pub const SO_CNX_ADVICE: u32 = 53;
    pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
    pub const SO_MEMINFO: u32 = 55;
    pub const SO_INCOMING_NAPI_ID: u32 = 56;
    pub const SO_COOKIE: u32 = 57;
    pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
    pub const SO_PEERGROUPS: u32 = 59;
    pub const SO_ZEROCOPY: u32 = 60;
    pub const SO_TXTIME: u32 = 61;
    pub const SCM_TXTIME: u32 = 61;
    pub const SO_BINDTOIFINDEX: u32 = 62;
    pub const SO_TIMESTAMP_OLD: u32 = 29;
    pub const SO_TIMESTAMPNS_OLD: u32 = 35;
    pub const SO_TIMESTAMPING_OLD: u32 = 37;
    pub const SO_TIMESTAMP_NEW: u32 = 63;
    pub const SO_TIMESTAMPNS_NEW: u32 = 64;
    pub const SO_TIMESTAMPING_NEW: u32 = 65;
    pub const SO_RCVTIMEO_NEW: u32 = 66;
    pub const SO_SNDTIMEO_NEW: u32 = 67;
    pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
    pub const SO_TIMESTAMP: u32 = 29;
    pub const SO_TIMESTAMPNS: u32 = 35;
    pub const SO_TIMESTAMPING: u32 = 37;
    pub const SO_RCVTIMEO: u32 = 20;
    pub const SO_SNDTIMEO: u32 = 21;
    pub const SCM_TIMESTAMP: u32 = 29;
    pub const SCM_TIMESTAMPNS: u32 = 35;
    pub const SCM_TIMESTAMPING: u32 = 37;
    pub const __osockaddr_defined: u32 = 1;
    pub const LKL_IFNAMSIZ: u32 = 16;
    pub const LKL_IFALIASZ: u32 = 256;
    pub const LKL_ALTIFNAMSIZ: u32 = 128;
    pub const LKL_GENERIC_HDLC_VERSION: u32 = 4;
    pub const LKL_CLOCK_DEFAULT: u32 = 0;
    pub const LKL_CLOCK_EXT: u32 = 1;
    pub const LKL_CLOCK_INT: u32 = 2;
    pub const LKL_CLOCK_TXINT: u32 = 3;
    pub const LKL_CLOCK_TXFROMRX: u32 = 4;
    pub const LKL_ENCODING_DEFAULT: u32 = 0;
    pub const LKL_ENCODING_NRZ: u32 = 1;
    pub const LKL_ENCODING_NRZI: u32 = 2;
    pub const LKL_ENCODING_FM_MARK: u32 = 3;
    pub const LKL_ENCODING_FM_SPACE: u32 = 4;
    pub const LKL_ENCODING_MANCHESTER: u32 = 5;
    pub const LKL_PARITY_DEFAULT: u32 = 0;
    pub const LKL_PARITY_NONE: u32 = 1;
    pub const LKL_PARITY_CRC16_PR0: u32 = 2;
    pub const LKL_PARITY_CRC16_PR1: u32 = 3;
    pub const LKL_PARITY_CRC16_PR0_CCITT: u32 = 4;
    pub const LKL_PARITY_CRC16_PR1_CCITT: u32 = 5;
    pub const LKL_PARITY_CRC32_PR0_CCITT: u32 = 6;
    pub const LKL_PARITY_CRC32_PR1_CCITT: u32 = 7;
    pub const LKL_LMI_DEFAULT: u32 = 0;
    pub const LKL_LMI_NONE: u32 = 1;
    pub const LKL_LMI_ANSI: u32 = 2;
    pub const LKL_LMI_CCITT: u32 = 3;
    pub const LKL_LMI_CISCO: u32 = 4;
    pub const LKL_IF_GET_IFACE: u32 = 1;
    pub const LKL_IF_GET_PROTO: u32 = 2;
    pub const LKL_IF_IFACE_V35: u32 = 4096;
    pub const LKL_IF_IFACE_V24: u32 = 4097;
    pub const LKL_IF_IFACE_X21: u32 = 4098;
    pub const LKL_IF_IFACE_T1: u32 = 4099;
    pub const LKL_IF_IFACE_E1: u32 = 4100;
    pub const LKL_IF_IFACE_SYNC_SERIAL: u32 = 4101;
    pub const LKL_IF_IFACE_X21D: u32 = 4102;
    pub const LKL_IF_PROTO_HDLC: u32 = 8192;
    pub const LKL_IF_PROTO_PPP: u32 = 8193;
    pub const LKL_IF_PROTO_CISCO: u32 = 8194;
    pub const LKL_IF_PROTO_FR: u32 = 8195;
    pub const LKL_IF_PROTO_FR_ADD_PVC: u32 = 8196;
    pub const LKL_IF_PROTO_FR_DEL_PVC: u32 = 8197;
    pub const LKL_IF_PROTO_X25: u32 = 8198;
    pub const LKL_IF_PROTO_HDLC_ETH: u32 = 8199;
    pub const LKL_IF_PROTO_FR_ADD_ETH_PVC: u32 = 8200;
    pub const LKL_IF_PROTO_FR_DEL_ETH_PVC: u32 = 8201;
    pub const LKL_IF_PROTO_FR_PVC: u32 = 8202;
    pub const LKL_IF_PROTO_FR_ETH_PVC: u32 = 8203;
    pub const LKL_IF_PROTO_RAW: u32 = 8204;
    pub const LKL_IFHWADDRLEN: u32 = 6;
    pub const __LKL__UAPI_DEF_IN_IPPROTO: u32 = 1;
    pub const __LKL__UAPI_DEF_IN_ADDR: u32 = 1;
    pub const __LKL__UAPI_DEF_IN6_ADDR: u32 = 1;
    pub const __LKL__UAPI_DEF_IP_MREQ: u32 = 1;
    pub const __LKL__UAPI_DEF_IN_PKTINFO: u32 = 1;
    pub const __LKL__UAPI_DEF_SOCKADDR_IN: u32 = 1;
    pub const __LKL__UAPI_DEF_IN_CLASS: u32 = 1;
    pub const LKL_IP_TOS: u32 = 1;
    pub const LKL_IP_TTL: u32 = 2;
    pub const LKL_IP_HDRINCL: u32 = 3;
    pub const LKL_IP_OPTIONS: u32 = 4;
    pub const LKL_IP_ROUTER_ALERT: u32 = 5;
    pub const LKL_IP_RECVOPTS: u32 = 6;
    pub const LKL_IP_RETOPTS: u32 = 7;
    pub const LKL_IP_PKTINFO: u32 = 8;
    pub const LKL_IP_PKTOPTIONS: u32 = 9;
    pub const LKL_IP_MTU_DISCOVER: u32 = 10;
    pub const LKL_IP_RECVERR: u32 = 11;
    pub const LKL_IP_RECVTTL: u32 = 12;
    pub const LKL_IP_RECVTOS: u32 = 13;
    pub const LKL_IP_MTU: u32 = 14;
    pub const LKL_IP_FREEBIND: u32 = 15;
    pub const LKL_IP_IPSEC_POLICY: u32 = 16;
    pub const LKL_IP_XFRM_POLICY: u32 = 17;
    pub const LKL_IP_PASSSEC: u32 = 18;
    pub const LKL_IP_TRANSPARENT: u32 = 19;
    pub const LKL_IP_RECVRETOPTS: u32 = 7;
    pub const LKL_IP_ORIGDSTADDR: u32 = 20;
    pub const LKL_IP_RECVORIGDSTADDR: u32 = 20;
    pub const LKL_IP_MINTTL: u32 = 21;
    pub const LKL_IP_NODEFRAG: u32 = 22;
    pub const LKL_IP_CHECKSUM: u32 = 23;
    pub const LKL_IP_BIND_ADDRESS_NO_PORT: u32 = 24;
    pub const LKL_IP_RECVFRAGSIZE: u32 = 25;
    pub const LKL_IP_RECVERR_RFC4884: u32 = 26;
    pub const LKL_IP_PMTUDISC_DONT: u32 = 0;
    pub const LKL_IP_PMTUDISC_WANT: u32 = 1;
    pub const LKL_IP_PMTUDISC_DO: u32 = 2;
    pub const LKL_IP_PMTUDISC_PROBE: u32 = 3;
    pub const LKL_IP_PMTUDISC_INTERFACE: u32 = 4;
    pub const LKL_IP_PMTUDISC_OMIT: u32 = 5;
    pub const LKL_IP_MULTICAST_IF: u32 = 32;
    pub const LKL_IP_MULTICAST_TTL: u32 = 33;
    pub const LKL_IP_MULTICAST_LOOP: u32 = 34;
    pub const LKL_IP_ADD_MEMBERSHIP: u32 = 35;
    pub const LKL_IP_DROP_MEMBERSHIP: u32 = 36;
    pub const LKL_IP_UNBLOCK_SOURCE: u32 = 37;
    pub const LKL_IP_BLOCK_SOURCE: u32 = 38;
    pub const LKL_IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
    pub const LKL_IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
    pub const LKL_IP_MSFILTER: u32 = 41;
    pub const LKL_MCAST_JOIN_GROUP: u32 = 42;
    pub const LKL_MCAST_BLOCK_SOURCE: u32 = 43;
    pub const LKL_MCAST_UNBLOCK_SOURCE: u32 = 44;
    pub const LKL_MCAST_LEAVE_GROUP: u32 = 45;
    pub const LKL_MCAST_JOIN_SOURCE_GROUP: u32 = 46;
    pub const LKL_MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
    pub const LKL_MCAST_MSFILTER: u32 = 48;
    pub const LKL_IP_MULTICAST_ALL: u32 = 49;
    pub const LKL_IP_UNICAST_IF: u32 = 50;
    pub const LKL_MCAST_EXCLUDE: u32 = 0;
    pub const LKL_MCAST_INCLUDE: u32 = 1;
    pub const LKL_IP_DEFAULT_MULTICAST_TTL: u32 = 1;
    pub const LKL_IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
    pub const __LKL__SOCK_SIZE__: u32 = 16;
    pub const LKL_IN_CLASSA_NET: u32 = 4278190080;
    pub const LKL_IN_CLASSA_NSHIFT: u32 = 24;
    pub const LKL_IN_CLASSA_HOST: u32 = 16777215;
    pub const LKL_IN_CLASSA_MAX: u32 = 128;
    pub const LKL_IN_CLASSB_NET: u32 = 4294901760;
    pub const LKL_IN_CLASSB_NSHIFT: u32 = 16;
    pub const LKL_IN_CLASSB_HOST: u32 = 65535;
    pub const LKL_IN_CLASSB_MAX: u32 = 65536;
    pub const LKL_IN_CLASSC_NET: u32 = 4294967040;
    pub const LKL_IN_CLASSC_NSHIFT: u32 = 8;
    pub const LKL_IN_CLASSC_HOST: u32 = 255;
    pub const LKL_IN_MULTICAST_NET: u32 = 3758096384;
    pub const LKL_IN_CLASSE_NET: u32 = 4294967295;
    pub const LKL_IN_CLASSE_NSHIFT: u32 = 0;
    pub const LKL_IN_LOOPBACKNET: u32 = 127;
    pub const LKL_INADDR_LOOPBACK: u32 = 2130706433;
    pub const LKL_INADDR_UNSPEC_GROUP: u32 = 3758096384;
    pub const LKL_INADDR_ALLHOSTS_GROUP: u32 = 3758096385;
    pub const LKL_INADDR_ALLRTRS_GROUP: u32 = 3758096386;
    pub const LKL_INADDR_ALLSNOOPERS_GROUP: u32 = 3758096490;
    pub const LKL_INADDR_MAX_LOCAL_GROUP: u32 = 3758096639;
    pub const LKL_IPV6_FL_A_GET: u32 = 0;
    pub const LKL_IPV6_FL_A_PUT: u32 = 1;
    pub const LKL_IPV6_FL_A_RENEW: u32 = 2;
    pub const LKL_IPV6_FL_F_CREATE: u32 = 1;
    pub const LKL_IPV6_FL_F_EXCL: u32 = 2;
    pub const LKL_IPV6_FL_F_REFLECT: u32 = 4;
    pub const LKL_IPV6_FL_F_REMOTE: u32 = 8;
    pub const LKL_IPV6_FL_S_NONE: u32 = 0;
    pub const LKL_IPV6_FL_S_EXCL: u32 = 1;
    pub const LKL_IPV6_FL_S_PROCESS: u32 = 2;
    pub const LKL_IPV6_FL_S_USER: u32 = 3;
    pub const LKL_IPV6_FL_S_ANY: u32 = 255;
    pub const LKL_IPV6_FLOWINFO_FLOWLABEL: u32 = 1048575;
    pub const LKL_IPV6_FLOWINFO_PRIORITY: u32 = 267386880;
    pub const LKL_IPV6_PRIORITY_UNCHARACTERIZED: u32 = 0;
    pub const LKL_IPV6_PRIORITY_FILLER: u32 = 256;
    pub const LKL_IPV6_PRIORITY_UNATTENDED: u32 = 512;
    pub const LKL_IPV6_PRIORITY_RESERVED1: u32 = 768;
    pub const LKL_IPV6_PRIORITY_BULK: u32 = 1024;
    pub const LKL_IPV6_PRIORITY_RESERVED2: u32 = 1280;
    pub const LKL_IPV6_PRIORITY_INTERACTIVE: u32 = 1536;
    pub const LKL_IPV6_PRIORITY_CONTROL: u32 = 1792;
    pub const LKL_IPV6_PRIORITY_8: u32 = 2048;
    pub const LKL_IPV6_PRIORITY_9: u32 = 2304;
    pub const LKL_IPV6_PRIORITY_10: u32 = 2560;
    pub const LKL_IPV6_PRIORITY_11: u32 = 2816;
    pub const LKL_IPV6_PRIORITY_12: u32 = 3072;
    pub const LKL_IPV6_PRIORITY_13: u32 = 3328;
    pub const LKL_IPV6_PRIORITY_14: u32 = 3584;
    pub const LKL_IPV6_PRIORITY_15: u32 = 3840;
    pub const LKL_IPV6_TLV_PAD1: u32 = 0;
    pub const LKL_IPV6_TLV_PADN: u32 = 1;
    pub const LKL_IPV6_TLV_ROUTERALERT: u32 = 5;
    pub const LKL_IPV6_TLV_CALIPSO: u32 = 7;
    pub const LKL_IPV6_TLV_JUMBO: u32 = 194;
    pub const LKL_IPV6_TLV_HAO: u32 = 201;
    pub const LKL_IPV6_RECVPKTINFO: u32 = 49;
    pub const LKL_IPV6_PKTINFO: u32 = 50;
    pub const LKL_IPV6_RECVHOPLIMIT: u32 = 51;
    pub const LKL_IPV6_HOPLIMIT: u32 = 52;
    pub const LKL_IPV6_RECVHOPOPTS: u32 = 53;
    pub const LKL_IPV6_HOPOPTS: u32 = 54;
    pub const LKL_IPV6_RTHDRDSTOPTS: u32 = 55;
    pub const LKL_IPV6_RECVRTHDR: u32 = 56;
    pub const LKL_IPV6_RTHDR: u32 = 57;
    pub const LKL_IPV6_RECVDSTOPTS: u32 = 58;
    pub const LKL_IPV6_DSTOPTS: u32 = 59;
    pub const LKL_IPV6_RECVPATHMTU: u32 = 60;
    pub const LKL_IPV6_PATHMTU: u32 = 61;
    pub const LKL_IPV6_DONTFRAG: u32 = 62;
    pub const LKL_IPV6_RECVTCLASS: u32 = 66;
    pub const LKL_IPV6_TCLASS: u32 = 67;
    pub const LKL_IPV6_AUTOFLOWLABEL: u32 = 70;
    pub const LKL_IPV6_ADDR_PREFERENCES: u32 = 72;
    pub const LKL_IPV6_PREFER_SRC_TMP: u32 = 1;
    pub const LKL_IPV6_PREFER_SRC_PUBLIC: u32 = 2;
    pub const LKL_IPV6_PREFER_SRC_PUBTMP_DEFAULT: u32 = 256;
    pub const LKL_IPV6_PREFER_SRC_COA: u32 = 4;
    pub const LKL_IPV6_PREFER_SRC_HOME: u32 = 1024;
    pub const LKL_IPV6_PREFER_SRC_CGA: u32 = 8;
    pub const LKL_IPV6_PREFER_SRC_NONCGA: u32 = 2048;
    pub const LKL_IPV6_MINHOPCOUNT: u32 = 73;
    pub const LKL_IPV6_ORIGDSTADDR: u32 = 74;
    pub const LKL_IPV6_RECVORIGDSTADDR: u32 = 74;
    pub const LKL_IPV6_TRANSPARENT: u32 = 75;
    pub const LKL_IPV6_UNICAST_IF: u32 = 76;
    pub const LKL_IPV6_RECVFRAGSIZE: u32 = 77;
    pub const LKL_IPV6_FREEBIND: u32 = 78;
    pub const LKL_SOCK_IOC_TYPE: u32 = 137;
    pub const LKL_SIOCGSTAMP: u32 = 35078;
    pub const LKL_SIOCGSTAMPNS: u32 = 35079;
    pub const LKL_SIOCADDRT: u32 = 35083;
    pub const LKL_SIOCDELRT: u32 = 35084;
    pub const LKL_SIOCRTMSG: u32 = 35085;
    pub const LKL_SIOCGIFNAME: u32 = 35088;
    pub const LKL_SIOCSIFLINK: u32 = 35089;
    pub const LKL_SIOCGIFCONF: u32 = 35090;
    pub const LKL_SIOCGIFFLAGS: u32 = 35091;
    pub const LKL_SIOCSIFFLAGS: u32 = 35092;
    pub const LKL_SIOCGIFADDR: u32 = 35093;
    pub const LKL_SIOCSIFADDR: u32 = 35094;
    pub const LKL_SIOCGIFDSTADDR: u32 = 35095;
    pub const LKL_SIOCSIFDSTADDR: u32 = 35096;
    pub const LKL_SIOCGIFBRDADDR: u32 = 35097;
    pub const LKL_SIOCSIFBRDADDR: u32 = 35098;
    pub const LKL_SIOCGIFNETMASK: u32 = 35099;
    pub const LKL_SIOCSIFNETMASK: u32 = 35100;
    pub const LKL_SIOCGIFMETRIC: u32 = 35101;
    pub const LKL_SIOCSIFMETRIC: u32 = 35102;
    pub const LKL_SIOCGIFMEM: u32 = 35103;
    pub const LKL_SIOCSIFMEM: u32 = 35104;
    pub const LKL_SIOCGIFMTU: u32 = 35105;
    pub const LKL_SIOCSIFMTU: u32 = 35106;
    pub const LKL_SIOCSIFNAME: u32 = 35107;
    pub const LKL_SIOCSIFHWADDR: u32 = 35108;
    pub const LKL_SIOCGIFENCAP: u32 = 35109;
    pub const LKL_SIOCSIFENCAP: u32 = 35110;
    pub const LKL_SIOCGIFHWADDR: u32 = 35111;
    pub const LKL_SIOCGIFSLAVE: u32 = 35113;
    pub const LKL_SIOCSIFSLAVE: u32 = 35120;
    pub const LKL_SIOCADDMULTI: u32 = 35121;
    pub const LKL_SIOCDELMULTI: u32 = 35122;
    pub const LKL_SIOCGIFINDEX: u32 = 35123;
    pub const LKL_SIOGIFINDEX: u32 = 35123;
    pub const LKL_SIOCSIFPFLAGS: u32 = 35124;
    pub const LKL_SIOCGIFPFLAGS: u32 = 35125;
    pub const LKL_SIOCDIFADDR: u32 = 35126;
    pub const LKL_SIOCSIFHWBROADCAST: u32 = 35127;
    pub const LKL_SIOCGIFCOUNT: u32 = 35128;
    pub const LKL_SIOCGIFBR: u32 = 35136;
    pub const LKL_SIOCSIFBR: u32 = 35137;
    pub const LKL_SIOCGIFTXQLEN: u32 = 35138;
    pub const LKL_SIOCSIFTXQLEN: u32 = 35139;
    pub const LKL_SIOCETHTOOL: u32 = 35142;
    pub const LKL_SIOCGMIIPHY: u32 = 35143;
    pub const LKL_SIOCGMIIREG: u32 = 35144;
    pub const LKL_SIOCSMIIREG: u32 = 35145;
    pub const LKL_SIOCWANDEV: u32 = 35146;
    pub const LKL_SIOCOUTQNSD: u32 = 35147;
    pub const LKL_SIOCGSKNS: u32 = 35148;
    pub const LKL_SIOCDARP: u32 = 35155;
    pub const LKL_SIOCGARP: u32 = 35156;
    pub const LKL_SIOCSARP: u32 = 35157;
    pub const LKL_SIOCDRARP: u32 = 35168;
    pub const LKL_SIOCGRARP: u32 = 35169;
    pub const LKL_SIOCSRARP: u32 = 35170;
    pub const LKL_SIOCGIFMAP: u32 = 35184;
    pub const LKL_SIOCSIFMAP: u32 = 35185;
    pub const LKL_SIOCADDDLCI: u32 = 35200;
    pub const LKL_SIOCDELDLCI: u32 = 35201;
    pub const LKL_SIOCGIFVLAN: u32 = 35202;
    pub const LKL_SIOCSIFVLAN: u32 = 35203;
    pub const LKL_SIOCBONDENSLAVE: u32 = 35216;
    pub const LKL_SIOCBONDRELEASE: u32 = 35217;
    pub const LKL_SIOCBONDSETHWADDR: u32 = 35218;
    pub const LKL_SIOCBONDSLAVEINFOQUERY: u32 = 35219;
    pub const LKL_SIOCBONDINFOQUERY: u32 = 35220;
    pub const LKL_SIOCBONDCHANGEACTIVE: u32 = 35221;
    pub const LKL_SIOCBRADDBR: u32 = 35232;
    pub const LKL_SIOCBRDELBR: u32 = 35233;
    pub const LKL_SIOCBRADDIF: u32 = 35234;
    pub const LKL_SIOCBRDELIF: u32 = 35235;
    pub const LKL_SIOCSHWTSTAMP: u32 = 35248;
    pub const LKL_SIOCGHWTSTAMP: u32 = 35249;
    pub const LKL_SIOCDEVPRIVATE: u32 = 35312;
    pub const LKL_SIOCPROTOPRIVATE: u32 = 35296;
    pub const LKL_RTF_UP: u32 = 1;
    pub const LKL_RTF_GATEWAY: u32 = 2;
    pub const LKL_RTF_HOST: u32 = 4;
    pub const LKL_RTF_REINSTATE: u32 = 8;
    pub const LKL_RTF_DYNAMIC: u32 = 16;
    pub const LKL_RTF_MODIFIED: u32 = 32;
    pub const LKL_RTF_MTU: u32 = 64;
    pub const LKL_RTF_MSS: u32 = 64;
    pub const LKL_RTF_WINDOW: u32 = 128;
    pub const LKL_RTF_IRTT: u32 = 256;
    pub const LKL_RTF_REJECT: u32 = 512;
    pub const LKL_RTF_DEFAULT: u32 = 65536;
    pub const LKL_RTF_ALLONLINK: u32 = 131072;
    pub const LKL_RTF_ADDRCONF: u32 = 262144;
    pub const LKL_RTF_PREFIX_RT: u32 = 524288;
    pub const LKL_RTF_ANYCAST: u32 = 1048576;
    pub const LKL_RTF_NONEXTHOP: u32 = 2097152;
    pub const LKL_RTF_EXPIRES: u32 = 4194304;
    pub const LKL_RTF_ROUTEINFO: u32 = 8388608;
    pub const LKL_RTF_CACHE: u32 = 16777216;
    pub const LKL_RTF_FLOW: u32 = 33554432;
    pub const LKL_RTF_POLICY: u32 = 67108864;
    pub const LKL_RTF_PREF_MASK: u32 = 402653184;
    pub const LKL_RTF_PCPU: u32 = 1073741824;
    pub const LKL_RTF_LOCAL: u32 = 2147483648;
    pub const LKL_RTMSG_NEWDEVICE: u32 = 17;
    pub const LKL_RTMSG_DELDEVICE: u32 = 18;
    pub const LKL_RTMSG_NEWROUTE: u32 = 33;
    pub const LKL_RTMSG_DELROUTE: u32 = 34;
    pub const LKL_IP6_RT_PRIO_USER: u32 = 1024;
    pub const LKL_IP6_RT_PRIO_ADDRCONF: u32 = 256;
    pub const LKL_IPV6_MIN_MTU: u32 = 1280;
    pub const LKL_IPV6_SRCRT_STRICT: u32 = 1;
    pub const LKL_IPV6_SRCRT_TYPE_0: u32 = 0;
    pub const LKL_IPV6_SRCRT_TYPE_2: u32 = 2;
    pub const LKL_IPV6_SRCRT_TYPE_3: u32 = 3;
    pub const LKL_IPV6_SRCRT_TYPE_4: u32 = 4;
    pub const LKL_IPV6_OPT_ROUTERALERT_MLD: u32 = 0;
    pub const LKL_NETLINK_ROUTE: u32 = 0;
    pub const LKL_NETLINK_UNUSED: u32 = 1;
    pub const LKL_NETLINK_USERSOCK: u32 = 2;
    pub const LKL_NETLINK_FIREWALL: u32 = 3;
    pub const LKL_NETLINK_SOCK_DIAG: u32 = 4;
    pub const LKL_NETLINK_NFLOG: u32 = 5;
    pub const LKL_NETLINK_XFRM: u32 = 6;
    pub const LKL_NETLINK_SELINUX: u32 = 7;
    pub const LKL_NETLINK_ISCSI: u32 = 8;
    pub const LKL_NETLINK_AUDIT: u32 = 9;
    pub const LKL_NETLINK_FIB_LOOKUP: u32 = 10;
    pub const LKL_NETLINK_CONNECTOR: u32 = 11;
    pub const LKL_NETLINK_NETFILTER: u32 = 12;
    pub const LKL_NETLINK_IP6_FW: u32 = 13;
    pub const LKL_NETLINK_DNRTMSG: u32 = 14;
    pub const LKL_NETLINK_KOBJECT_UEVENT: u32 = 15;
    pub const LKL_NETLINK_GENERIC: u32 = 16;
    pub const LKL_NETLINK_SCSITRANSPORT: u32 = 18;
    pub const LKL_NETLINK_ECRYPTFS: u32 = 19;
    pub const LKL_NETLINK_RDMA: u32 = 20;
    pub const LKL_NETLINK_CRYPTO: u32 = 21;
    pub const LKL_NETLINK_SMC: u32 = 22;
    pub const LKL_NETLINK_INET_DIAG: u32 = 4;
    pub const LKL_MAX_LINKS: u32 = 32;
    pub const LKL_NLM_F_REQUEST: u32 = 1;
    pub const LKL_NLM_F_MULTI: u32 = 2;
    pub const LKL_NLM_F_ACK: u32 = 4;
    pub const LKL_NLM_F_ECHO: u32 = 8;
    pub const LKL_NLM_F_DUMP_INTR: u32 = 16;
    pub const LKL_NLM_F_DUMP_FILTERED: u32 = 32;
    pub const LKL_NLM_F_ROOT: u32 = 256;
    pub const LKL_NLM_F_MATCH: u32 = 512;
    pub const LKL_NLM_F_ATOMIC: u32 = 1024;
    pub const LKL_NLM_F_DUMP: u32 = 768;
    pub const LKL_NLM_F_REPLACE: u32 = 256;
    pub const LKL_NLM_F_EXCL: u32 = 512;
    pub const LKL_NLM_F_CREATE: u32 = 1024;
    pub const LKL_NLM_F_APPEND: u32 = 2048;
    pub const LKL_NLM_F_NONREC: u32 = 256;
    pub const LKL_NLM_F_CAPPED: u32 = 256;
    pub const LKL_NLM_F_ACK_TLVS: u32 = 512;
    pub const LKL_NLMSG_ALIGNTO: u32 = 4;
    pub const LKL_NLMSG_NOOP: u32 = 1;
    pub const LKL_NLMSG_ERROR: u32 = 2;
    pub const LKL_NLMSG_DONE: u32 = 3;
    pub const LKL_NLMSG_OVERRUN: u32 = 4;
    pub const LKL_NLMSG_MIN_TYPE: u32 = 16;
    pub const LKL_NETLINK_ADD_MEMBERSHIP: u32 = 1;
    pub const LKL_NETLINK_DROP_MEMBERSHIP: u32 = 2;
    pub const LKL_NETLINK_PKTINFO: u32 = 3;
    pub const LKL_NETLINK_BROADCAST_ERROR: u32 = 4;
    pub const LKL_NETLINK_NO_ENOBUFS: u32 = 5;
    pub const LKL_NETLINK_RX_RING: u32 = 6;
    pub const LKL_NETLINK_TX_RING: u32 = 7;
    pub const LKL_NETLINK_LISTEN_ALL_NSID: u32 = 8;
    pub const LKL_NETLINK_LIST_MEMBERSHIPS: u32 = 9;
    pub const LKL_NETLINK_CAP_ACK: u32 = 10;
    pub const LKL_NETLINK_EXT_ACK: u32 = 11;
    pub const LKL_NETLINK_GET_STRICT_CHK: u32 = 12;
    pub const LKL_NL_MMAP_MSG_ALIGNMENT: u32 = 4;
    pub const LKL_NET_MAJOR: u32 = 36;
    pub const LKL_NLA_F_NESTED: u32 = 32768;
    pub const LKL_NLA_F_NET_BYTEORDER: u32 = 16384;
    pub const LKL_NLA_TYPE_MASK: i32 = -49153;
    pub const LKL_NLA_ALIGNTO: u32 = 4;
    pub const LKL_NTF_USE: u32 = 1;
    pub const LKL_NTF_SELF: u32 = 2;
    pub const LKL_NTF_MASTER: u32 = 4;
    pub const LKL_NTF_PROXY: u32 = 8;
    pub const LKL_NTF_EXT_LEARNED: u32 = 16;
    pub const LKL_NTF_OFFLOADED: u32 = 32;
    pub const LKL_NTF_STICKY: u32 = 64;
    pub const LKL_NTF_ROUTER: u32 = 128;
    pub const LKL_NUD_INCOMPLETE: u32 = 1;
    pub const LKL_NUD_REACHABLE: u32 = 2;
    pub const LKL_NUD_STALE: u32 = 4;
    pub const LKL_NUD_DELAY: u32 = 8;
    pub const LKL_NUD_PROBE: u32 = 16;
    pub const LKL_NUD_FAILED: u32 = 32;
    pub const LKL_NUD_NOARP: u32 = 64;
    pub const LKL_NUD_PERMANENT: u32 = 128;
    pub const LKL_NUD_NONE: u32 = 0;
    pub const LKL_MACVLAN_FLAG_NOPROMISC: u32 = 1;
    pub const LKL_IPVLAN_F_PRIVATE: u32 = 1;
    pub const LKL_IPVLAN_F_VEPA: u32 = 2;
    pub const LKL_MAX_VLAN_LIST_LEN: u32 = 1;
    pub const LKL_PORT_PROFILE_MAX: u32 = 40;
    pub const LKL_PORT_UUID_MAX: u32 = 16;
    pub const LKL_PORT_SELF_VF: i32 = -1;
    pub const LKL_XDP_FLAGS_UPDATE_IF_NOEXIST: u32 = 1;
    pub const LKL_XDP_FLAGS_SKB_MODE: u32 = 2;
    pub const LKL_XDP_FLAGS_DRV_MODE: u32 = 4;
    pub const LKL_XDP_FLAGS_HW_MODE: u32 = 8;
    pub const LKL_XDP_FLAGS_REPLACE: u32 = 16;
    pub const LKL_XDP_FLAGS_MODES: u32 = 14;
    pub const LKL_XDP_FLAGS_MASK: u32 = 31;
    pub const LKL_RMNET_FLAGS_INGRESS_DEAGGREGATION: u32 = 1;
    pub const LKL_RMNET_FLAGS_INGRESS_MAP_COMMANDS: u32 = 2;
    pub const LKL_RMNET_FLAGS_INGRESS_MAP_CKSUMV4: u32 = 4;
    pub const LKL_RMNET_FLAGS_EGRESS_MAP_CKSUMV4: u32 = 8;
    pub const LKL_IFA_F_SECONDARY: u32 = 1;
    pub const LKL_IFA_F_TEMPORARY: u32 = 1;
    pub const LKL_IFA_F_NODAD: u32 = 2;
    pub const LKL_IFA_F_OPTIMISTIC: u32 = 4;
    pub const LKL_IFA_F_DADFAILED: u32 = 8;
    pub const LKL_IFA_F_HOMEADDRESS: u32 = 16;
    pub const LKL_IFA_F_DEPRECATED: u32 = 32;
    pub const LKL_IFA_F_TENTATIVE: u32 = 64;
    pub const LKL_IFA_F_PERMANENT: u32 = 128;
    pub const LKL_IFA_F_MANAGETEMPADDR: u32 = 256;
    pub const LKL_IFA_F_NOPREFIXROUTE: u32 = 512;
    pub const LKL_IFA_F_MCAUTOJOIN: u32 = 1024;
    pub const LKL_IFA_F_STABLE_PRIVACY: u32 = 2048;
    pub const LKL_RTNL_FAMILY_IPMR: u32 = 128;
    pub const LKL_RTNL_FAMILY_IP6MR: u32 = 129;
    pub const LKL_RTNL_FAMILY_MAX: u32 = 129;
    pub const LKL_RTA_ALIGNTO: u32 = 4;
    pub const LKL_RTPROT_UNSPEC: u32 = 0;
    pub const LKL_RTPROT_REDIRECT: u32 = 1;
    pub const LKL_RTPROT_KERNEL: u32 = 2;
    pub const LKL_RTPROT_BOOT: u32 = 3;
    pub const LKL_RTPROT_STATIC: u32 = 4;
    pub const LKL_RTPROT_GATED: u32 = 8;
    pub const LKL_RTPROT_RA: u32 = 9;
    pub const LKL_RTPROT_MRT: u32 = 10;
    pub const LKL_RTPROT_ZEBRA: u32 = 11;
    pub const LKL_RTPROT_BIRD: u32 = 12;
    pub const LKL_RTPROT_DNROUTED: u32 = 13;
    pub const LKL_RTPROT_XORP: u32 = 14;
    pub const LKL_RTPROT_NTK: u32 = 15;
    pub const LKL_RTPROT_DHCP: u32 = 16;
    pub const LKL_RTPROT_MROUTED: u32 = 17;
    pub const LKL_RTPROT_KEEPALIVED: u32 = 18;
    pub const LKL_RTPROT_BABEL: u32 = 42;
    pub const LKL_RTPROT_BGP: u32 = 186;
    pub const LKL_RTPROT_ISIS: u32 = 187;
    pub const LKL_RTPROT_OSPF: u32 = 188;
    pub const LKL_RTPROT_RIP: u32 = 189;
    pub const LKL_RTPROT_EIGRP: u32 = 192;
    pub const LKL_RTM_F_NOTIFY: u32 = 256;
    pub const LKL_RTM_F_CLONED: u32 = 512;
    pub const LKL_RTM_F_EQUALIZE: u32 = 1024;
    pub const LKL_RTM_F_PREFIX: u32 = 2048;
    pub const LKL_RTM_F_LOOKUP_TABLE: u32 = 4096;
    pub const LKL_RTM_F_FIB_MATCH: u32 = 8192;
    pub const LKL_RTM_F_OFFLOAD: u32 = 16384;
    pub const LKL_RTM_F_TRAP: u32 = 32768;
    pub const LKL_RTNH_F_DEAD: u32 = 1;
    pub const LKL_RTNH_F_PERVASIVE: u32 = 2;
    pub const LKL_RTNH_F_ONLINK: u32 = 4;
    pub const LKL_RTNH_F_OFFLOAD: u32 = 8;
    pub const LKL_RTNH_F_LINKDOWN: u32 = 16;
    pub const LKL_RTNH_F_UNRESOLVED: u32 = 32;
    pub const LKL_RTNH_COMPARE_MASK: u32 = 25;
    pub const LKL_RTNH_ALIGNTO: u32 = 4;
    pub const LKL_RTNETLINK_HAVE_PEERINFO: u32 = 1;
    pub const LKL_RTAX_FEATURE_ECN: u32 = 1;
    pub const LKL_RTAX_FEATURE_SACK: u32 = 2;
    pub const LKL_RTAX_FEATURE_TIMESTAMP: u32 = 4;
    pub const LKL_RTAX_FEATURE_ALLFRAG: u32 = 8;
    pub const LKL_RTAX_FEATURE_MASK: u32 = 15;
    pub const LKL_TCM_IFINDEX_MAGIC_BLOCK: u32 = 4294967295;
    pub const LKL_TCA_DUMP_FLAGS_TERSE: u32 = 1;
    pub const LKL_RTMGRP_LINK: u32 = 1;
    pub const LKL_RTMGRP_NOTIFY: u32 = 2;
    pub const LKL_RTMGRP_NEIGH: u32 = 4;
    pub const LKL_RTMGRP_TC: u32 = 8;
    pub const LKL_RTMGRP_IPV4_IFADDR: u32 = 16;
    pub const LKL_RTMGRP_IPV4_MROUTE: u32 = 32;
    pub const LKL_RTMGRP_IPV4_ROUTE: u32 = 64;
    pub const LKL_RTMGRP_IPV4_RULE: u32 = 128;
    pub const LKL_RTMGRP_IPV6_IFADDR: u32 = 256;
    pub const LKL_RTMGRP_IPV6_MROUTE: u32 = 512;
    pub const LKL_RTMGRP_IPV6_ROUTE: u32 = 1024;
    pub const LKL_RTMGRP_IPV6_IFINFO: u32 = 2048;
    pub const lkl_RTMGRP_DECnet_IFADDR: u32 = 4096;
    pub const lkl_RTMGRP_DECnet_ROUTE: u32 = 16384;
    pub const LKL_RTMGRP_IPV6_PREFIX: u32 = 131072;
    pub const LKL_TCA_FLAG_LARGE_DUMP_ON: u32 = 1;
    pub const LKL_RTEXT_FILTER_VF: u32 = 1;
    pub const LKL_RTEXT_FILTER_BRVLAN: u32 = 2;
    pub const LKL_RTEXT_FILTER_BRVLAN_COMPRESSED: u32 = 4;
    pub const LKL_RTEXT_FILTER_SKIP_STATS: u32 = 8;
    pub const LKL_RTEXT_FILTER_MRP: u32 = 16;
    pub const LKL_FIB_RULE_PERMANENT: u32 = 1;
    pub const LKL_FIB_RULE_INVERT: u32 = 2;
    pub const LKL_FIB_RULE_UNRESOLVED: u32 = 4;
    pub const LKL_FIB_RULE_IIF_DETACHED: u32 = 8;
    pub const LKL_FIB_RULE_DEV_DETACHED: u32 = 8;
    pub const LKL_FIB_RULE_OIF_DETACHED: u32 = 16;
    pub const LKL_FIB_RULE_FIND_SADDR: u32 = 65536;
    pub const LKL_VIRTIO_ID_NET: u32 = 1;
    pub const LKL_VIRTIO_ID_BLOCK: u32 = 2;
    pub const LKL_VIRTIO_ID_CONSOLE: u32 = 3;
    pub const LKL_VIRTIO_ID_RNG: u32 = 4;
    pub const LKL_VIRTIO_ID_BALLOON: u32 = 5;
    pub const LKL_VIRTIO_ID_RPMSG: u32 = 7;
    pub const LKL_VIRTIO_ID_SCSI: u32 = 8;
    pub const LKL_VIRTIO_ID_9P: u32 = 9;
    pub const LKL_VIRTIO_ID_RPROC_SERIAL: u32 = 11;
    pub const LKL_VIRTIO_ID_CAIF: u32 = 12;
    pub const LKL_VIRTIO_ID_GPU: u32 = 16;
    pub const LKL_VIRTIO_ID_INPUT: u32 = 18;
    pub const LKL_VIRTIO_ID_VSOCK: u32 = 19;
    pub const LKL_VIRTIO_ID_CRYPTO: u32 = 20;
    pub const LKL_VIRTIO_ID_IOMMU: u32 = 23;
    pub const LKL_VIRTIO_ID_MEM: u32 = 24;
    pub const LKL_VIRTIO_ID_FS: u32 = 26;
    pub const LKL_VIRTIO_ID_PMEM: u32 = 27;
    pub const LKL_VIRTIO_ID_MAC80211_HWSIM: u32 = 29;
    pub const LKL_VIRTIO_CONFIG_S_ACKNOWLEDGE: u32 = 1;
    pub const LKL_VIRTIO_CONFIG_S_DRIVER: u32 = 2;
    pub const LKL_VIRTIO_CONFIG_S_DRIVER_OK: u32 = 4;
    pub const LKL_VIRTIO_CONFIG_S_FEATURES_OK: u32 = 8;
    pub const LKL_VIRTIO_CONFIG_S_NEEDS_RESET: u32 = 64;
    pub const LKL_VIRTIO_CONFIG_S_FAILED: u32 = 128;
    pub const LKL_VIRTIO_TRANSPORT_F_START: u32 = 28;
    pub const LKL_VIRTIO_TRANSPORT_F_END: u32 = 38;
    pub const LKL_VIRTIO_F_NOTIFY_ON_EMPTY: u32 = 24;
    pub const LKL_VIRTIO_F_ANY_LAYOUT: u32 = 27;
    pub const LKL_VIRTIO_F_VERSION_1: u32 = 32;
    pub const LKL_VIRTIO_F_ACCESS_PLATFORM: u32 = 33;
    pub const LKL_VIRTIO_F_IOMMU_PLATFORM: u32 = 33;
    pub const LKL_VIRTIO_F_RING_PACKED: u32 = 34;
    pub const LKL_VIRTIO_F_ORDER_PLATFORM: u32 = 36;
    pub const LKL_VIRTIO_F_SR_IOV: u32 = 37;
    pub const LKL_VIRTIO_BLK_F_SIZE_MAX: u32 = 1;
    pub const LKL_VIRTIO_BLK_F_SEG_MAX: u32 = 2;
    pub const LKL_VIRTIO_BLK_F_GEOMETRY: u32 = 4;
    pub const LKL_VIRTIO_BLK_F_RO: u32 = 5;
    pub const LKL_VIRTIO_BLK_F_BLK_SIZE: u32 = 6;
    pub const LKL_VIRTIO_BLK_F_TOPOLOGY: u32 = 10;
    pub const LKL_VIRTIO_BLK_F_MQ: u32 = 12;
    pub const LKL_VIRTIO_BLK_F_DISCARD: u32 = 13;
    pub const LKL_VIRTIO_BLK_F_WRITE_ZEROES: u32 = 14;
    pub const LKL_VIRTIO_BLK_F_BARRIER: u32 = 0;
    pub const LKL_VIRTIO_BLK_F_SCSI: u32 = 7;
    pub const LKL_VIRTIO_BLK_F_FLUSH: u32 = 9;
    pub const LKL_VIRTIO_BLK_F_CONFIG_WCE: u32 = 11;
    pub const LKL_VIRTIO_BLK_F_WCE: u32 = 9;
    pub const LKL_VIRTIO_BLK_ID_BYTES: u32 = 20;
    pub const LKL_VIRTIO_BLK_T_IN: u32 = 0;
    pub const LKL_VIRTIO_BLK_T_OUT: u32 = 1;
    pub const LKL_VIRTIO_BLK_T_SCSI_CMD: u32 = 2;
    pub const LKL_VIRTIO_BLK_T_FLUSH: u32 = 4;
    pub const LKL_VIRTIO_BLK_T_GET_ID: u32 = 8;
    pub const LKL_VIRTIO_BLK_T_DISCARD: u32 = 11;
    pub const LKL_VIRTIO_BLK_T_WRITE_ZEROES: u32 = 13;
    pub const LKL_VIRTIO_BLK_T_BARRIER: u32 = 2147483648;
    pub const LKL_VIRTIO_BLK_WRITE_ZEROES_FLAG_UNMAP: u32 = 1;
    pub const LKL_VIRTIO_BLK_S_OK: u32 = 0;
    pub const LKL_VIRTIO_BLK_S_IOERR: u32 = 1;
    pub const LKL_VIRTIO_BLK_S_UNSUPP: u32 = 2;
    pub const LKL_ETH_ALEN: u32 = 6;
    pub const LKL_ETH_TLEN: u32 = 2;
    pub const LKL_ETH_HLEN: u32 = 14;
    pub const LKL_ETH_ZLEN: u32 = 60;
    pub const LKL_ETH_DATA_LEN: u32 = 1500;
    pub const LKL_ETH_FRAME_LEN: u32 = 1514;
    pub const LKL_ETH_FCS_LEN: u32 = 4;
    pub const LKL_ETH_MIN_MTU: u32 = 68;
    pub const LKL_ETH_MAX_MTU: u32 = 65535;
    pub const LKL_ETH_P_LOOP: u32 = 96;
    pub const LKL_ETH_P_PUP: u32 = 512;
    pub const LKL_ETH_P_PUPAT: u32 = 513;
    pub const LKL_ETH_P_TSN: u32 = 8944;
    pub const LKL_ETH_P_ERSPAN2: u32 = 8939;
    pub const LKL_ETH_P_IP: u32 = 2048;
    pub const LKL_ETH_P_X25: u32 = 2053;
    pub const LKL_ETH_P_ARP: u32 = 2054;
    pub const LKL_ETH_P_BPQ: u32 = 2303;
    pub const LKL_ETH_P_IEEEPUP: u32 = 2560;
    pub const LKL_ETH_P_IEEEPUPAT: u32 = 2561;
    pub const LKL_ETH_P_BATMAN: u32 = 17157;
    pub const LKL_ETH_P_DEC: u32 = 24576;
    pub const LKL_ETH_P_DNA_DL: u32 = 24577;
    pub const LKL_ETH_P_DNA_RC: u32 = 24578;
    pub const LKL_ETH_P_DNA_RT: u32 = 24579;
    pub const LKL_ETH_P_LAT: u32 = 24580;
    pub const LKL_ETH_P_DIAG: u32 = 24581;
    pub const LKL_ETH_P_CUST: u32 = 24582;
    pub const LKL_ETH_P_SCA: u32 = 24583;
    pub const LKL_ETH_P_TEB: u32 = 25944;
    pub const LKL_ETH_P_RARP: u32 = 32821;
    pub const LKL_ETH_P_ATALK: u32 = 32923;
    pub const LKL_ETH_P_AARP: u32 = 33011;
    pub const LKL_ETH_P_8021Q: u32 = 33024;
    pub const LKL_ETH_P_ERSPAN: u32 = 35006;
    pub const LKL_ETH_P_IPX: u32 = 33079;
    pub const LKL_ETH_P_IPV6: u32 = 34525;
    pub const LKL_ETH_P_PAUSE: u32 = 34824;
    pub const LKL_ETH_P_SLOW: u32 = 34825;
    pub const LKL_ETH_P_WCCP: u32 = 34878;
    pub const LKL_ETH_P_MPLS_UC: u32 = 34887;
    pub const LKL_ETH_P_MPLS_MC: u32 = 34888;
    pub const LKL_ETH_P_ATMMPOA: u32 = 34892;
    pub const LKL_ETH_P_PPP_DISC: u32 = 34915;
    pub const LKL_ETH_P_PPP_SES: u32 = 34916;
    pub const LKL_ETH_P_LINK_CTL: u32 = 34924;
    pub const LKL_ETH_P_ATMFATE: u32 = 34948;
    pub const LKL_ETH_P_PAE: u32 = 34958;
    pub const LKL_ETH_P_AOE: u32 = 34978;
    pub const LKL_ETH_P_8021AD: u32 = 34984;
    pub const LKL_ETH_P_802_EX1: u32 = 34997;
    pub const LKL_ETH_P_PREAUTH: u32 = 35015;
    pub const LKL_ETH_P_TIPC: u32 = 35018;
    pub const LKL_ETH_P_LLDP: u32 = 35020;
    pub const LKL_ETH_P_MRP: u32 = 35043;
    pub const LKL_ETH_P_MACSEC: u32 = 35045;
    pub const LKL_ETH_P_8021AH: u32 = 35047;
    pub const LKL_ETH_P_MVRP: u32 = 35061;
    pub const LKL_ETH_P_1588: u32 = 35063;
    pub const LKL_ETH_P_NCSI: u32 = 35064;
    pub const LKL_ETH_P_PRP: u32 = 35067;
    pub const LKL_ETH_P_FCOE: u32 = 35078;
    pub const LKL_ETH_P_IBOE: u32 = 35093;
    pub const LKL_ETH_P_TDLS: u32 = 35085;
    pub const LKL_ETH_P_FIP: u32 = 35092;
    pub const LKL_ETH_P_80221: u32 = 35095;
    pub const LKL_ETH_P_HSR: u32 = 35119;
    pub const LKL_ETH_P_NSH: u32 = 35151;
    pub const LKL_ETH_P_LOOPBACK: u32 = 36864;
    pub const LKL_ETH_P_QINQ1: u32 = 37120;
    pub const LKL_ETH_P_QINQ2: u32 = 37376;
    pub const LKL_ETH_P_QINQ3: u32 = 37632;
    pub const LKL_ETH_P_EDSA: u32 = 56026;
    pub const LKL_ETH_P_DSA_8021Q: u32 = 56027;
    pub const LKL_ETH_P_IFE: u32 = 60734;
    pub const LKL_ETH_P_AF_IUCV: u32 = 64507;
    pub const LKL_ETH_P_802_3_MIN: u32 = 1536;
    pub const LKL_ETH_P_802_3: u32 = 1;
    pub const LKL_ETH_P_AX25: u32 = 2;
    pub const LKL_ETH_P_ALL: u32 = 3;
    pub const LKL_ETH_P_802_2: u32 = 4;
    pub const LKL_ETH_P_SNAP: u32 = 5;
    pub const LKL_ETH_P_DDCMP: u32 = 6;
    pub const LKL_ETH_P_WAN_PPP: u32 = 7;
    pub const LKL_ETH_P_PPP_MP: u32 = 8;
    pub const LKL_ETH_P_LOCALTALK: u32 = 9;
    pub const LKL_ETH_P_CAN: u32 = 12;
    pub const LKL_ETH_P_CANFD: u32 = 13;
    pub const LKL_ETH_P_PPPTALK: u32 = 16;
    pub const LKL_ETH_P_TR_802_2: u32 = 17;
    pub const LKL_ETH_P_MOBITEX: u32 = 21;
    pub const LKL_ETH_P_CONTROL: u32 = 22;
    pub const LKL_ETH_P_IRDA: u32 = 23;
    pub const LKL_ETH_P_ECONET: u32 = 24;
    pub const LKL_ETH_P_HDLC: u32 = 25;
    pub const LKL_ETH_P_ARCNET: u32 = 26;
    pub const LKL_ETH_P_DSA: u32 = 27;
    pub const LKL_ETH_P_TRAILER: u32 = 28;
    pub const LKL_ETH_P_PHONET: u32 = 245;
    pub const LKL_ETH_P_IEEE802154: u32 = 246;
    pub const LKL_ETH_P_CAIF: u32 = 247;
    pub const LKL_ETH_P_XDSA: u32 = 248;
    pub const LKL_ETH_P_MAP: u32 = 249;
    pub const __LKL__UAPI_DEF_ETHHDR: u32 = 1;
    pub const LKL_VIRTIO_NET_F_CSUM: u32 = 0;
    pub const LKL_VIRTIO_NET_F_GUEST_CSUM: u32 = 1;
    pub const LKL_VIRTIO_NET_F_CTRL_GUEST_OFFLOADS: u32 = 2;
    pub const LKL_VIRTIO_NET_F_MTU: u32 = 3;
    pub const LKL_VIRTIO_NET_F_MAC: u32 = 5;
    pub const LKL_VIRTIO_NET_F_GUEST_TSO4: u32 = 7;
    pub const LKL_VIRTIO_NET_F_GUEST_TSO6: u32 = 8;
    pub const LKL_VIRTIO_NET_F_GUEST_ECN: u32 = 9;
    pub const LKL_VIRTIO_NET_F_GUEST_UFO: u32 = 10;
    pub const LKL_VIRTIO_NET_F_HOST_TSO4: u32 = 11;
    pub const LKL_VIRTIO_NET_F_HOST_TSO6: u32 = 12;
    pub const LKL_VIRTIO_NET_F_HOST_ECN: u32 = 13;
    pub const LKL_VIRTIO_NET_F_HOST_UFO: u32 = 14;
    pub const LKL_VIRTIO_NET_F_MRG_RXBUF: u32 = 15;
    pub const LKL_VIRTIO_NET_F_STATUS: u32 = 16;
    pub const LKL_VIRTIO_NET_F_CTRL_VQ: u32 = 17;
    pub const LKL_VIRTIO_NET_F_CTRL_RX: u32 = 18;
    pub const LKL_VIRTIO_NET_F_CTRL_VLAN: u32 = 19;
    pub const LKL_VIRTIO_NET_F_CTRL_RX_EXTRA: u32 = 20;
    pub const LKL_VIRTIO_NET_F_GUEST_ANNOUNCE: u32 = 21;
    pub const LKL_VIRTIO_NET_F_MQ: u32 = 22;
    pub const LKL_VIRTIO_NET_F_CTRL_MAC_ADDR: u32 = 23;
    pub const LKL_VIRTIO_NET_F_HASH_REPORT: u32 = 57;
    pub const LKL_VIRTIO_NET_F_RSS: u32 = 60;
    pub const LKL_VIRTIO_NET_F_RSC_EXT: u32 = 61;
    pub const LKL_VIRTIO_NET_F_STANDBY: u32 = 62;
    pub const LKL_VIRTIO_NET_F_SPEED_DUPLEX: u32 = 63;
    pub const LKL_VIRTIO_NET_F_GSO: u32 = 6;
    pub const LKL_VIRTIO_NET_S_LINK_UP: u32 = 1;
    pub const LKL_VIRTIO_NET_S_ANNOUNCE: u32 = 2;
    pub const lkl_VIRTIO_NET_RSS_HASH_TYPE_IPv4: u32 = 1;
    pub const lkl_VIRTIO_NET_RSS_HASH_TYPE_TCPv4: u32 = 2;
    pub const lkl_VIRTIO_NET_RSS_HASH_TYPE_UDPv4: u32 = 4;
    pub const lkl_VIRTIO_NET_RSS_HASH_TYPE_IPv6: u32 = 8;
    pub const lkl_VIRTIO_NET_RSS_HASH_TYPE_TCPv6: u32 = 16;
    pub const lkl_VIRTIO_NET_RSS_HASH_TYPE_UDPv6: u32 = 32;
    pub const LKL_VIRTIO_NET_RSS_HASH_TYPE_IP_EX: u32 = 64;
    pub const LKL_VIRTIO_NET_RSS_HASH_TYPE_TCP_EX: u32 = 128;
    pub const LKL_VIRTIO_NET_RSS_HASH_TYPE_UDP_EX: u32 = 256;
    pub const LKL_VIRTIO_NET_HDR_F_NEEDS_CSUM: u32 = 1;
    pub const LKL_VIRTIO_NET_HDR_F_DATA_VALID: u32 = 2;
    pub const LKL_VIRTIO_NET_HDR_F_RSC_INFO: u32 = 4;
    pub const LKL_VIRTIO_NET_HDR_GSO_NONE: u32 = 0;
    pub const LKL_VIRTIO_NET_HDR_GSO_TCPV4: u32 = 1;
    pub const LKL_VIRTIO_NET_HDR_GSO_UDP: u32 = 3;
    pub const LKL_VIRTIO_NET_HDR_GSO_TCPV6: u32 = 4;
    pub const LKL_VIRTIO_NET_HDR_GSO_ECN: u32 = 128;
    pub const LKL_VIRTIO_NET_HASH_REPORT_NONE: u32 = 0;
    pub const lkl_VIRTIO_NET_HASH_REPORT_IPv4: u32 = 1;
    pub const lkl_VIRTIO_NET_HASH_REPORT_TCPv4: u32 = 2;
    pub const lkl_VIRTIO_NET_HASH_REPORT_UDPv4: u32 = 3;
    pub const lkl_VIRTIO_NET_HASH_REPORT_IPv6: u32 = 4;
    pub const lkl_VIRTIO_NET_HASH_REPORT_TCPv6: u32 = 5;
    pub const lkl_VIRTIO_NET_HASH_REPORT_UDPv6: u32 = 6;
    pub const lkl_VIRTIO_NET_HASH_REPORT_IPv6_EX: u32 = 7;
    pub const lkl_VIRTIO_NET_HASH_REPORT_TCPv6_EX: u32 = 8;
    pub const lkl_VIRTIO_NET_HASH_REPORT_UDPv6_EX: u32 = 9;
    pub const LKL_VIRTIO_NET_OK: u32 = 0;
    pub const LKL_VIRTIO_NET_ERR: u32 = 1;
    pub const LKL_VIRTIO_NET_CTRL_RX: u32 = 0;
    pub const LKL_VIRTIO_NET_CTRL_RX_PROMISC: u32 = 0;
    pub const LKL_VIRTIO_NET_CTRL_RX_ALLMULTI: u32 = 1;
    pub const LKL_VIRTIO_NET_CTRL_RX_ALLUNI: u32 = 2;
    pub const LKL_VIRTIO_NET_CTRL_RX_NOMULTI: u32 = 3;
    pub const LKL_VIRTIO_NET_CTRL_RX_NOUNI: u32 = 4;
    pub const LKL_VIRTIO_NET_CTRL_RX_NOBCAST: u32 = 5;
    pub const LKL_VIRTIO_NET_CTRL_MAC: u32 = 1;
    pub const LKL_VIRTIO_NET_CTRL_MAC_TABLE_SET: u32 = 0;
    pub const LKL_VIRTIO_NET_CTRL_MAC_ADDR_SET: u32 = 1;
    pub const LKL_VIRTIO_NET_CTRL_VLAN: u32 = 2;
    pub const LKL_VIRTIO_NET_CTRL_VLAN_ADD: u32 = 0;
    pub const LKL_VIRTIO_NET_CTRL_VLAN_DEL: u32 = 1;
    pub const LKL_VIRTIO_NET_CTRL_ANNOUNCE: u32 = 3;
    pub const LKL_VIRTIO_NET_CTRL_ANNOUNCE_ACK: u32 = 0;
    pub const LKL_VIRTIO_NET_CTRL_MQ: u32 = 4;
    pub const LKL_VIRTIO_NET_CTRL_MQ_VQ_PAIRS_SET: u32 = 0;
    pub const LKL_VIRTIO_NET_CTRL_MQ_VQ_PAIRS_MIN: u32 = 1;
    pub const LKL_VIRTIO_NET_CTRL_MQ_VQ_PAIRS_MAX: u32 = 32768;
    pub const LKL_VIRTIO_NET_CTRL_MQ_RSS_CONFIG: u32 = 1;
    pub const LKL_VIRTIO_NET_CTRL_MQ_HASH_CONFIG: u32 = 2;
    pub const LKL_VIRTIO_NET_CTRL_GUEST_OFFLOADS: u32 = 5;
    pub const LKL_VIRTIO_NET_CTRL_GUEST_OFFLOADS_SET: u32 = 0;
    pub const _STDINT_H: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const LKL_VRING_DESC_F_NEXT: u32 = 1;
    pub const LKL_VRING_DESC_F_WRITE: u32 = 2;
    pub const LKL_VRING_DESC_F_INDIRECT: u32 = 4;
    pub const LKL_VRING_PACKED_DESC_F_AVAIL: u32 = 7;
    pub const LKL_VRING_PACKED_DESC_F_USED: u32 = 15;
    pub const LKL_VRING_USED_F_NO_NOTIFY: u32 = 1;
    pub const LKL_VRING_AVAIL_F_NO_INTERRUPT: u32 = 1;
    pub const LKL_VRING_PACKED_EVENT_FLAG_ENABLE: u32 = 0;
    pub const LKL_VRING_PACKED_EVENT_FLAG_DISABLE: u32 = 1;
    pub const LKL_VRING_PACKED_EVENT_FLAG_DESC: u32 = 2;
    pub const LKL_VRING_PACKED_EVENT_F_WRAP_CTR: u32 = 15;
    pub const LKL_VIRTIO_RING_F_INDIRECT_DESC: u32 = 28;
    pub const LKL_VIRTIO_RING_F_EVENT_IDX: u32 = 29;
    pub const LKL_VRING_AVAIL_ALIGN_SIZE: u32 = 2;
    pub const LKL_VRING_USED_ALIGN_SIZE: u32 = 4;
    pub const LKL_VRING_DESC_ALIGN_SIZE: u32 = 16;
    pub const LKL_TC_PRIO_BESTEFFORT: u32 = 0;
    pub const LKL_TC_PRIO_FILLER: u32 = 1;
    pub const LKL_TC_PRIO_BULK: u32 = 2;
    pub const LKL_TC_PRIO_INTERACTIVE_BULK: u32 = 4;
    pub const LKL_TC_PRIO_INTERACTIVE: u32 = 6;
    pub const LKL_TC_PRIO_CONTROL: u32 = 7;
    pub const LKL_TC_PRIO_MAX: u32 = 15;
    pub const LKL_TC_H_MAJ_MASK: u32 = 4294901760;
    pub const LKL_TC_H_MIN_MASK: u32 = 65535;
    pub const LKL_TC_H_UNSPEC: u32 = 0;
    pub const LKL_TC_H_ROOT: u32 = 4294967295;
    pub const LKL_TC_H_INGRESS: u32 = 4294967281;
    pub const LKL_TC_H_CLSACT: u32 = 4294967281;
    pub const LKL_TC_H_MIN_PRIORITY: u32 = 65504;
    pub const LKL_TC_H_MIN_INGRESS: u32 = 65522;
    pub const LKL_TC_H_MIN_EGRESS: u32 = 65523;
    pub const LKL_TC_LINKLAYER_MASK: u32 = 15;
    pub const LKL_TC_RTAB_SIZE: u32 = 1024;
    pub const LKL_SKBPRIO_MAX_PRIORITY: u32 = 64;
    pub const LKL_TCQ_PRIO_BANDS: u32 = 16;
    pub const LKL_TCQ_MIN_PRIO_BANDS: u32 = 2;
    pub const LKL_TCQ_PLUG_BUFFER: u32 = 0;
    pub const LKL_TCQ_PLUG_RELEASE_ONE: u32 = 1;
    pub const LKL_TCQ_PLUG_RELEASE_INDEFINITE: u32 = 2;
    pub const LKL_TCQ_PLUG_LIMIT: u32 = 3;
    pub const LKL_TC_RED_ECN: u32 = 1;
    pub const LKL_TC_RED_HARDDROP: u32 = 2;
    pub const LKL_TC_RED_ADAPTATIVE: u32 = 4;
    pub const LKL_TC_RED_NODROP: u32 = 8;
    pub const LKL_TC_RED_HISTORIC_FLAGS: u32 = 7;
    pub const lkl_MAX_DPs: u32 = 16;
    pub const LKL_TC_HTB_NUMPRIO: u32 = 8;
    pub const LKL_TC_HTB_MAXDEPTH: u32 = 8;
    pub const LKL_TC_HTB_PROTOVER: u32 = 3;
    pub const LKL_TC_CBQ_MAXPRIO: u32 = 8;
    pub const LKL_TC_CBQ_MAXLEVEL: u32 = 8;
    pub const LKL_TC_CBQ_DEF_EWMA: u32 = 5;
    pub const LKL_TCF_CBQ_LSS_BOUNDED: u32 = 1;
    pub const LKL_TCF_CBQ_LSS_ISOLATED: u32 = 2;
    pub const LKL_TCF_CBQ_LSS_FLAGS: u32 = 1;
    pub const LKL_TCF_CBQ_LSS_EWMA: u32 = 2;
    pub const LKL_TCF_CBQ_LSS_MAXIDLE: u32 = 4;
    pub const LKL_TCF_CBQ_LSS_MINIDLE: u32 = 8;
    pub const LKL_TCF_CBQ_LSS_OFFTIME: u32 = 16;
    pub const LKL_TCF_CBQ_LSS_AVPKT: u32 = 32;
    pub const LKL_TC_CBQ_OVL_CLASSIC: u32 = 0;
    pub const LKL_TC_CBQ_OVL_DELAY: u32 = 1;
    pub const LKL_TC_CBQ_OVL_LOWPRIO: u32 = 2;
    pub const LKL_TC_CBQ_OVL_DROP: u32 = 3;
    pub const LKL_TC_CBQ_OVL_RCLASSIC: u32 = 4;
    pub const LKL_NETEM_DIST_SCALE: u32 = 8192;
    pub const LKL_NETEM_DIST_MAX: u32 = 16384;
    pub const LKL_TC_QOPT_BITMASK: u32 = 15;
    pub const LKL_TC_QOPT_MAX_QUEUE: u32 = 16;
    pub const LKL_TC_MQPRIO_F_MODE: u32 = 1;
    pub const LKL_TC_MQPRIO_F_SHAPER: u32 = 2;
    pub const LKL_TC_MQPRIO_F_MIN_RATE: u32 = 4;
    pub const LKL_TC_MQPRIO_F_MAX_RATE: u32 = 8;
    pub const LKL_SFB_MAX_PROB: u32 = 65535;
    pub const LKL_TC_CAKE_MAX_TINS: u32 = 8;
    pub const LKL_TCQ_ETS_MAX_BANDS: u32 = 16;
    pub const LKL_IORING_SETUP_IOPOLL: u32 = 1;
    pub const LKL_IORING_SETUP_SQPOLL: u32 = 2;
    pub const LKL_IORING_SETUP_SQ_AFF: u32 = 4;
    pub const LKL_IORING_SETUP_CQSIZE: u32 = 8;
    pub const LKL_IORING_SETUP_CLAMP: u32 = 16;
    pub const LKL_IORING_SETUP_ATTACH_WQ: u32 = 32;
    pub const LKL_IORING_SETUP_R_DISABLED: u32 = 64;
    pub const LKL_IORING_FSYNC_DATASYNC: u32 = 1;
    pub const LKL_IORING_TIMEOUT_ABS: u32 = 1;
    pub const LKL_SPLICE_F_FD_IN_FIXED: u32 = 2147483648;
    pub const LKL_IORING_CQE_F_BUFFER: u32 = 1;
    pub const LKL_IORING_OFF_SQ_RING: u32 = 0;
    pub const LKL_IORING_OFF_CQ_RING: u32 = 134217728;
    pub const LKL_IORING_OFF_SQES: u32 = 268435456;
    pub const LKL_IORING_SQ_NEED_WAKEUP: u32 = 1;
    pub const LKL_IORING_SQ_CQ_OVERFLOW: u32 = 2;
    pub const LKL_IORING_CQ_EVENTFD_DISABLED: u32 = 1;
    pub const LKL_IORING_ENTER_GETEVENTS: u32 = 1;
    pub const LKL_IORING_ENTER_SQ_WAKEUP: u32 = 2;
    pub const LKL_IORING_ENTER_SQ_WAIT: u32 = 4;
    pub const LKL_IORING_FEAT_SINGLE_MMAP: u32 = 1;
    pub const LKL_IORING_FEAT_NODROP: u32 = 2;
    pub const LKL_IORING_FEAT_SUBMIT_STABLE: u32 = 4;
    pub const LKL_IORING_FEAT_RW_CUR_POS: u32 = 8;
    pub const LKL_IORING_FEAT_CUR_PERSONALITY: u32 = 16;
    pub const LKL_IORING_FEAT_FAST_POLL: u32 = 32;
    pub const LKL_IORING_FEAT_POLL_32BITS: u32 = 64;
    pub const LKL_IO_URING_OP_SUPPORTED: u32 = 1;
    pub const LKL_AF_UNSPEC: u32 = 0;
    pub const LKL_AF_UNIX: u32 = 1;
    pub const LKL_AF_LOCAL: u32 = 1;
    pub const LKL_AF_INET: u32 = 2;
    pub const LKL_AF_AX25: u32 = 3;
    pub const LKL_AF_IPX: u32 = 4;
    pub const LKL_AF_APPLETALK: u32 = 5;
    pub const LKL_AF_NETROM: u32 = 6;
    pub const LKL_AF_BRIDGE: u32 = 7;
    pub const LKL_AF_ATMPVC: u32 = 8;
    pub const LKL_AF_X25: u32 = 9;
    pub const LKL_AF_INET6: u32 = 10;
    pub const LKL_AF_ROSE: u32 = 11;
    pub const lkl_AF_DECnet: u32 = 12;
    pub const LKL_AF_NETBEUI: u32 = 13;
    pub const LKL_AF_SECURITY: u32 = 14;
    pub const LKL_AF_KEY: u32 = 15;
    pub const LKL_AF_NETLINK: u32 = 16;
    pub const LKL_AF_ROUTE: u32 = 16;
    pub const LKL_AF_PACKET: u32 = 17;
    pub const LKL_AF_ASH: u32 = 18;
    pub const LKL_AF_ECONET: u32 = 19;
    pub const LKL_AF_ATMSVC: u32 = 20;
    pub const LKL_AF_RDS: u32 = 21;
    pub const LKL_AF_SNA: u32 = 22;
    pub const LKL_AF_IRDA: u32 = 23;
    pub const LKL_AF_PPPOX: u32 = 24;
    pub const LKL_AF_WANPIPE: u32 = 25;
    pub const LKL_AF_LLC: u32 = 26;
    pub const LKL_AF_IB: u32 = 27;
    pub const LKL_AF_MPLS: u32 = 28;
    pub const LKL_AF_CAN: u32 = 29;
    pub const LKL_AF_TIPC: u32 = 30;
    pub const LKL_AF_BLUETOOTH: u32 = 31;
    pub const LKL_AF_IUCV: u32 = 32;
    pub const LKL_AF_RXRPC: u32 = 33;
    pub const LKL_AF_ISDN: u32 = 34;
    pub const LKL_AF_PHONET: u32 = 35;
    pub const LKL_AF_IEEE802154: u32 = 36;
    pub const LKL_AF_CAIF: u32 = 37;
    pub const LKL_AF_ALG: u32 = 38;
    pub const LKL_AF_NFC: u32 = 39;
    pub const LKL_AF_VSOCK: u32 = 40;
    pub const LKL_SOCK_STREAM: u32 = 1;
    pub const LKL_SOCK_DGRAM: u32 = 2;
    pub const LKL_SOCK_RAW: u32 = 3;
    pub const LKL_SOCK_RDM: u32 = 4;
    pub const LKL_SOCK_SEQPACKET: u32 = 5;
    pub const LKL_SOCK_DCCP: u32 = 6;
    pub const LKL_SOCK_PACKET: u32 = 10;
    pub const LKL_MSG_TRUNC: u32 = 32;
    pub const LKL_MSG_DONTWAIT: u32 = 64;
    pub type __lkl__s8 = ::std::os::raw::c_schar;
    pub type __lkl__u8 = ::std::os::raw::c_uchar;
    pub type __lkl__s16 = ::std::os::raw::c_short;
    pub type __lkl__u16 = ::std::os::raw::c_ushort;
    pub type __lkl__s32 = ::std::os::raw::c_int;
    pub type __lkl__u32 = ::std::os::raw::c_uint;
    pub type __lkl__s64 = ::std::os::raw::c_longlong;
    pub type __lkl__u64 = ::std::os::raw::c_ulonglong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_fd_set {
        pub fds_bits: [::std::os::raw::c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_fd_set() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(__lkl__kernel_fd_set))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_fd_set))
        );
        fn test_field_fds_bits() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_fd_set>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_fd_set),
                    "::",
                    stringify!(fds_bits)
                )
            );
        }
        test_field_fds_bits();
    }
    pub type __lkl__kernel_sighandler_t =
        ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
    pub type __lkl__kernel_key_t = ::std::os::raw::c_int;
    pub type __lkl__kernel_mqd_t = ::std::os::raw::c_int;
    pub type __lkl__kernel_long_t = ::std::os::raw::c_long;
    pub type __lkl__kernel_ulong_t = ::std::os::raw::c_ulong;
    pub type __lkl__kernel_ino_t = __lkl__kernel_ulong_t;
    pub type __lkl__kernel_mode_t = ::std::os::raw::c_uint;
    pub type __lkl__kernel_pid_t = ::std::os::raw::c_int;
    pub type __lkl__kernel_ipc_pid_t = ::std::os::raw::c_int;
    pub type __lkl__kernel_uid_t = ::std::os::raw::c_uint;
    pub type __lkl__kernel_gid_t = ::std::os::raw::c_uint;
    pub type __lkl__kernel_suseconds_t = __lkl__kernel_long_t;
    pub type __lkl__kernel_daddr_t = ::std::os::raw::c_int;
    pub type __lkl__kernel_uid32_t = ::std::os::raw::c_uint;
    pub type __lkl__kernel_gid32_t = ::std::os::raw::c_uint;
    pub type __lkl__kernel_old_uid_t = __lkl__kernel_uid_t;
    pub type __lkl__kernel_old_gid_t = __lkl__kernel_gid_t;
    pub type __lkl__kernel_old_dev_t = ::std::os::raw::c_uint;
    pub type __lkl__kernel_size_t = __lkl__kernel_ulong_t;
    pub type __lkl__kernel_ssize_t = __lkl__kernel_long_t;
    pub type __lkl__kernel_ptrdiff_t = __lkl__kernel_long_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_fsid_t {
        pub val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__lkl__kernel_fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_fsid_t))
        );
        fn test_field_val() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_fsid_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_fsid_t),
                    "::",
                    stringify!(val)
                )
            );
        }
        test_field_val();
    }
    pub type __lkl__kernel_off_t = __lkl__kernel_long_t;
    pub type __lkl__kernel_loff_t = ::std::os::raw::c_longlong;
    pub type __lkl__kernel_old_time_t = __lkl__kernel_long_t;
    pub type __lkl__kernel_time_t = __lkl__kernel_long_t;
    pub type __lkl__kernel_time64_t = ::std::os::raw::c_longlong;
    pub type __lkl__kernel_clock_t = __lkl__kernel_long_t;
    pub type __lkl__kernel_timer_t = ::std::os::raw::c_int;
    pub type __lkl__kernel_clockid_t = ::std::os::raw::c_int;
    pub type __lkl__kernel_caddr_t = *mut ::std::os::raw::c_char;
    pub type __lkl__kernel_uid16_t = ::std::os::raw::c_ushort;
    pub type __lkl__kernel_gid16_t = ::std::os::raw::c_ushort;
    pub type __lkl__le16 = __lkl__u16;
    pub type __lkl__be16 = __lkl__u16;
    pub type __lkl__le32 = __lkl__u32;
    pub type __lkl__be32 = __lkl__u32;
    pub type __lkl__le64 = __lkl__u64;
    pub type __lkl__be64 = __lkl__u64;
    pub type __lkl__sum16 = __lkl__u16;
    pub type __lkl__wsum = __lkl__u32;
    pub type __lkl__poll_t = ::std::os::raw::c_uint;
    pub type lkl_qid_t = __lkl__kernel_uid32_t;
    pub type lkl_fd_set = __lkl__kernel_fd_set;
    pub type lkl_mode_t = __lkl__kernel_mode_t;
    pub type lkl_umode_t = ::std::os::raw::c_ushort;
    pub type lkl_nlink_t = __lkl__u32;
    pub type lkl_off_t = __lkl__kernel_off_t;
    pub type lkl_pid_t = __lkl__kernel_pid_t;
    pub type lkl_key_t = __lkl__kernel_key_t;
    pub type lkl_suseconds_t = __lkl__kernel_suseconds_t;
    pub type lkl_timer_t = __lkl__kernel_timer_t;
    pub type lkl_clockid_t = __lkl__kernel_clockid_t;
    pub type lkl_mqd_t = __lkl__kernel_mqd_t;
    pub type lkl_uid_t = __lkl__kernel_uid32_t;
    pub type lkl_gid_t = __lkl__kernel_gid32_t;
    pub type lkl_uid16_t = __lkl__kernel_uid16_t;
    pub type lkl_gid16_t = __lkl__kernel_gid16_t;
    pub type lkl_uintptr_t = ::std::os::raw::c_ulong;
    pub type lkl_loff_t = __lkl__kernel_loff_t;
    pub type lkl_size_t = __lkl__kernel_size_t;
    pub type lkl_ssize_t = __lkl__kernel_ssize_t;
    pub type lkl_time_t = __lkl__kernel_time_t;
    pub type lkl_clock_t = __lkl__kernel_clock_t;
    pub type lkl_u32 = __lkl__u32;
    pub type lkl_s32 = __lkl__s32;
    pub type lkl_u64 = __lkl__u64;
    pub type lkl_s64 = __lkl__s64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_timespec {
        pub tv_sec: __lkl__kernel_time64_t,
        pub tv_nsec: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_timespec() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_timespec>(),
            16usize,
            concat!("Size of: ", stringify!(__lkl__kernel_timespec))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_timespec))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timespec),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timespec),
                    "::",
                    stringify!(tv_nsec)
                )
            );
        }
        test_field_tv_nsec();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_itimerspec {
        pub it_interval: __lkl__kernel_timespec,
        pub it_value: __lkl__kernel_timespec,
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_itimerspec() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_itimerspec>(),
            32usize,
            concat!("Size of: ", stringify!(__lkl__kernel_itimerspec))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_itimerspec>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_itimerspec))
        );
        fn test_field_it_interval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_itimerspec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_itimerspec),
                    "::",
                    stringify!(it_interval)
                )
            );
        }
        test_field_it_interval();
        fn test_field_it_value() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_itimerspec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_itimerspec),
                    "::",
                    stringify!(it_value)
                )
            );
        }
        test_field_it_value();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_old_timeval {
        pub tv_sec: __lkl__kernel_long_t,
        pub tv_usec: __lkl__kernel_long_t,
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_old_timeval() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_old_timeval>(),
            16usize,
            concat!("Size of: ", stringify!(__lkl__kernel_old_timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_old_timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_old_timeval))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_old_timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_old_timeval),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_usec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_old_timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_old_timeval),
                    "::",
                    stringify!(tv_usec)
                )
            );
        }
        test_field_tv_usec();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_old_timespec {
        pub tv_sec: __lkl__kernel_old_time_t,
        pub tv_nsec: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_old_timespec() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_old_timespec>(),
            16usize,
            concat!("Size of: ", stringify!(__lkl__kernel_old_timespec))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_old_timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_old_timespec))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_old_timespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_old_timespec),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_old_timespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_old_timespec),
                    "::",
                    stringify!(tv_nsec)
                )
            );
        }
        test_field_tv_nsec();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_old_itimerval {
        pub it_interval: __lkl__kernel_old_timeval,
        pub it_value: __lkl__kernel_old_timeval,
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_old_itimerval() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_old_itimerval>(),
            32usize,
            concat!("Size of: ", stringify!(__lkl__kernel_old_itimerval))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_old_itimerval>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_old_itimerval))
        );
        fn test_field_it_interval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_old_itimerval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_old_itimerval),
                    "::",
                    stringify!(it_interval)
                )
            );
        }
        test_field_it_interval();
        fn test_field_it_value() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_old_itimerval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_old_itimerval),
                    "::",
                    stringify!(it_value)
                )
            );
        }
        test_field_it_value();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_sock_timeval {
        pub tv_sec: __lkl__s64,
        pub tv_usec: __lkl__s64,
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_sock_timeval() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_sock_timeval>(),
            16usize,
            concat!("Size of: ", stringify!(__lkl__kernel_sock_timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_sock_timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_sock_timeval))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_sock_timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_sock_timeval),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_usec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_sock_timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_sock_timeval),
                    "::",
                    stringify!(tv_usec)
                )
            );
        }
        test_field_tv_usec();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_timespec {
        pub tv_sec: __lkl__kernel_old_time_t,
        pub tv_nsec: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_lkl_timespec() {
        assert_eq!(
            ::std::mem::size_of::<lkl_timespec>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_timespec))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_timespec))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timespec),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timespec),
                    "::",
                    stringify!(tv_nsec)
                )
            );
        }
        test_field_tv_nsec();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_timeval {
        pub tv_sec: __lkl__kernel_old_time_t,
        pub tv_usec: __lkl__kernel_suseconds_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_timeval() {
        assert_eq!(
            ::std::mem::size_of::<lkl_timeval>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_timeval))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timeval),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_usec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timeval),
                    "::",
                    stringify!(tv_usec)
                )
            );
        }
        test_field_tv_usec();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_itimerspec {
        pub it_interval: lkl_timespec,
        pub it_value: lkl_timespec,
    }
    #[test]
    fn bindgen_test_layout_lkl_itimerspec() {
        assert_eq!(
            ::std::mem::size_of::<lkl_itimerspec>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_itimerspec))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_itimerspec>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_itimerspec))
        );
        fn test_field_it_interval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_itimerspec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_itimerspec),
                    "::",
                    stringify!(it_interval)
                )
            );
        }
        test_field_it_interval();
        fn test_field_it_value() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_itimerspec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_itimerspec),
                    "::",
                    stringify!(it_value)
                )
            );
        }
        test_field_it_value();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_itimerval {
        pub it_interval: lkl_timeval,
        pub it_value: lkl_timeval,
    }
    #[test]
    fn bindgen_test_layout_lkl_itimerval() {
        assert_eq!(
            ::std::mem::size_of::<lkl_itimerval>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_itimerval))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_itimerval>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_itimerval))
        );
        fn test_field_it_interval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_itimerval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_itimerval),
                    "::",
                    stringify!(it_interval)
                )
            );
        }
        test_field_it_interval();
        fn test_field_it_value() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_itimerval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_itimerval),
                    "::",
                    stringify!(it_value)
                )
            );
        }
        test_field_it_value();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_timezone {
        pub tz_minuteswest: ::std::os::raw::c_int,
        pub tz_dsttime: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_lkl_timezone() {
        assert_eq!(
            ::std::mem::size_of::<lkl_timezone>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_timezone))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_timezone>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_timezone))
        );
        fn test_field_tz_minuteswest() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timezone>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timezone),
                    "::",
                    stringify!(tz_minuteswest)
                )
            );
        }
        test_field_tz_minuteswest();
        fn test_field_tz_dsttime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timezone>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timezone),
                    "::",
                    stringify!(tz_dsttime)
                )
            );
        }
        test_field_tz_dsttime();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tms {
        pub tms_utime: __lkl__kernel_clock_t,
        pub tms_stime: __lkl__kernel_clock_t,
        pub tms_cutime: __lkl__kernel_clock_t,
        pub tms_cstime: __lkl__kernel_clock_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_tms() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tms>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_tms))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tms>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_tms))
        );
        fn test_field_tms_utime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tms>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tms_utime) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tms),
                    "::",
                    stringify!(tms_utime)
                )
            );
        }
        test_field_tms_utime();
        fn test_field_tms_stime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tms>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tms_stime) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tms),
                    "::",
                    stringify!(tms_stime)
                )
            );
        }
        test_field_tms_stime();
        fn test_field_tms_cutime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tms>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tms_cutime) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tms),
                    "::",
                    stringify!(tms_cutime)
                )
            );
        }
        test_field_tms_cutime();
        fn test_field_tms_cstime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tms>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tms_cstime) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tms),
                    "::",
                    stringify!(tms_cstime)
                )
            );
        }
        test_field_tms_cstime();
    }
    /*
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_timex {
        pub modes: ::std::os::raw::c_uint,
        pub offset: __lkl__kernel_long_t,
        pub freq: __lkl__kernel_long_t,
        pub maxerror: __lkl__kernel_long_t,
        pub esterror: __lkl__kernel_long_t,
        pub status: ::std::os::raw::c_int,
        pub constant: __lkl__kernel_long_t,
        pub precision: __lkl__kernel_long_t,
        pub tolerance: __lkl__kernel_long_t,
        pub time: lkl_timeval,
        pub tick: __lkl__kernel_long_t,
        pub ppsfreq: __lkl__kernel_long_t,
        pub jitter: __lkl__kernel_long_t,
        pub shift: ::std::os::raw::c_int,
        pub stabil: __lkl__kernel_long_t,
        pub jitcnt: __lkl__kernel_long_t,
        pub calcnt: __lkl__kernel_long_t,
        pub errcnt: __lkl__kernel_long_t,
        pub stbcnt: __lkl__kernel_long_t,
        pub tai: ::std::os::raw::c_int,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_timex() {
        assert_eq!(
            ::std::mem::size_of::<lkl_timex>(),
            208usize,
            concat!("Size of: ", stringify!(lkl_timex))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_timex>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_timex))
        );
        fn test_field_modes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).modes) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(modes)
                )
            );
        }
        test_field_modes();
        fn test_field_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(offset)
                )
            );
        }
        test_field_offset();
        fn test_field_freq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(freq)
                )
            );
        }
        test_field_freq();
        fn test_field_maxerror() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).maxerror) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(maxerror)
                )
            );
        }
        test_field_maxerror();
        fn test_field_esterror() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).esterror) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(esterror)
                )
            );
        }
        test_field_esterror();
        fn test_field_status() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(status)
                )
            );
        }
        test_field_status();
        fn test_field_constant() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(constant)
                )
            );
        }
        test_field_constant();
        fn test_field_precision() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).precision) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(precision)
                )
            );
        }
        test_field_precision();
        fn test_field_tolerance() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tolerance) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(tolerance)
                )
            );
        }
        test_field_tolerance();
        fn test_field_time() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(time)
                )
            );
        }
        test_field_time();
        fn test_field_tick() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tick) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(tick)
                )
            );
        }
        test_field_tick();
        fn test_field_ppsfreq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ppsfreq) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(ppsfreq)
                )
            );
        }
        test_field_ppsfreq();
        fn test_field_jitter() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jitter) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(jitter)
                )
            );
        }
        test_field_jitter();
        fn test_field_shift() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(shift)
                )
            );
        }
        test_field_shift();
        fn test_field_stabil() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stabil) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(stabil)
                )
            );
        }
        test_field_stabil();
        fn test_field_jitcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jitcnt) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(jitcnt)
                )
            );
        }
        test_field_jitcnt();
        fn test_field_calcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).calcnt) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(calcnt)
                )
            );
        }
        test_field_calcnt();
        fn test_field_errcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).errcnt) as usize - ptr as usize
                },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(errcnt)
                )
            );
        }
        test_field_errcnt();
        fn test_field_stbcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stbcnt) as usize - ptr as usize
                },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(stbcnt)
                )
            );
        }
        test_field_stbcnt();
        fn test_field_tai() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tai) as usize - ptr as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_timex),
                    "::",
                    stringify!(tai)
                )
            );
        }
        test_field_tai();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_timex_timeval {
        pub tv_sec: __lkl__kernel_time64_t,
        pub tv_usec: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_timex_timeval() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_timex_timeval>(),
            16usize,
            concat!("Size of: ", stringify!(__lkl__kernel_timex_timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_timex_timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_timex_timeval))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex_timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex_timeval),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_usec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex_timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex_timeval),
                    "::",
                    stringify!(tv_usec)
                )
            );
        }
        test_field_tv_usec();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_timex {
        pub modes: ::std::os::raw::c_uint,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
        pub offset: ::std::os::raw::c_longlong,
        pub freq: ::std::os::raw::c_longlong,
        pub maxerror: ::std::os::raw::c_longlong,
        pub esterror: ::std::os::raw::c_longlong,
        pub status: ::std::os::raw::c_int,
        pub _bitfield_align_2: [u8; 0],
        pub _bitfield_2: __BindgenBitfieldUnit<[u8; 4usize]>,
        pub constant: ::std::os::raw::c_longlong,
        pub precision: ::std::os::raw::c_longlong,
        pub tolerance: ::std::os::raw::c_longlong,
        pub time: __lkl__kernel_timex_timeval,
        pub tick: ::std::os::raw::c_longlong,
        pub ppsfreq: ::std::os::raw::c_longlong,
        pub jitter: ::std::os::raw::c_longlong,
        pub shift: ::std::os::raw::c_int,
        pub _bitfield_align_3: [u8; 0],
        pub _bitfield_3: __BindgenBitfieldUnit<[u8; 4usize]>,
        pub stabil: ::std::os::raw::c_longlong,
        pub jitcnt: ::std::os::raw::c_longlong,
        pub calcnt: ::std::os::raw::c_longlong,
        pub errcnt: ::std::os::raw::c_longlong,
        pub stbcnt: ::std::os::raw::c_longlong,
        pub tai: ::std::os::raw::c_int,
        pub _bitfield_align_4: [u8; 0],
        pub _bitfield_4: __BindgenBitfieldUnit<[u8; 44usize]>,
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_timex() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_timex>(),
            208usize,
            concat!("Size of: ", stringify!(__lkl__kernel_timex))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_timex>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_timex))
        );
        fn test_field_modes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).modes) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(modes)
                )
            );
        }
        test_field_modes();
        fn test_field_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(offset)
                )
            );
        }
        test_field_offset();
        fn test_field_freq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(freq)
                )
            );
        }
        test_field_freq();
        fn test_field_maxerror() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).maxerror) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(maxerror)
                )
            );
        }
        test_field_maxerror();
        fn test_field_esterror() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).esterror) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(esterror)
                )
            );
        }
        test_field_esterror();
        fn test_field_status() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(status)
                )
            );
        }
        test_field_status();
        fn test_field_constant() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(constant)
                )
            );
        }
        test_field_constant();
        fn test_field_precision() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).precision) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(precision)
                )
            );
        }
        test_field_precision();
        fn test_field_tolerance() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tolerance) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(tolerance)
                )
            );
        }
        test_field_tolerance();
        fn test_field_time() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(time)
                )
            );
        }
        test_field_time();
        fn test_field_tick() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tick) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(tick)
                )
            );
        }
        test_field_tick();
        fn test_field_ppsfreq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ppsfreq) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(ppsfreq)
                )
            );
        }
        test_field_ppsfreq();
        fn test_field_jitter() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jitter) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(jitter)
                )
            );
        }
        test_field_jitter();
        fn test_field_shift() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(shift)
                )
            );
        }
        test_field_shift();
        fn test_field_stabil() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stabil) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(stabil)
                )
            );
        }
        test_field_stabil();
        fn test_field_jitcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jitcnt) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(jitcnt)
                )
            );
        }
        test_field_jitcnt();
        fn test_field_calcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).calcnt) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(calcnt)
                )
            );
        }
        test_field_calcnt();
        fn test_field_errcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).errcnt) as usize - ptr as usize
                },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(errcnt)
                )
            );
        }
        test_field_errcnt();
        fn test_field_stbcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stbcnt) as usize - ptr as usize
                },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(stbcnt)
                )
            );
        }
        test_field_stbcnt();
        fn test_field_tai() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__kernel_timex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tai) as usize - ptr as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_timex),
                    "::",
                    stringify!(tai)
                )
            );
        }
        test_field_tai();
    }
    impl __lkl__kernel_timex {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
            __bindgen_bitfield_unit
        }
        #[inline]
        pub fn new_bitfield_2() -> __BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
            __bindgen_bitfield_unit
        }
        #[inline]
        pub fn new_bitfield_3() -> __BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__user_cap_header_struct {
        pub version: __lkl__u32,
        pub pid: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___lkl__user_cap_header_struct() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__user_cap_header_struct>(),
            8usize,
            concat!("Size of: ", stringify!(__lkl__user_cap_header_struct))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__user_cap_header_struct>(),
            4usize,
            concat!("Alignment of ", stringify!(__lkl__user_cap_header_struct))
        );
        fn test_field_version() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__user_cap_header_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__user_cap_header_struct),
                    "::",
                    stringify!(version)
                )
            );
        }
        test_field_version();
        fn test_field_pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__user_cap_header_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__user_cap_header_struct),
                    "::",
                    stringify!(pid)
                )
            );
        }
        test_field_pid();
    }
    pub type lkl_cap_user_header_t = *mut __lkl__user_cap_header_struct;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__user_cap_data_struct {
        pub effective: __lkl__u32,
        pub permitted: __lkl__u32,
        pub inheritable: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout___lkl__user_cap_data_struct() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__user_cap_data_struct>(),
            12usize,
            concat!("Size of: ", stringify!(__lkl__user_cap_data_struct))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__user_cap_data_struct>(),
            4usize,
            concat!("Alignment of ", stringify!(__lkl__user_cap_data_struct))
        );
        fn test_field_effective() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__user_cap_data_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).effective) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__user_cap_data_struct),
                    "::",
                    stringify!(effective)
                )
            );
        }
        test_field_effective();
        fn test_field_permitted() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__user_cap_data_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).permitted) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__user_cap_data_struct),
                    "::",
                    stringify!(permitted)
                )
            );
        }
        test_field_permitted();
        fn test_field_inheritable() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__user_cap_data_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).inheritable) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__user_cap_data_struct),
                    "::",
                    stringify!(inheritable)
                )
            );
        }
        test_field_inheritable();
    }
    pub type lkl_cap_user_data_t = *mut __lkl__user_cap_data_struct;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_vfs_cap_data {
        pub magic_etc: __lkl__le32,
        pub data: [lkl_vfs_cap_data__bindgen_ty_1; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_vfs_cap_data__bindgen_ty_1 {
        pub permitted: __lkl__le32,
        pub inheritable: __lkl__le32,
    }
    #[test]
    fn bindgen_test_layout_lkl_vfs_cap_data__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vfs_cap_data__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_vfs_cap_data__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vfs_cap_data__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_vfs_cap_data__bindgen_ty_1))
        );
        fn test_field_permitted() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vfs_cap_data__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).permitted) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vfs_cap_data__bindgen_ty_1),
                    "::",
                    stringify!(permitted)
                )
            );
        }
        test_field_permitted();
        fn test_field_inheritable() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vfs_cap_data__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).inheritable) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vfs_cap_data__bindgen_ty_1),
                    "::",
                    stringify!(inheritable)
                )
            );
        }
        test_field_inheritable();
    }
    #[test]
    fn bindgen_test_layout_lkl_vfs_cap_data() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vfs_cap_data>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_vfs_cap_data))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vfs_cap_data>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_vfs_cap_data))
        );
        fn test_field_magic_etc() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vfs_cap_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).magic_etc) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vfs_cap_data),
                    "::",
                    stringify!(magic_etc)
                )
            );
        }
        test_field_magic_etc();
        fn test_field_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vfs_cap_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vfs_cap_data),
                    "::",
                    stringify!(data)
                )
            );
        }
        test_field_data();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_vfs_ns_cap_data {
        pub magic_etc: __lkl__le32,
        pub data: [lkl_vfs_ns_cap_data__bindgen_ty_1; 2usize],
        pub rootid: __lkl__le32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_vfs_ns_cap_data__bindgen_ty_1 {
        pub permitted: __lkl__le32,
        pub inheritable: __lkl__le32,
    }
    #[test]
    fn bindgen_test_layout_lkl_vfs_ns_cap_data__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vfs_ns_cap_data__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_vfs_ns_cap_data__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vfs_ns_cap_data__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_vfs_ns_cap_data__bindgen_ty_1)
            )
        );
        fn test_field_permitted() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vfs_ns_cap_data__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).permitted) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vfs_ns_cap_data__bindgen_ty_1),
                    "::",
                    stringify!(permitted)
                )
            );
        }
        test_field_permitted();
        fn test_field_inheritable() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vfs_ns_cap_data__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).inheritable) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vfs_ns_cap_data__bindgen_ty_1),
                    "::",
                    stringify!(inheritable)
                )
            );
        }
        test_field_inheritable();
    }
    #[test]
    fn bindgen_test_layout_lkl_vfs_ns_cap_data() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vfs_ns_cap_data>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_vfs_ns_cap_data))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vfs_ns_cap_data>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_vfs_ns_cap_data))
        );
        fn test_field_magic_etc() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vfs_ns_cap_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).magic_etc) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vfs_ns_cap_data),
                    "::",
                    stringify!(magic_etc)
                )
            );
        }
        test_field_magic_etc();
        fn test_field_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vfs_ns_cap_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vfs_ns_cap_data),
                    "::",
                    stringify!(data)
                )
            );
        }
        test_field_data();
        fn test_field_rootid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vfs_ns_cap_data>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rootid) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vfs_ns_cap_data),
                    "::",
                    stringify!(rootid)
                )
            );
        }
        test_field_rootid();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_statx_timestamp {
        pub tv_sec: __lkl__s64,
        pub tv_nsec: __lkl__u32,
        pub __reserved: __lkl__s32,
    }
    #[test]
    fn bindgen_test_layout_lkl_statx_timestamp() {
        assert_eq!(
            ::std::mem::size_of::<lkl_statx_timestamp>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_statx_timestamp))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_statx_timestamp>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_statx_timestamp))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx_timestamp>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx_timestamp),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx_timestamp>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx_timestamp),
                    "::",
                    stringify!(tv_nsec)
                )
            );
        }
        test_field_tv_nsec();
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx_timestamp>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx_timestamp),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_statx {
        pub stx_mask: __lkl__u32,
        pub stx_blksize: __lkl__u32,
        pub stx_attributes: __lkl__u64,
        pub stx_nlink: __lkl__u32,
        pub stx_uid: __lkl__u32,
        pub stx_gid: __lkl__u32,
        pub stx_mode: __lkl__u16,
        pub __spare0: [__lkl__u16; 1usize],
        pub stx_ino: __lkl__u64,
        pub stx_size: __lkl__u64,
        pub stx_blocks: __lkl__u64,
        pub stx_attributes_mask: __lkl__u64,
        pub stx_atime: lkl_statx_timestamp,
        pub stx_btime: lkl_statx_timestamp,
        pub stx_ctime: lkl_statx_timestamp,
        pub stx_mtime: lkl_statx_timestamp,
        pub stx_rdev_major: __lkl__u32,
        pub stx_rdev_minor: __lkl__u32,
        pub stx_dev_major: __lkl__u32,
        pub stx_dev_minor: __lkl__u32,
        pub stx_mnt_id: __lkl__u64,
        pub __spare2: __lkl__u64,
        pub __spare3: [__lkl__u64; 12usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_statx() {
        assert_eq!(
            ::std::mem::size_of::<lkl_statx>(),
            256usize,
            concat!("Size of: ", stringify!(lkl_statx))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_statx>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_statx))
        );
        fn test_field_stx_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_mask) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_mask)
                )
            );
        }
        test_field_stx_mask();
        fn test_field_stx_blksize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_blksize) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_blksize)
                )
            );
        }
        test_field_stx_blksize();
        fn test_field_stx_attributes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_attributes) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_attributes)
                )
            );
        }
        test_field_stx_attributes();
        fn test_field_stx_nlink() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_nlink) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_nlink)
                )
            );
        }
        test_field_stx_nlink();
        fn test_field_stx_uid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_uid) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_uid)
                )
            );
        }
        test_field_stx_uid();
        fn test_field_stx_gid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_gid) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_gid)
                )
            );
        }
        test_field_stx_gid();
        fn test_field_stx_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_mode) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_mode)
                )
            );
        }
        test_field_stx_mode();
        fn test_field___spare0() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__spare0) as usize - ptr as usize
                },
                30usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(__spare0)
                )
            );
        }
        test_field___spare0();
        fn test_field_stx_ino() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_ino) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_ino)
                )
            );
        }
        test_field_stx_ino();
        fn test_field_stx_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_size) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_size)
                )
            );
        }
        test_field_stx_size();
        fn test_field_stx_blocks() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_blocks) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_blocks)
                )
            );
        }
        test_field_stx_blocks();
        fn test_field_stx_attributes_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_attributes_mask) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_attributes_mask)
                )
            );
        }
        test_field_stx_attributes_mask();
        fn test_field_stx_atime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_atime) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_atime)
                )
            );
        }
        test_field_stx_atime();
        fn test_field_stx_btime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_btime) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_btime)
                )
            );
        }
        test_field_stx_btime();
        fn test_field_stx_ctime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_ctime) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_ctime)
                )
            );
        }
        test_field_stx_ctime();
        fn test_field_stx_mtime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_mtime) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_mtime)
                )
            );
        }
        test_field_stx_mtime();
        fn test_field_stx_rdev_major() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_rdev_major) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_rdev_major)
                )
            );
        }
        test_field_stx_rdev_major();
        fn test_field_stx_rdev_minor() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_rdev_minor) as usize - ptr as usize
                },
                132usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_rdev_minor)
                )
            );
        }
        test_field_stx_rdev_minor();
        fn test_field_stx_dev_major() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_dev_major) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_dev_major)
                )
            );
        }
        test_field_stx_dev_major();
        fn test_field_stx_dev_minor() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_dev_minor) as usize - ptr as usize
                },
                140usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_dev_minor)
                )
            );
        }
        test_field_stx_dev_minor();
        fn test_field_stx_mnt_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stx_mnt_id) as usize - ptr as usize
                },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(stx_mnt_id)
                )
            );
        }
        test_field_stx_mnt_id();
        fn test_field___spare2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__spare2) as usize - ptr as usize
                },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(__spare2)
                )
            );
        }
        test_field___spare2();
        fn test_field___spare3() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__spare3) as usize - ptr as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statx),
                    "::",
                    stringify!(__spare3)
                )
            );
        }
        test_field___spare3();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_f_owner_ex {
        pub type_: ::std::os::raw::c_int,
        pub pid: __lkl__kernel_pid_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_f_owner_ex() {
        assert_eq!(
            ::std::mem::size_of::<lkl_f_owner_ex>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_f_owner_ex))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_f_owner_ex>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_f_owner_ex))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_f_owner_ex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_f_owner_ex),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_f_owner_ex>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_f_owner_ex),
                    "::",
                    stringify!(pid)
                )
            );
        }
        test_field_pid();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_flock {
        pub l_type: ::std::os::raw::c_short,
        pub l_whence: ::std::os::raw::c_short,
        pub l_start: __lkl__kernel_off_t,
        pub l_len: __lkl__kernel_off_t,
        pub l_pid: __lkl__kernel_pid_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_flock() {
        assert_eq!(
            ::std::mem::size_of::<lkl_flock>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_flock))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_flock>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_flock))
        );
        fn test_field_l_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_flock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_flock),
                    "::",
                    stringify!(l_type)
                )
            );
        }
        test_field_l_type();
        fn test_field_l_whence() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_flock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_flock),
                    "::",
                    stringify!(l_whence)
                )
            );
        }
        test_field_l_whence();
        fn test_field_l_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_flock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_flock),
                    "::",
                    stringify!(l_start)
                )
            );
        }
        test_field_l_start();
        fn test_field_l_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_flock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_flock),
                    "::",
                    stringify!(l_len)
                )
            );
        }
        test_field_l_len();
        fn test_field_l_pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_flock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_flock),
                    "::",
                    stringify!(l_pid)
                )
            );
        }
        test_field_l_pid();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_flock64 {
        pub l_type: ::std::os::raw::c_short,
        pub l_whence: ::std::os::raw::c_short,
        pub l_start: __lkl__kernel_loff_t,
        pub l_len: __lkl__kernel_loff_t,
        pub l_pid: __lkl__kernel_pid_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_flock64() {
        assert_eq!(
            ::std::mem::size_of::<lkl_flock64>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_flock64))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_flock64>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_flock64))
        );
        fn test_field_l_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_flock64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_flock64),
                    "::",
                    stringify!(l_type)
                )
            );
        }
        test_field_l_type();
        fn test_field_l_whence() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_flock64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_flock64),
                    "::",
                    stringify!(l_whence)
                )
            );
        }
        test_field_l_whence();
        fn test_field_l_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_flock64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_flock64),
                    "::",
                    stringify!(l_start)
                )
            );
        }
        test_field_l_start();
        fn test_field_l_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_flock64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_flock64),
                    "::",
                    stringify!(l_len)
                )
            );
        }
        test_field_l_len();
        fn test_field_l_pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_flock64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_flock64),
                    "::",
                    stringify!(l_pid)
                )
            );
        }
        test_field_l_pid();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_open_how {
        pub flags: __lkl__u64,
        pub mode: __lkl__u64,
        pub resolve: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_open_how() {
        assert_eq!(
            ::std::mem::size_of::<lkl_open_how>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_open_how))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_open_how>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_open_how))
        );
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_open_how>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_open_how),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_open_how>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_open_how),
                    "::",
                    stringify!(mode)
                )
            );
        }
        test_field_mode();
        fn test_field_resolve() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_open_how>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resolve) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_open_how),
                    "::",
                    stringify!(resolve)
                )
            );
        }
        test_field_resolve();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fscrypt_policy_v1 {
        pub version: __lkl__u8,
        pub contents_encryption_mode: __lkl__u8,
        pub filenames_encryption_mode: __lkl__u8,
        pub flags: __lkl__u8,
        pub master_key_descriptor: [__lkl__u8; 8usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_policy_v1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_policy_v1>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_fscrypt_policy_v1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_policy_v1>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_fscrypt_policy_v1))
        );
        fn test_field_version() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v1),
                    "::",
                    stringify!(version)
                )
            );
        }
        test_field_version();
        fn test_field_contents_encryption_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).contents_encryption_mode) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v1),
                    "::",
                    stringify!(contents_encryption_mode)
                )
            );
        }
        test_field_contents_encryption_mode();
        fn test_field_filenames_encryption_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).filenames_encryption_mode) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v1),
                    "::",
                    stringify!(filenames_encryption_mode)
                )
            );
        }
        test_field_filenames_encryption_mode();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v1),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_master_key_descriptor() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).master_key_descriptor) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v1),
                    "::",
                    stringify!(master_key_descriptor)
                )
            );
        }
        test_field_master_key_descriptor();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fscrypt_key {
        pub mode: __lkl__u32,
        pub raw: [__lkl__u8; 64usize],
        pub size: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_key() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_key>(),
            72usize,
            concat!("Size of: ", stringify!(lkl_fscrypt_key))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_key>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fscrypt_key))
        );
        fn test_field_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_key),
                    "::",
                    stringify!(mode)
                )
            );
        }
        test_field_mode();
        fn test_field_raw() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_key),
                    "::",
                    stringify!(raw)
                )
            );
        }
        test_field_raw();
        fn test_field_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_key),
                    "::",
                    stringify!(size)
                )
            );
        }
        test_field_size();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fscrypt_policy_v2 {
        pub version: __lkl__u8,
        pub contents_encryption_mode: __lkl__u8,
        pub filenames_encryption_mode: __lkl__u8,
        pub flags: __lkl__u8,
        pub __reserved: [__lkl__u8; 4usize],
        pub master_key_identifier: [__lkl__u8; 16usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_policy_v2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_policy_v2>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_fscrypt_policy_v2))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_policy_v2>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_fscrypt_policy_v2))
        );
        fn test_field_version() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v2),
                    "::",
                    stringify!(version)
                )
            );
        }
        test_field_version();
        fn test_field_contents_encryption_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).contents_encryption_mode) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v2),
                    "::",
                    stringify!(contents_encryption_mode)
                )
            );
        }
        test_field_contents_encryption_mode();
        fn test_field_filenames_encryption_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).filenames_encryption_mode) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v2),
                    "::",
                    stringify!(filenames_encryption_mode)
                )
            );
        }
        test_field_filenames_encryption_mode();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v2),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v2),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
        fn test_field_master_key_identifier() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_policy_v2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).master_key_identifier) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_policy_v2),
                    "::",
                    stringify!(master_key_identifier)
                )
            );
        }
        test_field_master_key_identifier();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_fscrypt_get_policy_ex_arg {
        pub policy_size: __lkl__u64,
        pub policy: lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1 {
        pub version: __lkl__u8,
        pub v1: lkl_fscrypt_policy_v1,
        pub v2: lkl_fscrypt_policy_v2,
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1>(),
            24usize,
            concat!(
                "Size of: ",
                stringify!(lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1>(),
            1usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1)
            )
        );
        fn test_field_version() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1),
                    "::",
                    stringify!(version)
                )
            );
        }
        test_field_version();
        fn test_field_v1() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).v1) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1),
                    "::",
                    stringify!(v1)
                )
            );
        }
        test_field_v1();
        fn test_field_v2() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_policy_ex_arg__bindgen_ty_1),
                    "::",
                    stringify!(v2)
                )
            );
        }
        test_field_v2();
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_get_policy_ex_arg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_get_policy_ex_arg>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_fscrypt_get_policy_ex_arg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_get_policy_ex_arg>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_fscrypt_get_policy_ex_arg))
        );
        fn test_field_policy_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_get_policy_ex_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).policy_size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_policy_ex_arg),
                    "::",
                    stringify!(policy_size)
                )
            );
        }
        test_field_policy_size();
        fn test_field_policy() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_get_policy_ex_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_policy_ex_arg),
                    "::",
                    stringify!(policy)
                )
            );
        }
        test_field_policy();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_fscrypt_key_specifier {
        pub type_: __lkl__u32,
        pub __reserved: __lkl__u32,
        pub u: lkl_fscrypt_key_specifier__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_fscrypt_key_specifier__bindgen_ty_1 {
        pub __reserved: [__lkl__u8; 32usize],
        pub descriptor: [__lkl__u8; 8usize],
        pub identifier: [__lkl__u8; 16usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_key_specifier__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_key_specifier__bindgen_ty_1>(),
            32usize,
            concat!(
                "Size of: ",
                stringify!(lkl_fscrypt_key_specifier__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_key_specifier__bindgen_ty_1>(),
            1usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_fscrypt_key_specifier__bindgen_ty_1)
            )
        );
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_fscrypt_key_specifier__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_key_specifier__bindgen_ty_1),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
        fn test_field_descriptor() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_fscrypt_key_specifier__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).descriptor) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_key_specifier__bindgen_ty_1),
                    "::",
                    stringify!(descriptor)
                )
            );
        }
        test_field_descriptor();
        fn test_field_identifier() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_fscrypt_key_specifier__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_key_specifier__bindgen_ty_1),
                    "::",
                    stringify!(identifier)
                )
            );
        }
        test_field_identifier();
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_key_specifier() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_key_specifier>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_fscrypt_key_specifier))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_key_specifier>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fscrypt_key_specifier))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_key_specifier>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_key_specifier),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_key_specifier>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_key_specifier),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
        fn test_field_u() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_key_specifier>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_key_specifier),
                    "::",
                    stringify!(u)
                )
            );
        }
        test_field_u();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_fscrypt_provisioning_key_payload {
        pub type_: __lkl__u32,
        pub __reserved: __lkl__u32,
        pub raw: __IncompleteArrayField<__lkl__u8>,
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_provisioning_key_payload() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_provisioning_key_payload>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(lkl_fscrypt_provisioning_key_payload)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_provisioning_key_payload>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_fscrypt_provisioning_key_payload)
            )
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_fscrypt_provisioning_key_payload>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_provisioning_key_payload),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_fscrypt_provisioning_key_payload>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_provisioning_key_payload),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
        fn test_field_raw() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_fscrypt_provisioning_key_payload>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_provisioning_key_payload),
                    "::",
                    stringify!(raw)
                )
            );
        }
        test_field_raw();
    }
    #[repr(C)]
    pub struct lkl_fscrypt_add_key_arg {
        pub key_spec: lkl_fscrypt_key_specifier,
        pub raw_size: __lkl__u32,
        pub key_id: __lkl__u32,
        pub __reserved: [__lkl__u32; 8usize],
        pub raw: __IncompleteArrayField<__lkl__u8>,
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_add_key_arg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_add_key_arg>(),
            80usize,
            concat!("Size of: ", stringify!(lkl_fscrypt_add_key_arg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_add_key_arg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fscrypt_add_key_arg))
        );
        fn test_field_key_spec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_add_key_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).key_spec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_add_key_arg),
                    "::",
                    stringify!(key_spec)
                )
            );
        }
        test_field_key_spec();
        fn test_field_raw_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_add_key_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).raw_size) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_add_key_arg),
                    "::",
                    stringify!(raw_size)
                )
            );
        }
        test_field_raw_size();
        fn test_field_key_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_add_key_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).key_id) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_add_key_arg),
                    "::",
                    stringify!(key_id)
                )
            );
        }
        test_field_key_id();
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_add_key_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_add_key_arg),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
        fn test_field_raw() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_add_key_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_add_key_arg),
                    "::",
                    stringify!(raw)
                )
            );
        }
        test_field_raw();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_fscrypt_remove_key_arg {
        pub key_spec: lkl_fscrypt_key_specifier,
        pub removal_status_flags: __lkl__u32,
        pub __reserved: [__lkl__u32; 5usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_remove_key_arg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_remove_key_arg>(),
            64usize,
            concat!("Size of: ", stringify!(lkl_fscrypt_remove_key_arg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_remove_key_arg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fscrypt_remove_key_arg))
        );
        fn test_field_key_spec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_remove_key_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).key_spec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_remove_key_arg),
                    "::",
                    stringify!(key_spec)
                )
            );
        }
        test_field_key_spec();
        fn test_field_removal_status_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_remove_key_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).removal_status_flags) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_remove_key_arg),
                    "::",
                    stringify!(removal_status_flags)
                )
            );
        }
        test_field_removal_status_flags();
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_remove_key_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_remove_key_arg),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_fscrypt_get_key_status_arg {
        pub key_spec: lkl_fscrypt_key_specifier,
        pub __reserved: [__lkl__u32; 6usize],
        pub status: __lkl__u32,
        pub status_flags: __lkl__u32,
        pub user_count: __lkl__u32,
        pub __out_reserved: [__lkl__u32; 13usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_fscrypt_get_key_status_arg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fscrypt_get_key_status_arg>(),
            128usize,
            concat!("Size of: ", stringify!(lkl_fscrypt_get_key_status_arg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fscrypt_get_key_status_arg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fscrypt_get_key_status_arg))
        );
        fn test_field_key_spec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_get_key_status_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).key_spec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_key_status_arg),
                    "::",
                    stringify!(key_spec)
                )
            );
        }
        test_field_key_spec();
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_get_key_status_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_key_status_arg),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
        fn test_field_status() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_get_key_status_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_key_status_arg),
                    "::",
                    stringify!(status)
                )
            );
        }
        test_field_status();
        fn test_field_status_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_get_key_status_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).status_flags) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_key_status_arg),
                    "::",
                    stringify!(status_flags)
                )
            );
        }
        test_field_status_flags();
        fn test_field_user_count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_get_key_status_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).user_count) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_key_status_arg),
                    "::",
                    stringify!(user_count)
                )
            );
        }
        test_field_user_count();
        fn test_field___out_reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fscrypt_get_key_status_arg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__out_reserved) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fscrypt_get_key_status_arg),
                    "::",
                    stringify!(__out_reserved)
                )
            );
        }
        test_field___out_reserved();
    }
    pub const lkl_fsconfig_command_LKL_FSCONFIG_SET_FLAG: lkl_fsconfig_command = 0;
    pub const lkl_fsconfig_command_LKL_FSCONFIG_SET_STRING: lkl_fsconfig_command = 1;
    pub const lkl_fsconfig_command_LKL_FSCONFIG_SET_BINARY: lkl_fsconfig_command = 2;
    pub const lkl_fsconfig_command_LKL_FSCONFIG_SET_PATH: lkl_fsconfig_command = 3;
    pub const lkl_fsconfig_command_LKL_FSCONFIG_SET_PATH_EMPTY: lkl_fsconfig_command = 4;
    pub const lkl_fsconfig_command_LKL_FSCONFIG_SET_FD: lkl_fsconfig_command = 5;
    pub const lkl_fsconfig_command_LKL_FSCONFIG_CMD_CREATE: lkl_fsconfig_command = 6;
    pub const lkl_fsconfig_command_LKL_FSCONFIG_CMD_RECONFIGURE: lkl_fsconfig_command = 7;
    pub type lkl_fsconfig_command = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_file_clone_range {
        pub src_fd: __lkl__s64,
        pub src_offset: __lkl__u64,
        pub src_length: __lkl__u64,
        pub dest_offset: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_file_clone_range() {
        assert_eq!(
            ::std::mem::size_of::<lkl_file_clone_range>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_file_clone_range))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_file_clone_range>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_file_clone_range))
        );
        fn test_field_src_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_clone_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).src_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_clone_range),
                    "::",
                    stringify!(src_fd)
                )
            );
        }
        test_field_src_fd();
        fn test_field_src_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_clone_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).src_offset) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_clone_range),
                    "::",
                    stringify!(src_offset)
                )
            );
        }
        test_field_src_offset();
        fn test_field_src_length() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_clone_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).src_length) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_clone_range),
                    "::",
                    stringify!(src_length)
                )
            );
        }
        test_field_src_length();
        fn test_field_dest_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_clone_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dest_offset) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_clone_range),
                    "::",
                    stringify!(dest_offset)
                )
            );
        }
        test_field_dest_offset();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fstrim_range {
        pub start: __lkl__u64,
        pub len: __lkl__u64,
        pub minlen: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_fstrim_range() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fstrim_range>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_fstrim_range))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fstrim_range>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_fstrim_range))
        );
        fn test_field_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fstrim_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fstrim_range),
                    "::",
                    stringify!(start)
                )
            );
        }
        test_field_start();
        fn test_field_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fstrim_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fstrim_range),
                    "::",
                    stringify!(len)
                )
            );
        }
        test_field_len();
        fn test_field_minlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fstrim_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).minlen) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fstrim_range),
                    "::",
                    stringify!(minlen)
                )
            );
        }
        test_field_minlen();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_file_dedupe_range_info {
        pub dest_fd: __lkl__s64,
        pub dest_offset: __lkl__u64,
        pub bytes_deduped: __lkl__u64,
        pub status: __lkl__s32,
        pub reserved: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_file_dedupe_range_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_file_dedupe_range_info>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_file_dedupe_range_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_file_dedupe_range_info>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_file_dedupe_range_info))
        );
        fn test_field_dest_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dest_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range_info),
                    "::",
                    stringify!(dest_fd)
                )
            );
        }
        test_field_dest_fd();
        fn test_field_dest_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dest_offset) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range_info),
                    "::",
                    stringify!(dest_offset)
                )
            );
        }
        test_field_dest_offset();
        fn test_field_bytes_deduped() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bytes_deduped) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range_info),
                    "::",
                    stringify!(bytes_deduped)
                )
            );
        }
        test_field_bytes_deduped();
        fn test_field_status() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range_info),
                    "::",
                    stringify!(status)
                )
            );
        }
        test_field_status();
        fn test_field_reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range_info),
                    "::",
                    stringify!(reserved)
                )
            );
        }
        test_field_reserved();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_file_dedupe_range {
        pub src_offset: __lkl__u64,
        pub src_length: __lkl__u64,
        pub dest_count: __lkl__u16,
        pub reserved1: __lkl__u16,
        pub reserved2: __lkl__u32,
        pub info: __IncompleteArrayField<lkl_file_dedupe_range_info>,
    }
    #[test]
    fn bindgen_test_layout_lkl_file_dedupe_range() {
        assert_eq!(
            ::std::mem::size_of::<lkl_file_dedupe_range>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_file_dedupe_range))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_file_dedupe_range>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_file_dedupe_range))
        );
        fn test_field_src_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).src_offset) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range),
                    "::",
                    stringify!(src_offset)
                )
            );
        }
        test_field_src_offset();
        fn test_field_src_length() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).src_length) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range),
                    "::",
                    stringify!(src_length)
                )
            );
        }
        test_field_src_length();
        fn test_field_dest_count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dest_count) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range),
                    "::",
                    stringify!(dest_count)
                )
            );
        }
        test_field_dest_count();
        fn test_field_reserved1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
                },
                18usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range),
                    "::",
                    stringify!(reserved1)
                )
            );
        }
        test_field_reserved1();
        fn test_field_reserved2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range),
                    "::",
                    stringify!(reserved2)
                )
            );
        }
        test_field_reserved2();
        fn test_field_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_file_dedupe_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_file_dedupe_range),
                    "::",
                    stringify!(info)
                )
            );
        }
        test_field_info();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_files_stat_struct {
        pub nr_files: ::std::os::raw::c_ulong,
        pub nr_free_files: ::std::os::raw::c_ulong,
        pub max_files: ::std::os::raw::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_lkl_files_stat_struct() {
        assert_eq!(
            ::std::mem::size_of::<lkl_files_stat_struct>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_files_stat_struct))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_files_stat_struct>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_files_stat_struct))
        );
        fn test_field_nr_files() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_files_stat_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_files) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_files_stat_struct),
                    "::",
                    stringify!(nr_files)
                )
            );
        }
        test_field_nr_files();
        fn test_field_nr_free_files() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_files_stat_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_free_files) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_files_stat_struct),
                    "::",
                    stringify!(nr_free_files)
                )
            );
        }
        test_field_nr_free_files();
        fn test_field_max_files() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_files_stat_struct>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_files) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_files_stat_struct),
                    "::",
                    stringify!(max_files)
                )
            );
        }
        test_field_max_files();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_inodes_stat_t {
        pub nr_inodes: ::std::os::raw::c_long,
        pub nr_unused: ::std::os::raw::c_long,
        pub dummy: [::std::os::raw::c_long; 5usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_inodes_stat_t() {
        assert_eq!(
            ::std::mem::size_of::<lkl_inodes_stat_t>(),
            56usize,
            concat!("Size of: ", stringify!(lkl_inodes_stat_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_inodes_stat_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_inodes_stat_t))
        );
        fn test_field_nr_inodes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_inodes_stat_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_inodes) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_inodes_stat_t),
                    "::",
                    stringify!(nr_inodes)
                )
            );
        }
        test_field_nr_inodes();
        fn test_field_nr_unused() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_inodes_stat_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_unused) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_inodes_stat_t),
                    "::",
                    stringify!(nr_unused)
                )
            );
        }
        test_field_nr_unused();
        fn test_field_dummy() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_inodes_stat_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_inodes_stat_t),
                    "::",
                    stringify!(dummy)
                )
            );
        }
        test_field_dummy();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fsxattr {
        pub fsx_xflags: __lkl__u32,
        pub fsx_extsize: __lkl__u32,
        pub fsx_nextents: __lkl__u32,
        pub fsx_projid: __lkl__u32,
        pub fsx_cowextsize: __lkl__u32,
        pub fsx_pad: [::std::os::raw::c_uchar; 8usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_fsxattr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fsxattr>(),
            28usize,
            concat!("Size of: ", stringify!(lkl_fsxattr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fsxattr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fsxattr))
        );
        fn test_field_fsx_xflags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fsxattr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fsx_xflags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fsxattr),
                    "::",
                    stringify!(fsx_xflags)
                )
            );
        }
        test_field_fsx_xflags();
        fn test_field_fsx_extsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fsxattr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fsx_extsize) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fsxattr),
                    "::",
                    stringify!(fsx_extsize)
                )
            );
        }
        test_field_fsx_extsize();
        fn test_field_fsx_nextents() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fsxattr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fsx_nextents) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fsxattr),
                    "::",
                    stringify!(fsx_nextents)
                )
            );
        }
        test_field_fsx_nextents();
        fn test_field_fsx_projid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fsxattr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fsx_projid) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fsxattr),
                    "::",
                    stringify!(fsx_projid)
                )
            );
        }
        test_field_fsx_projid();
        fn test_field_fsx_cowextsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fsxattr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fsx_cowextsize) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fsxattr),
                    "::",
                    stringify!(fsx_cowextsize)
                )
            );
        }
        test_field_fsx_cowextsize();
        fn test_field_fsx_pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fsxattr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fsx_pad) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fsxattr),
                    "::",
                    stringify!(fsx_pad)
                )
            );
        }
        test_field_fsx_pad();
    }
    pub type __lkl__kernel_rwf_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_statfs {
        pub f_type: __lkl__kernel_long_t,
        pub f_bsize: __lkl__kernel_long_t,
        pub f_blocks: __lkl__kernel_long_t,
        pub f_bfree: __lkl__kernel_long_t,
        pub f_bavail: __lkl__kernel_long_t,
        pub f_files: __lkl__kernel_long_t,
        pub f_ffree: __lkl__kernel_long_t,
        pub f_fsid: __lkl__kernel_fsid_t,
        pub f_namelen: __lkl__kernel_long_t,
        pub f_frsize: __lkl__kernel_long_t,
        pub f_flags: __lkl__kernel_long_t,
        pub f_spare: [__lkl__kernel_long_t; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_statfs() {
        assert_eq!(
            ::std::mem::size_of::<lkl_statfs>(),
            120usize,
            concat!("Size of: ", stringify!(lkl_statfs))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_statfs>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_statfs))
        );
        fn test_field_f_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_type) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_type)
                )
            );
        }
        test_field_f_type();
        fn test_field_f_bsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_bsize) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_bsize)
                )
            );
        }
        test_field_f_bsize();
        fn test_field_f_blocks() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_blocks) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_blocks)
                )
            );
        }
        test_field_f_blocks();
        fn test_field_f_bfree() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_bfree) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_bfree)
                )
            );
        }
        test_field_f_bfree();
        fn test_field_f_bavail() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_bavail) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_bavail)
                )
            );
        }
        test_field_f_bavail();
        fn test_field_f_files() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_files) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_files)
                )
            );
        }
        test_field_f_files();
        fn test_field_f_ffree() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_ffree) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_ffree)
                )
            );
        }
        test_field_f_ffree();
        fn test_field_f_fsid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_fsid) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_fsid)
                )
            );
        }
        test_field_f_fsid();
        fn test_field_f_namelen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_namelen) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_namelen)
                )
            );
        }
        test_field_f_namelen();
        fn test_field_f_frsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_frsize) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_frsize)
                )
            );
        }
        test_field_f_frsize();
        fn test_field_f_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_flags) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_flags)
                )
            );
        }
        test_field_f_flags();
        fn test_field_f_spare() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_spare) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs),
                    "::",
                    stringify!(f_spare)
                )
            );
        }
        test_field_f_spare();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_statfs64 {
        pub f_type: __lkl__kernel_long_t,
        pub f_bsize: __lkl__kernel_long_t,
        pub f_blocks: __lkl__u64,
        pub f_bfree: __lkl__u64,
        pub f_bavail: __lkl__u64,
        pub f_files: __lkl__u64,
        pub f_ffree: __lkl__u64,
        pub f_fsid: __lkl__kernel_fsid_t,
        pub f_namelen: __lkl__kernel_long_t,
        pub f_frsize: __lkl__kernel_long_t,
        pub f_flags: __lkl__kernel_long_t,
        pub f_spare: [__lkl__kernel_long_t; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_statfs64() {
        assert_eq!(
            ::std::mem::size_of::<lkl_statfs64>(),
            120usize,
            concat!("Size of: ", stringify!(lkl_statfs64))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_statfs64>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_statfs64))
        );
        fn test_field_f_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_type) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_type)
                )
            );
        }
        test_field_f_type();
        fn test_field_f_bsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_bsize) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_bsize)
                )
            );
        }
        test_field_f_bsize();
        fn test_field_f_blocks() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_blocks) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_blocks)
                )
            );
        }
        test_field_f_blocks();
        fn test_field_f_bfree() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_bfree) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_bfree)
                )
            );
        }
        test_field_f_bfree();
        fn test_field_f_bavail() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_bavail) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_bavail)
                )
            );
        }
        test_field_f_bavail();
        fn test_field_f_files() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_files) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_files)
                )
            );
        }
        test_field_f_files();
        fn test_field_f_ffree() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_ffree) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_ffree)
                )
            );
        }
        test_field_f_ffree();
        fn test_field_f_fsid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_fsid) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_fsid)
                )
            );
        }
        test_field_f_fsid();
        fn test_field_f_namelen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_namelen) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_namelen)
                )
            );
        }
        test_field_f_namelen();
        fn test_field_f_frsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_frsize) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_frsize)
                )
            );
        }
        test_field_f_frsize();
        fn test_field_f_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_flags) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_flags)
                )
            );
        }
        test_field_f_flags();
        fn test_field_f_spare() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_spare) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_statfs64),
                    "::",
                    stringify!(f_spare)
                )
            );
        }
        test_field_f_spare();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_compat_statfs64 {
        pub f_type: __lkl__u32,
        pub f_bsize: __lkl__u32,
        pub f_blocks: __lkl__u64,
        pub f_bfree: __lkl__u64,
        pub f_bavail: __lkl__u64,
        pub f_files: __lkl__u64,
        pub f_ffree: __lkl__u64,
        pub f_fsid: __lkl__kernel_fsid_t,
        pub f_namelen: __lkl__u32,
        pub f_frsize: __lkl__u32,
        pub f_flags: __lkl__u32,
        pub f_spare: [__lkl__u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_compat_statfs64() {
        assert_eq!(
            ::std::mem::size_of::<lkl_compat_statfs64>(),
            88usize,
            concat!("Size of: ", stringify!(lkl_compat_statfs64))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_compat_statfs64>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_compat_statfs64))
        );
        fn test_field_f_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_type) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_type)
                )
            );
        }
        test_field_f_type();
        fn test_field_f_bsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_bsize) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_bsize)
                )
            );
        }
        test_field_f_bsize();
        fn test_field_f_blocks() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_blocks) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_blocks)
                )
            );
        }
        test_field_f_blocks();
        fn test_field_f_bfree() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_bfree) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_bfree)
                )
            );
        }
        test_field_f_bfree();
        fn test_field_f_bavail() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_bavail) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_bavail)
                )
            );
        }
        test_field_f_bavail();
        fn test_field_f_files() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_files) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_files)
                )
            );
        }
        test_field_f_files();
        fn test_field_f_ffree() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_ffree) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_ffree)
                )
            );
        }
        test_field_f_ffree();
        fn test_field_f_fsid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_fsid) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_fsid)
                )
            );
        }
        test_field_f_fsid();
        fn test_field_f_namelen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_namelen) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_namelen)
                )
            );
        }
        test_field_f_namelen();
        fn test_field_f_frsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_frsize) as usize - ptr as usize
                },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_frsize)
                )
            );
        }
        test_field_f_frsize();
        fn test_field_f_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_flags) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_flags)
                )
            );
        }
        test_field_f_flags();
        fn test_field_f_spare() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_compat_statfs64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_spare) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_compat_statfs64),
                    "::",
                    stringify!(f_spare)
                )
            );
        }
        test_field_f_spare();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_stat {
        pub st_dev: ::std::os::raw::c_ulong,
        pub st_ino: ::std::os::raw::c_ulong,
        pub st_mode: ::std::os::raw::c_uint,
        pub st_nlink: ::std::os::raw::c_uint,
        pub st_uid: ::std::os::raw::c_uint,
        pub st_gid: ::std::os::raw::c_uint,
        pub st_rdev: ::std::os::raw::c_ulong,
        pub __pad1: ::std::os::raw::c_ulong,
        pub st_size: ::std::os::raw::c_long,
        pub st_blksize: ::std::os::raw::c_int,
        pub __pad2: ::std::os::raw::c_int,
        pub st_blocks: ::std::os::raw::c_long,
        pub lkl_st_atime: ::std::os::raw::c_long,
        pub st_atime_nsec: ::std::os::raw::c_ulong,
        pub lkl_st_mtime: ::std::os::raw::c_long,
        pub st_mtime_nsec: ::std::os::raw::c_ulong,
        pub lkl_st_ctime: ::std::os::raw::c_long,
        pub st_ctime_nsec: ::std::os::raw::c_ulong,
        pub __unused4: ::std::os::raw::c_uint,
        pub __unused5: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_stat() {
        assert_eq!(
            ::std::mem::size_of::<lkl_stat>(),
            128usize,
            concat!("Size of: ", stringify!(lkl_stat))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_stat>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_stat))
        );
        fn test_field_st_dev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_dev)
                )
            );
        }
        test_field_st_dev();
        fn test_field_st_ino() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_ino)
                )
            );
        }
        test_field_st_ino();
        fn test_field_st_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_mode)
                )
            );
        }
        test_field_st_mode();
        fn test_field_st_nlink() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_nlink)
                )
            );
        }
        test_field_st_nlink();
        fn test_field_st_uid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_uid)
                )
            );
        }
        test_field_st_uid();
        fn test_field_st_gid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_gid)
                )
            );
        }
        test_field_st_gid();
        fn test_field_st_rdev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_rdev)
                )
            );
        }
        test_field_st_rdev();
        fn test_field___pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(__pad1)
                )
            );
        }
        test_field___pad1();
        fn test_field_st_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_size)
                )
            );
        }
        test_field_st_size();
        fn test_field_st_blksize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_blksize)
                )
            );
        }
        test_field_st_blksize();
        fn test_field___pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
                },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(__pad2)
                )
            );
        }
        test_field___pad2();
        fn test_field_st_blocks() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_blocks)
                )
            );
        }
        test_field_st_blocks();
        fn test_field_lkl_st_atime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lkl_st_atime) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(lkl_st_atime)
                )
            );
        }
        test_field_lkl_st_atime();
        fn test_field_st_atime_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_atime_nsec) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_atime_nsec)
                )
            );
        }
        test_field_st_atime_nsec();
        fn test_field_lkl_st_mtime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lkl_st_mtime) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(lkl_st_mtime)
                )
            );
        }
        test_field_lkl_st_mtime();
        fn test_field_st_mtime_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_mtime_nsec) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_mtime_nsec)
                )
            );
        }
        test_field_st_mtime_nsec();
        fn test_field_lkl_st_ctime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lkl_st_ctime) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(lkl_st_ctime)
                )
            );
        }
        test_field_lkl_st_ctime();
        fn test_field_st_ctime_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_ctime_nsec) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(st_ctime_nsec)
                )
            );
        }
        test_field_st_ctime_nsec();
        fn test_field___unused4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused4) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(__unused4)
                )
            );
        }
        test_field___unused4();
        fn test_field___unused5() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused5) as usize - ptr as usize
                },
                124usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat),
                    "::",
                    stringify!(__unused5)
                )
            );
        }
        test_field___unused5();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_stat64 {
        pub st_dev: ::std::os::raw::c_ulonglong,
        pub st_ino: ::std::os::raw::c_ulonglong,
        pub st_mode: ::std::os::raw::c_uint,
        pub st_nlink: ::std::os::raw::c_uint,
        pub st_uid: ::std::os::raw::c_uint,
        pub st_gid: ::std::os::raw::c_uint,
        pub st_rdev: ::std::os::raw::c_ulonglong,
        pub __pad1: ::std::os::raw::c_ulonglong,
        pub st_size: ::std::os::raw::c_longlong,
        pub st_blksize: ::std::os::raw::c_int,
        pub __pad2: ::std::os::raw::c_int,
        pub st_blocks: ::std::os::raw::c_longlong,
        pub lkl_st_atime: ::std::os::raw::c_int,
        pub st_atime_nsec: ::std::os::raw::c_uint,
        pub lkl_st_mtime: ::std::os::raw::c_int,
        pub st_mtime_nsec: ::std::os::raw::c_uint,
        pub lkl_st_ctime: ::std::os::raw::c_int,
        pub st_ctime_nsec: ::std::os::raw::c_uint,
        pub __unused4: ::std::os::raw::c_uint,
        pub __unused5: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_stat64() {
        assert_eq!(
            ::std::mem::size_of::<lkl_stat64>(),
            104usize,
            concat!("Size of: ", stringify!(lkl_stat64))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_stat64>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_stat64))
        );
        fn test_field_st_dev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_dev)
                )
            );
        }
        test_field_st_dev();
        fn test_field_st_ino() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_ino)
                )
            );
        }
        test_field_st_ino();
        fn test_field_st_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_mode)
                )
            );
        }
        test_field_st_mode();
        fn test_field_st_nlink() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_nlink)
                )
            );
        }
        test_field_st_nlink();
        fn test_field_st_uid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_uid)
                )
            );
        }
        test_field_st_uid();
        fn test_field_st_gid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_gid)
                )
            );
        }
        test_field_st_gid();
        fn test_field_st_rdev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_rdev)
                )
            );
        }
        test_field_st_rdev();
        fn test_field___pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(__pad1)
                )
            );
        }
        test_field___pad1();
        fn test_field_st_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_size)
                )
            );
        }
        test_field_st_size();
        fn test_field_st_blksize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_blksize)
                )
            );
        }
        test_field_st_blksize();
        fn test_field___pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
                },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(__pad2)
                )
            );
        }
        test_field___pad2();
        fn test_field_st_blocks() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_blocks)
                )
            );
        }
        test_field_st_blocks();
        fn test_field_lkl_st_atime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lkl_st_atime) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(lkl_st_atime)
                )
            );
        }
        test_field_lkl_st_atime();
        fn test_field_st_atime_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_atime_nsec) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_atime_nsec)
                )
            );
        }
        test_field_st_atime_nsec();
        fn test_field_lkl_st_mtime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lkl_st_mtime) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(lkl_st_mtime)
                )
            );
        }
        test_field_lkl_st_mtime();
        fn test_field_st_mtime_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_mtime_nsec) as usize - ptr as usize
                },
                84usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_mtime_nsec)
                )
            );
        }
        test_field_st_mtime_nsec();
        fn test_field_lkl_st_ctime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lkl_st_ctime) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(lkl_st_ctime)
                )
            );
        }
        test_field_lkl_st_ctime();
        fn test_field_st_ctime_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).st_ctime_nsec) as usize - ptr as usize
                },
                92usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(st_ctime_nsec)
                )
            );
        }
        test_field_st_ctime_nsec();
        fn test_field___unused4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused4) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(__unused4)
                )
            );
        }
        test_field___unused4();
        fn test_field___unused5() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_stat64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused5) as usize - ptr as usize
                },
                100usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_stat64),
                    "::",
                    stringify!(__unused5)
                )
            );
        }
        test_field___unused5();
    }
    pub const LKL_BPF_REG_0: _bindgen_ty_1 = 0;
    pub const LKL_BPF_REG_1: _bindgen_ty_1 = 1;
    pub const LKL_BPF_REG_2: _bindgen_ty_1 = 2;
    pub const LKL_BPF_REG_3: _bindgen_ty_1 = 3;
    pub const LKL_BPF_REG_4: _bindgen_ty_1 = 4;
    pub const LKL_BPF_REG_5: _bindgen_ty_1 = 5;
    pub const LKL_BPF_REG_6: _bindgen_ty_1 = 6;
    pub const LKL_BPF_REG_7: _bindgen_ty_1 = 7;
    pub const LKL_BPF_REG_8: _bindgen_ty_1 = 8;
    pub const LKL_BPF_REG_9: _bindgen_ty_1 = 9;
    pub const LKL_BPF_REG_10: _bindgen_ty_1 = 10;
    pub const __LKL__MAX_BPF_REG: _bindgen_ty_1 = 11;
    pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_insn {
        pub code: __lkl__u8,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
        pub off: __lkl__s16,
        pub imm: __lkl__s32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_insn() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_insn>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_insn))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_insn>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_insn))
        );
        fn test_field_code() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_insn>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_insn),
                    "::",
                    stringify!(code)
                )
            );
        }
        test_field_code();
        fn test_field_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_insn>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_insn),
                    "::",
                    stringify!(off)
                )
            );
        }
        test_field_off();
        fn test_field_imm() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_insn>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imm) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_insn),
                    "::",
                    stringify!(imm)
                )
            );
        }
        test_field_imm();
    }
    impl lkl_bpf_insn {
        #[inline]
        pub fn dst_reg(&self) -> __lkl__u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_dst_reg(&mut self, val: __lkl__u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn src_reg(&self) -> __lkl__u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_src_reg(&mut self, val: __lkl__u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            dst_reg: __lkl__u8,
            src_reg: __lkl__u8,
        ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
            __bindgen_bitfield_unit.set(0usize, 4u8, {
                let dst_reg: u8 = unsafe { ::std::mem::transmute(dst_reg) };
                dst_reg as u64
            });
            __bindgen_bitfield_unit.set(4usize, 4u8, {
                let src_reg: u8 = unsafe { ::std::mem::transmute(src_reg) };
                src_reg as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_bpf_lpm_trie_key {
        pub prefixlen: __lkl__u32,
        pub data: __IncompleteArrayField<__lkl__u8>,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_lpm_trie_key() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_lpm_trie_key>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_bpf_lpm_trie_key))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_lpm_trie_key>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_lpm_trie_key))
        );
        fn test_field_prefixlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_lpm_trie_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prefixlen) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_lpm_trie_key),
                    "::",
                    stringify!(prefixlen)
                )
            );
        }
        test_field_prefixlen();
        fn test_field_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_lpm_trie_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_lpm_trie_key),
                    "::",
                    stringify!(data)
                )
            );
        }
        test_field_data();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_cgroup_storage_key {
        pub cgroup_inode_id: __lkl__u64,
        pub attach_type: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_cgroup_storage_key() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_cgroup_storage_key>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_cgroup_storage_key))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_cgroup_storage_key>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_cgroup_storage_key))
        );
        fn test_field_cgroup_inode_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_cgroup_storage_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cgroup_inode_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_cgroup_storage_key),
                    "::",
                    stringify!(cgroup_inode_id)
                )
            );
        }
        test_field_cgroup_inode_id();
        fn test_field_attach_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_cgroup_storage_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_type) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_cgroup_storage_key),
                    "::",
                    stringify!(attach_type)
                )
            );
        }
        test_field_attach_type();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_iter_link_info {
        pub map: lkl_bpf_iter_link_info__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_iter_link_info__bindgen_ty_1 {
        pub map_fd: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_iter_link_info__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_iter_link_info__bindgen_ty_1>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_iter_link_info__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_iter_link_info__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_iter_link_info__bindgen_ty_1)
            )
        );
        fn test_field_map_fd() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_iter_link_info__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_iter_link_info__bindgen_ty_1),
                    "::",
                    stringify!(map_fd)
                )
            );
        }
        test_field_map_fd();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_iter_link_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_iter_link_info>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_bpf_iter_link_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_iter_link_info>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_iter_link_info))
        );
        fn test_field_map() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_iter_link_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_iter_link_info),
                    "::",
                    stringify!(map)
                )
            );
        }
        test_field_map();
    }
    pub const lkl_bpf_cmd_LKL_BPF_MAP_CREATE: lkl_bpf_cmd = 0;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_LOOKUP_ELEM: lkl_bpf_cmd = 1;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_UPDATE_ELEM: lkl_bpf_cmd = 2;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_DELETE_ELEM: lkl_bpf_cmd = 3;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_GET_NEXT_KEY: lkl_bpf_cmd = 4;
    pub const lkl_bpf_cmd_LKL_BPF_PROG_LOAD: lkl_bpf_cmd = 5;
    pub const lkl_bpf_cmd_LKL_BPF_OBJ_PIN: lkl_bpf_cmd = 6;
    pub const lkl_bpf_cmd_LKL_BPF_OBJ_GET: lkl_bpf_cmd = 7;
    pub const lkl_bpf_cmd_LKL_BPF_PROG_ATTACH: lkl_bpf_cmd = 8;
    pub const lkl_bpf_cmd_LKL_BPF_PROG_DETACH: lkl_bpf_cmd = 9;
    pub const lkl_bpf_cmd_LKL_BPF_PROG_TEST_RUN: lkl_bpf_cmd = 10;
    pub const lkl_bpf_cmd_LKL_BPF_PROG_GET_NEXT_ID: lkl_bpf_cmd = 11;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_GET_NEXT_ID: lkl_bpf_cmd = 12;
    pub const lkl_bpf_cmd_LKL_BPF_PROG_GET_FD_BY_ID: lkl_bpf_cmd = 13;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_GET_FD_BY_ID: lkl_bpf_cmd = 14;
    pub const lkl_bpf_cmd_LKL_BPF_OBJ_GET_INFO_BY_FD: lkl_bpf_cmd = 15;
    pub const lkl_bpf_cmd_LKL_BPF_PROG_QUERY: lkl_bpf_cmd = 16;
    pub const lkl_bpf_cmd_LKL_BPF_RAW_TRACEPOINT_OPEN: lkl_bpf_cmd = 17;
    pub const lkl_bpf_cmd_LKL_BPF_BTF_LOAD: lkl_bpf_cmd = 18;
    pub const lkl_bpf_cmd_LKL_BPF_BTF_GET_FD_BY_ID: lkl_bpf_cmd = 19;
    pub const lkl_bpf_cmd_LKL_BPF_TASK_FD_QUERY: lkl_bpf_cmd = 20;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_LOOKUP_AND_DELETE_ELEM: lkl_bpf_cmd = 21;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_FREEZE: lkl_bpf_cmd = 22;
    pub const lkl_bpf_cmd_LKL_BPF_BTF_GET_NEXT_ID: lkl_bpf_cmd = 23;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_LOOKUP_BATCH: lkl_bpf_cmd = 24;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_LOOKUP_AND_DELETE_BATCH: lkl_bpf_cmd = 25;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_UPDATE_BATCH: lkl_bpf_cmd = 26;
    pub const lkl_bpf_cmd_LKL_BPF_MAP_DELETE_BATCH: lkl_bpf_cmd = 27;
    pub const lkl_bpf_cmd_LKL_BPF_LINK_CREATE: lkl_bpf_cmd = 28;
    pub const lkl_bpf_cmd_LKL_BPF_LINK_UPDATE: lkl_bpf_cmd = 29;
    pub const lkl_bpf_cmd_LKL_BPF_LINK_GET_FD_BY_ID: lkl_bpf_cmd = 30;
    pub const lkl_bpf_cmd_LKL_BPF_LINK_GET_NEXT_ID: lkl_bpf_cmd = 31;
    pub const lkl_bpf_cmd_LKL_BPF_ENABLE_STATS: lkl_bpf_cmd = 32;
    pub const lkl_bpf_cmd_LKL_BPF_ITER_CREATE: lkl_bpf_cmd = 33;
    pub const lkl_bpf_cmd_LKL_BPF_LINK_DETACH: lkl_bpf_cmd = 34;
    pub const lkl_bpf_cmd_LKL_BPF_PROG_BIND_MAP: lkl_bpf_cmd = 35;
    pub type lkl_bpf_cmd = ::std::os::raw::c_uint;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_UNSPEC: lkl_bpf_map_type = 0;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_HASH: lkl_bpf_map_type = 1;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_ARRAY: lkl_bpf_map_type = 2;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_PROG_ARRAY: lkl_bpf_map_type = 3;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_PERF_EVENT_ARRAY: lkl_bpf_map_type = 4;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_PERCPU_HASH: lkl_bpf_map_type = 5;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_PERCPU_ARRAY: lkl_bpf_map_type = 6;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_STACK_TRACE: lkl_bpf_map_type = 7;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_CGROUP_ARRAY: lkl_bpf_map_type = 8;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_LRU_HASH: lkl_bpf_map_type = 9;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_LRU_PERCPU_HASH: lkl_bpf_map_type = 10;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_LPM_TRIE: lkl_bpf_map_type = 11;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_ARRAY_OF_MAPS: lkl_bpf_map_type = 12;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_HASH_OF_MAPS: lkl_bpf_map_type = 13;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_DEVMAP: lkl_bpf_map_type = 14;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_SOCKMAP: lkl_bpf_map_type = 15;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_CPUMAP: lkl_bpf_map_type = 16;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_XSKMAP: lkl_bpf_map_type = 17;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_SOCKHASH: lkl_bpf_map_type = 18;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_CGROUP_STORAGE: lkl_bpf_map_type = 19;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_REUSEPORT_SOCKARRAY: lkl_bpf_map_type = 20;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE: lkl_bpf_map_type = 21;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_QUEUE: lkl_bpf_map_type = 22;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_STACK: lkl_bpf_map_type = 23;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_SK_STORAGE: lkl_bpf_map_type = 24;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_DEVMAP_HASH: lkl_bpf_map_type = 25;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_STRUCT_OPS: lkl_bpf_map_type = 26;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_RINGBUF: lkl_bpf_map_type = 27;
    pub const lkl_bpf_map_type_LKL_BPF_MAP_TYPE_INODE_STORAGE: lkl_bpf_map_type = 28;
    pub type lkl_bpf_map_type = ::std::os::raw::c_uint;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_UNSPEC: lkl_bpf_prog_type = 0;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_SOCKET_FILTER: lkl_bpf_prog_type = 1;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_KPROBE: lkl_bpf_prog_type = 2;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_SCHED_CLS: lkl_bpf_prog_type = 3;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_SCHED_ACT: lkl_bpf_prog_type = 4;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_TRACEPOINT: lkl_bpf_prog_type = 5;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_XDP: lkl_bpf_prog_type = 6;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_PERF_EVENT: lkl_bpf_prog_type = 7;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_CGROUP_SKB: lkl_bpf_prog_type = 8;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_CGROUP_SOCK: lkl_bpf_prog_type = 9;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_LWT_IN: lkl_bpf_prog_type = 10;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_LWT_OUT: lkl_bpf_prog_type = 11;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_LWT_XMIT: lkl_bpf_prog_type = 12;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_SOCK_OPS: lkl_bpf_prog_type = 13;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_SK_SKB: lkl_bpf_prog_type = 14;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_CGROUP_DEVICE: lkl_bpf_prog_type = 15;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_SK_MSG: lkl_bpf_prog_type = 16;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_RAW_TRACEPOINT: lkl_bpf_prog_type = 17;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_CGROUP_SOCK_ADDR: lkl_bpf_prog_type = 18;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_LWT_SEG6LOCAL: lkl_bpf_prog_type = 19;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_LIRC_MODE2: lkl_bpf_prog_type = 20;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_SK_REUSEPORT: lkl_bpf_prog_type = 21;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_FLOW_DISSECTOR: lkl_bpf_prog_type = 22;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_CGROUP_SYSCTL: lkl_bpf_prog_type = 23;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE: lkl_bpf_prog_type = 24;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_CGROUP_SOCKOPT: lkl_bpf_prog_type = 25;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_TRACING: lkl_bpf_prog_type = 26;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_STRUCT_OPS: lkl_bpf_prog_type = 27;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_EXT: lkl_bpf_prog_type = 28;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_LSM: lkl_bpf_prog_type = 29;
    pub const lkl_bpf_prog_type_LKL_BPF_PROG_TYPE_SK_LOOKUP: lkl_bpf_prog_type = 30;
    pub type lkl_bpf_prog_type = ::std::os::raw::c_uint;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET_INGRESS: lkl_bpf_attach_type = 0;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET_EGRESS: lkl_bpf_attach_type = 1;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET_SOCK_CREATE: lkl_bpf_attach_type = 2;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_SOCK_OPS: lkl_bpf_attach_type = 3;
    pub const lkl_bpf_attach_type_LKL_BPF_SK_SKB_STREAM_PARSER: lkl_bpf_attach_type = 4;
    pub const lkl_bpf_attach_type_LKL_BPF_SK_SKB_STREAM_VERDICT: lkl_bpf_attach_type = 5;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_DEVICE: lkl_bpf_attach_type = 6;
    pub const lkl_bpf_attach_type_LKL_BPF_SK_MSG_VERDICT: lkl_bpf_attach_type = 7;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET4_BIND: lkl_bpf_attach_type = 8;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET6_BIND: lkl_bpf_attach_type = 9;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET4_CONNECT: lkl_bpf_attach_type = 10;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET6_CONNECT: lkl_bpf_attach_type = 11;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET4_POST_BIND: lkl_bpf_attach_type = 12;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET6_POST_BIND: lkl_bpf_attach_type = 13;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_UDP4_SENDMSG: lkl_bpf_attach_type = 14;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_UDP6_SENDMSG: lkl_bpf_attach_type = 15;
    pub const lkl_bpf_attach_type_LKL_BPF_LIRC_MODE2: lkl_bpf_attach_type = 16;
    pub const lkl_bpf_attach_type_LKL_BPF_FLOW_DISSECTOR: lkl_bpf_attach_type = 17;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_SYSCTL: lkl_bpf_attach_type = 18;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_UDP4_RECVMSG: lkl_bpf_attach_type = 19;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_UDP6_RECVMSG: lkl_bpf_attach_type = 20;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_GETSOCKOPT: lkl_bpf_attach_type = 21;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_SETSOCKOPT: lkl_bpf_attach_type = 22;
    pub const lkl_bpf_attach_type_LKL_BPF_TRACE_RAW_TP: lkl_bpf_attach_type = 23;
    pub const lkl_bpf_attach_type_LKL_BPF_TRACE_FENTRY: lkl_bpf_attach_type = 24;
    pub const lkl_bpf_attach_type_LKL_BPF_TRACE_FEXIT: lkl_bpf_attach_type = 25;
    pub const lkl_bpf_attach_type_LKL_BPF_MODIFY_RETURN: lkl_bpf_attach_type = 26;
    pub const lkl_bpf_attach_type_LKL_BPF_LSM_MAC: lkl_bpf_attach_type = 27;
    pub const lkl_bpf_attach_type_LKL_BPF_TRACE_ITER: lkl_bpf_attach_type = 28;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET4_GETPEERNAME: lkl_bpf_attach_type = 29;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET6_GETPEERNAME: lkl_bpf_attach_type = 30;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET4_GETSOCKNAME: lkl_bpf_attach_type = 31;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET6_GETSOCKNAME: lkl_bpf_attach_type = 32;
    pub const lkl_bpf_attach_type_LKL_BPF_XDP_DEVMAP: lkl_bpf_attach_type = 33;
    pub const lkl_bpf_attach_type_LKL_BPF_CGROUP_INET_SOCK_RELEASE: lkl_bpf_attach_type = 34;
    pub const lkl_bpf_attach_type_LKL_BPF_XDP_CPUMAP: lkl_bpf_attach_type = 35;
    pub const lkl_bpf_attach_type_LKL_BPF_SK_LOOKUP: lkl_bpf_attach_type = 36;
    pub const lkl_bpf_attach_type_LKL_BPF_XDP: lkl_bpf_attach_type = 37;
    pub const lkl_bpf_attach_type___LKL__MAX_BPF_ATTACH_TYPE: lkl_bpf_attach_type = 38;
    pub type lkl_bpf_attach_type = ::std::os::raw::c_uint;
    pub const lkl_bpf_link_type_LKL_BPF_LINK_TYPE_UNSPEC: lkl_bpf_link_type = 0;
    pub const lkl_bpf_link_type_LKL_BPF_LINK_TYPE_RAW_TRACEPOINT: lkl_bpf_link_type = 1;
    pub const lkl_bpf_link_type_LKL_BPF_LINK_TYPE_TRACING: lkl_bpf_link_type = 2;
    pub const lkl_bpf_link_type_LKL_BPF_LINK_TYPE_CGROUP: lkl_bpf_link_type = 3;
    pub const lkl_bpf_link_type_LKL_BPF_LINK_TYPE_ITER: lkl_bpf_link_type = 4;
    pub const lkl_bpf_link_type_LKL_BPF_LINK_TYPE_NETNS: lkl_bpf_link_type = 5;
    pub const lkl_bpf_link_type_LKL_BPF_LINK_TYPE_XDP: lkl_bpf_link_type = 6;
    pub const lkl_bpf_link_type_LKL_MAX_BPF_LINK_TYPE: lkl_bpf_link_type = 7;
    pub type lkl_bpf_link_type = ::std::os::raw::c_uint;
    pub const LKL_BPF_ANY: _bindgen_ty_2 = 0;
    pub const LKL_BPF_NOEXIST: _bindgen_ty_2 = 1;
    pub const LKL_BPF_EXIST: _bindgen_ty_2 = 2;
    pub const LKL_BPF_F_LOCK: _bindgen_ty_2 = 4;
    pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_NO_PREALLOC: _bindgen_ty_3 = 1;
    pub const LKL_BPF_F_NO_COMMON_LRU: _bindgen_ty_3 = 2;
    pub const LKL_BPF_F_NUMA_NODE: _bindgen_ty_3 = 4;
    pub const LKL_BPF_F_RDONLY: _bindgen_ty_3 = 8;
    pub const LKL_BPF_F_WRONLY: _bindgen_ty_3 = 16;
    pub const LKL_BPF_F_STACK_BUILD_ID: _bindgen_ty_3 = 32;
    pub const LKL_BPF_F_ZERO_SEED: _bindgen_ty_3 = 64;
    pub const LKL_BPF_F_RDONLY_PROG: _bindgen_ty_3 = 128;
    pub const LKL_BPF_F_WRONLY_PROG: _bindgen_ty_3 = 256;
    pub const LKL_BPF_F_CLONE: _bindgen_ty_3 = 512;
    pub const LKL_BPF_F_MMAPABLE: _bindgen_ty_3 = 1024;
    pub const LKL_BPF_F_PRESERVE_ELEMS: _bindgen_ty_3 = 2048;
    pub const LKL_BPF_F_INNER_MAP: _bindgen_ty_3 = 4096;
    pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
    pub const lkl_bpf_stats_type_LKL_BPF_STATS_RUN_TIME: lkl_bpf_stats_type = 0;
    pub type lkl_bpf_stats_type = ::std::os::raw::c_uint;
    pub const lkl_bpf_stack_build_id_status_LKL_BPF_STACK_BUILD_ID_EMPTY:
        lkl_bpf_stack_build_id_status = 0;
    pub const lkl_bpf_stack_build_id_status_LKL_BPF_STACK_BUILD_ID_VALID:
        lkl_bpf_stack_build_id_status = 1;
    pub const lkl_bpf_stack_build_id_status_LKL_BPF_STACK_BUILD_ID_IP: lkl_bpf_stack_build_id_status =
        2;
    pub type lkl_bpf_stack_build_id_status = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_stack_build_id {
        pub status: __lkl__s32,
        pub build_id: [::std::os::raw::c_uchar; 20usize],
        pub __bindgen_anon_1: lkl_bpf_stack_build_id__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_stack_build_id__bindgen_ty_1 {
        pub offset: __lkl__u64,
        pub ip: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_stack_build_id__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_stack_build_id__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_stack_build_id__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_stack_build_id__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_stack_build_id__bindgen_ty_1)
            )
        );
        fn test_field_offset() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_stack_build_id__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_stack_build_id__bindgen_ty_1),
                    "::",
                    stringify!(offset)
                )
            );
        }
        test_field_offset();
        fn test_field_ip() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_stack_build_id__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ip) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_stack_build_id__bindgen_ty_1),
                    "::",
                    stringify!(ip)
                )
            );
        }
        test_field_ip();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_stack_build_id() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_stack_build_id>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_bpf_stack_build_id))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_stack_build_id>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_stack_build_id))
        );
        fn test_field_status() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_stack_build_id>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_stack_build_id),
                    "::",
                    stringify!(status)
                )
            );
        }
        test_field_status();
        fn test_field_build_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_stack_build_id>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).build_id) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_stack_build_id),
                    "::",
                    stringify!(build_id)
                )
            );
        }
        test_field_build_id();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_attr {
        pub __bindgen_anon_1: lkl_bpf_attr__bindgen_ty_1,
        pub __bindgen_anon_2: lkl_bpf_attr__bindgen_ty_2,
        pub batch: lkl_bpf_attr__bindgen_ty_3,
        pub __bindgen_anon_3: lkl_bpf_attr__bindgen_ty_4,
        pub __bindgen_anon_4: lkl_bpf_attr__bindgen_ty_5,
        pub __bindgen_anon_5: lkl_bpf_attr__bindgen_ty_6,
        pub test: lkl_bpf_attr__bindgen_ty_7,
        pub __bindgen_anon_6: lkl_bpf_attr__bindgen_ty_8,
        pub info: lkl_bpf_attr__bindgen_ty_9,
        pub query: lkl_bpf_attr__bindgen_ty_10,
        pub raw_tracepoint: lkl_bpf_attr__bindgen_ty_11,
        pub __bindgen_anon_7: lkl_bpf_attr__bindgen_ty_12,
        pub task_fd_query: lkl_bpf_attr__bindgen_ty_13,
        pub link_create: lkl_bpf_attr__bindgen_ty_14,
        pub link_update: lkl_bpf_attr__bindgen_ty_15,
        pub link_detach: lkl_bpf_attr__bindgen_ty_16,
        pub enable_stats: lkl_bpf_attr__bindgen_ty_17,
        pub iter_create: lkl_bpf_attr__bindgen_ty_18,
        pub prog_bind_map: lkl_bpf_attr__bindgen_ty_19,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_1 {
        pub map_type: __lkl__u32,
        pub key_size: __lkl__u32,
        pub value_size: __lkl__u32,
        pub max_entries: __lkl__u32,
        pub map_flags: __lkl__u32,
        pub inner_map_fd: __lkl__u32,
        pub numa_node: __lkl__u32,
        pub map_name: [::std::os::raw::c_char; 16usize],
        pub map_ifindex: __lkl__u32,
        pub btf_fd: __lkl__u32,
        pub btf_key_type_id: __lkl__u32,
        pub btf_value_type_id: __lkl__u32,
        pub btf_vmlinux_value_type_id: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_1>(),
            64usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_1))
        );
        fn test_field_map_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_type) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(map_type)
                )
            );
        }
        test_field_map_type();
        fn test_field_key_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).key_size) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(key_size)
                )
            );
        }
        test_field_key_size();
        fn test_field_value_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).value_size) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(value_size)
                )
            );
        }
        test_field_value_size();
        fn test_field_max_entries() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_entries) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(max_entries)
                )
            );
        }
        test_field_max_entries();
        fn test_field_map_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_flags) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(map_flags)
                )
            );
        }
        test_field_map_flags();
        fn test_field_inner_map_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).inner_map_fd) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(inner_map_fd)
                )
            );
        }
        test_field_inner_map_fd();
        fn test_field_numa_node() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).numa_node) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(numa_node)
                )
            );
        }
        test_field_numa_node();
        fn test_field_map_name() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_name) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(map_name)
                )
            );
        }
        test_field_map_name();
        fn test_field_map_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_ifindex) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(map_ifindex)
                )
            );
        }
        test_field_map_ifindex();
        fn test_field_btf_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_fd) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(btf_fd)
                )
            );
        }
        test_field_btf_fd();
        fn test_field_btf_key_type_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_key_type_id) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(btf_key_type_id)
                )
            );
        }
        test_field_btf_key_type_id();
        fn test_field_btf_value_type_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_value_type_id) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(btf_value_type_id)
                )
            );
        }
        test_field_btf_value_type_id();
        fn test_field_btf_vmlinux_value_type_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_vmlinux_value_type_id) as usize - ptr as usize
                },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_1),
                    "::",
                    stringify!(btf_vmlinux_value_type_id)
                )
            );
        }
        test_field_btf_vmlinux_value_type_id();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_2 {
        pub map_fd: __lkl__u32,
        pub key: __lkl__u64,
        pub __bindgen_anon_1: lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1,
        pub flags: __lkl__u64,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1 {
        pub value: __lkl__u64,
        pub next_key: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1)
            )
        );
        fn test_field_value() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1),
                    "::",
                    stringify!(value)
                )
            );
        }
        test_field_value();
        fn test_field_next_key() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).next_key) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_2__bindgen_ty_1),
                    "::",
                    stringify!(next_key)
                )
            );
        }
        test_field_next_key();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_2>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_2))
        );
        fn test_field_map_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_2),
                    "::",
                    stringify!(map_fd)
                )
            );
        }
        test_field_map_fd();
        fn test_field_key() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_2),
                    "::",
                    stringify!(key)
                )
            );
        }
        test_field_key();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_2),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_3 {
        pub in_batch: __lkl__u64,
        pub out_batch: __lkl__u64,
        pub keys: __lkl__u64,
        pub values: __lkl__u64,
        pub count: __lkl__u32,
        pub map_fd: __lkl__u32,
        pub elem_flags: __lkl__u64,
        pub flags: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_3() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_3>(),
            56usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_3))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_3>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_3))
        );
        fn test_field_in_batch() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).in_batch) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_3),
                    "::",
                    stringify!(in_batch)
                )
            );
        }
        test_field_in_batch();
        fn test_field_out_batch() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).out_batch) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_3),
                    "::",
                    stringify!(out_batch)
                )
            );
        }
        test_field_out_batch();
        fn test_field_keys() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_3),
                    "::",
                    stringify!(keys)
                )
            );
        }
        test_field_keys();
        fn test_field_values() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_3),
                    "::",
                    stringify!(values)
                )
            );
        }
        test_field_values();
        fn test_field_count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_3),
                    "::",
                    stringify!(count)
                )
            );
        }
        test_field_count();
        fn test_field_map_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_fd) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_3),
                    "::",
                    stringify!(map_fd)
                )
            );
        }
        test_field_map_fd();
        fn test_field_elem_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).elem_flags) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_3),
                    "::",
                    stringify!(elem_flags)
                )
            );
        }
        test_field_elem_flags();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_3),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_4 {
        pub prog_type: __lkl__u32,
        pub insn_cnt: __lkl__u32,
        pub insns: __lkl__u64,
        pub license: __lkl__u64,
        pub log_level: __lkl__u32,
        pub log_size: __lkl__u32,
        pub log_buf: __lkl__u64,
        pub kern_version: __lkl__u32,
        pub prog_flags: __lkl__u32,
        pub prog_name: [::std::os::raw::c_char; 16usize],
        pub prog_ifindex: __lkl__u32,
        pub expected_attach_type: __lkl__u32,
        pub prog_btf_fd: __lkl__u32,
        pub func_info_rec_size: __lkl__u32,
        pub func_info: __lkl__u64,
        pub func_info_cnt: __lkl__u32,
        pub line_info_rec_size: __lkl__u32,
        pub line_info: __lkl__u64,
        pub line_info_cnt: __lkl__u32,
        pub attach_btf_id: __lkl__u32,
        pub attach_prog_fd: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_4() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_4>(),
            120usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_4))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_4>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_4))
        );
        fn test_field_prog_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_type) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(prog_type)
                )
            );
        }
        test_field_prog_type();
        fn test_field_insn_cnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).insn_cnt) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(insn_cnt)
                )
            );
        }
        test_field_insn_cnt();
        fn test_field_insns() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).insns) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(insns)
                )
            );
        }
        test_field_insns();
        fn test_field_license() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).license) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(license)
                )
            );
        }
        test_field_license();
        fn test_field_log_level() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).log_level) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(log_level)
                )
            );
        }
        test_field_log_level();
        fn test_field_log_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).log_size) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(log_size)
                )
            );
        }
        test_field_log_size();
        fn test_field_log_buf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).log_buf) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(log_buf)
                )
            );
        }
        test_field_log_buf();
        fn test_field_kern_version() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).kern_version) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(kern_version)
                )
            );
        }
        test_field_kern_version();
        fn test_field_prog_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_flags) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(prog_flags)
                )
            );
        }
        test_field_prog_flags();
        fn test_field_prog_name() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_name) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(prog_name)
                )
            );
        }
        test_field_prog_name();
        fn test_field_prog_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_ifindex) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(prog_ifindex)
                )
            );
        }
        test_field_prog_ifindex();
        fn test_field_expected_attach_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).expected_attach_type) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(expected_attach_type)
                )
            );
        }
        test_field_expected_attach_type();
        fn test_field_prog_btf_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_btf_fd) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(prog_btf_fd)
                )
            );
        }
        test_field_prog_btf_fd();
        fn test_field_func_info_rec_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).func_info_rec_size) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(func_info_rec_size)
                )
            );
        }
        test_field_func_info_rec_size();
        fn test_field_func_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).func_info) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(func_info)
                )
            );
        }
        test_field_func_info();
        fn test_field_func_info_cnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).func_info_cnt) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(func_info_cnt)
                )
            );
        }
        test_field_func_info_cnt();
        fn test_field_line_info_rec_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).line_info_rec_size) as usize - ptr as usize
                },
                92usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(line_info_rec_size)
                )
            );
        }
        test_field_line_info_rec_size();
        fn test_field_line_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).line_info) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(line_info)
                )
            );
        }
        test_field_line_info();
        fn test_field_line_info_cnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).line_info_cnt) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(line_info_cnt)
                )
            );
        }
        test_field_line_info_cnt();
        fn test_field_attach_btf_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_btf_id) as usize - ptr as usize
                },
                108usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(attach_btf_id)
                )
            );
        }
        test_field_attach_btf_id();
        fn test_field_attach_prog_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_prog_fd) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_4),
                    "::",
                    stringify!(attach_prog_fd)
                )
            );
        }
        test_field_attach_prog_fd();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_5 {
        pub pathname: __lkl__u64,
        pub bpf_fd: __lkl__u32,
        pub file_flags: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_5() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_5>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_5))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_5>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_5))
        );
        fn test_field_pathname() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_5>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pathname) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_5),
                    "::",
                    stringify!(pathname)
                )
            );
        }
        test_field_pathname();
        fn test_field_bpf_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_5>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bpf_fd) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_5),
                    "::",
                    stringify!(bpf_fd)
                )
            );
        }
        test_field_bpf_fd();
        fn test_field_file_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_5>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).file_flags) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_5),
                    "::",
                    stringify!(file_flags)
                )
            );
        }
        test_field_file_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_6 {
        pub target_fd: __lkl__u32,
        pub attach_bpf_fd: __lkl__u32,
        pub attach_type: __lkl__u32,
        pub attach_flags: __lkl__u32,
        pub replace_bpf_fd: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_6() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_6>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_6))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_6>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_6))
        );
        fn test_field_target_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_6>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).target_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_6),
                    "::",
                    stringify!(target_fd)
                )
            );
        }
        test_field_target_fd();
        fn test_field_attach_bpf_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_6>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_bpf_fd) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_6),
                    "::",
                    stringify!(attach_bpf_fd)
                )
            );
        }
        test_field_attach_bpf_fd();
        fn test_field_attach_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_6>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_type) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_6),
                    "::",
                    stringify!(attach_type)
                )
            );
        }
        test_field_attach_type();
        fn test_field_attach_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_6>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_flags) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_6),
                    "::",
                    stringify!(attach_flags)
                )
            );
        }
        test_field_attach_flags();
        fn test_field_replace_bpf_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_6>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).replace_bpf_fd) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_6),
                    "::",
                    stringify!(replace_bpf_fd)
                )
            );
        }
        test_field_replace_bpf_fd();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_7 {
        pub prog_fd: __lkl__u32,
        pub retval: __lkl__u32,
        pub data_size_in: __lkl__u32,
        pub data_size_out: __lkl__u32,
        pub data_in: __lkl__u64,
        pub data_out: __lkl__u64,
        pub repeat: __lkl__u32,
        pub duration: __lkl__u32,
        pub ctx_size_in: __lkl__u32,
        pub ctx_size_out: __lkl__u32,
        pub ctx_in: __lkl__u64,
        pub ctx_out: __lkl__u64,
        pub flags: __lkl__u32,
        pub cpu: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_7() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_7>(),
            72usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_7))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_7>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_7))
        );
        fn test_field_prog_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(prog_fd)
                )
            );
        }
        test_field_prog_fd();
        fn test_field_retval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).retval) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(retval)
                )
            );
        }
        test_field_retval();
        fn test_field_data_size_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_size_in) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(data_size_in)
                )
            );
        }
        test_field_data_size_in();
        fn test_field_data_size_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_size_out) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(data_size_out)
                )
            );
        }
        test_field_data_size_out();
        fn test_field_data_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_in) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(data_in)
                )
            );
        }
        test_field_data_in();
        fn test_field_data_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_out) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(data_out)
                )
            );
        }
        test_field_data_out();
        fn test_field_repeat() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).repeat) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(repeat)
                )
            );
        }
        test_field_repeat();
        fn test_field_duration() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(duration)
                )
            );
        }
        test_field_duration();
        fn test_field_ctx_size_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ctx_size_in) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(ctx_size_in)
                )
            );
        }
        test_field_ctx_size_in();
        fn test_field_ctx_size_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ctx_size_out) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(ctx_size_out)
                )
            );
        }
        test_field_ctx_size_out();
        fn test_field_ctx_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ctx_in) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(ctx_in)
                )
            );
        }
        test_field_ctx_in();
        fn test_field_ctx_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ctx_out) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(ctx_out)
                )
            );
        }
        test_field_ctx_out();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_cpu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_7),
                    "::",
                    stringify!(cpu)
                )
            );
        }
        test_field_cpu();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_8 {
        pub __bindgen_anon_1: lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1,
        pub next_id: __lkl__u32,
        pub open_flags: __lkl__u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1 {
        pub start_id: __lkl__u32,
        pub prog_id: __lkl__u32,
        pub map_id: __lkl__u32,
        pub btf_id: __lkl__u32,
        pub link_id: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1)
            )
        );
        fn test_field_start_id() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).start_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1),
                    "::",
                    stringify!(start_id)
                )
            );
        }
        test_field_start_id();
        fn test_field_prog_id() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1),
                    "::",
                    stringify!(prog_id)
                )
            );
        }
        test_field_prog_id();
        fn test_field_map_id() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1),
                    "::",
                    stringify!(map_id)
                )
            );
        }
        test_field_map_id();
        fn test_field_btf_id() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1),
                    "::",
                    stringify!(btf_id)
                )
            );
        }
        test_field_btf_id();
        fn test_field_link_id() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).link_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_8__bindgen_ty_1),
                    "::",
                    stringify!(link_id)
                )
            );
        }
        test_field_link_id();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_8() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_8>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_8))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_8>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_8))
        );
        fn test_field_next_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_8>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).next_id) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_8),
                    "::",
                    stringify!(next_id)
                )
            );
        }
        test_field_next_id();
        fn test_field_open_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_8>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).open_flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_8),
                    "::",
                    stringify!(open_flags)
                )
            );
        }
        test_field_open_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_9 {
        pub bpf_fd: __lkl__u32,
        pub info_len: __lkl__u32,
        pub info: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_9() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_9>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_9))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_9>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_9))
        );
        fn test_field_bpf_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_9>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bpf_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_9),
                    "::",
                    stringify!(bpf_fd)
                )
            );
        }
        test_field_bpf_fd();
        fn test_field_info_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_9>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).info_len) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_9),
                    "::",
                    stringify!(info_len)
                )
            );
        }
        test_field_info_len();
        fn test_field_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_9>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_9),
                    "::",
                    stringify!(info)
                )
            );
        }
        test_field_info();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_10 {
        pub target_fd: __lkl__u32,
        pub attach_type: __lkl__u32,
        pub query_flags: __lkl__u32,
        pub attach_flags: __lkl__u32,
        pub prog_ids: __lkl__u64,
        pub prog_cnt: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_10() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_10>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_10))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_10>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_10))
        );
        fn test_field_target_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_10>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).target_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_10),
                    "::",
                    stringify!(target_fd)
                )
            );
        }
        test_field_target_fd();
        fn test_field_attach_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_10>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_type) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_10),
                    "::",
                    stringify!(attach_type)
                )
            );
        }
        test_field_attach_type();
        fn test_field_query_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_10>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).query_flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_10),
                    "::",
                    stringify!(query_flags)
                )
            );
        }
        test_field_query_flags();
        fn test_field_attach_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_10>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_flags) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_10),
                    "::",
                    stringify!(attach_flags)
                )
            );
        }
        test_field_attach_flags();
        fn test_field_prog_ids() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_10>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_ids) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_10),
                    "::",
                    stringify!(prog_ids)
                )
            );
        }
        test_field_prog_ids();
        fn test_field_prog_cnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_10>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_cnt) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_10),
                    "::",
                    stringify!(prog_cnt)
                )
            );
        }
        test_field_prog_cnt();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_11 {
        pub name: __lkl__u64,
        pub prog_fd: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_11() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_11>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_11))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_11>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_11))
        );
        fn test_field_name() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_11>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_11),
                    "::",
                    stringify!(name)
                )
            );
        }
        test_field_name();
        fn test_field_prog_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_11>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_fd) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_11),
                    "::",
                    stringify!(prog_fd)
                )
            );
        }
        test_field_prog_fd();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_12 {
        pub btf: __lkl__u64,
        pub btf_log_buf: __lkl__u64,
        pub btf_size: __lkl__u32,
        pub btf_log_size: __lkl__u32,
        pub btf_log_level: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_12() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_12>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_12))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_12>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_12))
        );
        fn test_field_btf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_12>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_12),
                    "::",
                    stringify!(btf)
                )
            );
        }
        test_field_btf();
        fn test_field_btf_log_buf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_12>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_log_buf) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_12),
                    "::",
                    stringify!(btf_log_buf)
                )
            );
        }
        test_field_btf_log_buf();
        fn test_field_btf_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_12>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_size) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_12),
                    "::",
                    stringify!(btf_size)
                )
            );
        }
        test_field_btf_size();
        fn test_field_btf_log_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_12>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_log_size) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_12),
                    "::",
                    stringify!(btf_log_size)
                )
            );
        }
        test_field_btf_log_size();
        fn test_field_btf_log_level() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_12>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_log_level) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_12),
                    "::",
                    stringify!(btf_log_level)
                )
            );
        }
        test_field_btf_log_level();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_13 {
        pub pid: __lkl__u32,
        pub fd: __lkl__u32,
        pub flags: __lkl__u32,
        pub buf_len: __lkl__u32,
        pub buf: __lkl__u64,
        pub prog_id: __lkl__u32,
        pub fd_type: __lkl__u32,
        pub probe_offset: __lkl__u64,
        pub probe_addr: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_13() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_13>(),
            48usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_13))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_13>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_13))
        );
        fn test_field_pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_13>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_13),
                    "::",
                    stringify!(pid)
                )
            );
        }
        test_field_pid();
        fn test_field_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_13>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_13),
                    "::",
                    stringify!(fd)
                )
            );
        }
        test_field_fd();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_13>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_13),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_buf_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_13>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).buf_len) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_13),
                    "::",
                    stringify!(buf_len)
                )
            );
        }
        test_field_buf_len();
        fn test_field_buf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_13>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_13),
                    "::",
                    stringify!(buf)
                )
            );
        }
        test_field_buf();
        fn test_field_prog_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_13>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_id) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_13),
                    "::",
                    stringify!(prog_id)
                )
            );
        }
        test_field_prog_id();
        fn test_field_fd_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_13>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fd_type) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_13),
                    "::",
                    stringify!(fd_type)
                )
            );
        }
        test_field_fd_type();
        fn test_field_probe_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_13>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).probe_offset) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_13),
                    "::",
                    stringify!(probe_offset)
                )
            );
        }
        test_field_probe_offset();
        fn test_field_probe_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_13>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).probe_addr) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_13),
                    "::",
                    stringify!(probe_addr)
                )
            );
        }
        test_field_probe_addr();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_14 {
        pub prog_fd: __lkl__u32,
        pub __bindgen_anon_1: lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1,
        pub attach_type: __lkl__u32,
        pub flags: __lkl__u32,
        pub __bindgen_anon_2: lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1 {
        pub target_fd: __lkl__u32,
        pub target_ifindex: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1)
            )
        );
        fn test_field_target_fd() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).target_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1),
                    "::",
                    stringify!(target_fd)
                )
            );
        }
        test_field_target_fd();
        fn test_field_target_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).target_ifindex) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_1),
                    "::",
                    stringify!(target_ifindex)
                )
            );
        }
        test_field_target_ifindex();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2 {
        pub target_btf_id: __lkl__u32,
        pub __bindgen_anon_1: lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1 {
        pub iter_info: __lkl__u64,
        pub iter_info_len: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1)
            )
        );
        fn test_field_iter_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).iter_info) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1),
                    "::",
                    stringify!(iter_info)
                )
            );
        }
        test_field_iter_info();
        fn test_field_iter_info_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).iter_info_len) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2__bindgen_ty_1),
                    "::",
                    stringify!(iter_info_len)
                )
            );
        }
        test_field_iter_info_len();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2)
            )
        );
        fn test_field_target_btf_id() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).target_btf_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_14__bindgen_ty_2),
                    "::",
                    stringify!(target_btf_id)
                )
            );
        }
        test_field_target_btf_id();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_14() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_14>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_14))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_14>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_14))
        );
        fn test_field_prog_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_14>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_14),
                    "::",
                    stringify!(prog_fd)
                )
            );
        }
        test_field_prog_fd();
        fn test_field_attach_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_14>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_type) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_14),
                    "::",
                    stringify!(attach_type)
                )
            );
        }
        test_field_attach_type();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_14>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_14),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_15 {
        pub link_fd: __lkl__u32,
        pub new_prog_fd: __lkl__u32,
        pub flags: __lkl__u32,
        pub old_prog_fd: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_15() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_15>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_15))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_15>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_15))
        );
        fn test_field_link_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_15>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).link_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_15),
                    "::",
                    stringify!(link_fd)
                )
            );
        }
        test_field_link_fd();
        fn test_field_new_prog_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_15>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).new_prog_fd) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_15),
                    "::",
                    stringify!(new_prog_fd)
                )
            );
        }
        test_field_new_prog_fd();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_15>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_15),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_old_prog_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_15>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).old_prog_fd) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_15),
                    "::",
                    stringify!(old_prog_fd)
                )
            );
        }
        test_field_old_prog_fd();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_16 {
        pub link_fd: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_16() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_16>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_16))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_16>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_16))
        );
        fn test_field_link_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_16>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).link_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_16),
                    "::",
                    stringify!(link_fd)
                )
            );
        }
        test_field_link_fd();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_17 {
        pub type_: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_17() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_17>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_17))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_17>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_17))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_17>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_17),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_18 {
        pub link_fd: __lkl__u32,
        pub flags: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_18() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_18>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_18))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_18>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_18))
        );
        fn test_field_link_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_18>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).link_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_18),
                    "::",
                    stringify!(link_fd)
                )
            );
        }
        test_field_link_fd();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_18>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_18),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_attr__bindgen_ty_19 {
        pub prog_fd: __lkl__u32,
        pub map_fd: __lkl__u32,
        pub flags: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr__bindgen_ty_19() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr__bindgen_ty_19>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr__bindgen_ty_19))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr__bindgen_ty_19>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr__bindgen_ty_19))
        );
        fn test_field_prog_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_19>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_19),
                    "::",
                    stringify!(prog_fd)
                )
            );
        }
        test_field_prog_fd();
        fn test_field_map_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_19>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_fd) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_19),
                    "::",
                    stringify!(map_fd)
                )
            );
        }
        test_field_map_fd();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr__bindgen_ty_19>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr__bindgen_ty_19),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_attr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_attr>(),
            120usize,
            concat!("Size of: ", stringify!(lkl_bpf_attr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_attr>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_attr))
        );
        fn test_field_batch() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).batch) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(batch)
                )
            );
        }
        test_field_batch();
        fn test_field_test() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).test) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(test)
                )
            );
        }
        test_field_test();
        fn test_field_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(info)
                )
            );
        }
        test_field_info();
        fn test_field_query() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).query) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(query)
                )
            );
        }
        test_field_query();
        fn test_field_raw_tracepoint() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).raw_tracepoint) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(raw_tracepoint)
                )
            );
        }
        test_field_raw_tracepoint();
        fn test_field_task_fd_query() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).task_fd_query) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(task_fd_query)
                )
            );
        }
        test_field_task_fd_query();
        fn test_field_link_create() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).link_create) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(link_create)
                )
            );
        }
        test_field_link_create();
        fn test_field_link_update() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).link_update) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(link_update)
                )
            );
        }
        test_field_link_update();
        fn test_field_link_detach() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).link_detach) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(link_detach)
                )
            );
        }
        test_field_link_detach();
        fn test_field_enable_stats() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).enable_stats) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(enable_stats)
                )
            );
        }
        test_field_enable_stats();
        fn test_field_iter_create() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).iter_create) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(iter_create)
                )
            );
        }
        test_field_iter_create();
        fn test_field_prog_bind_map() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_bind_map) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_attr),
                    "::",
                    stringify!(prog_bind_map)
                )
            );
        }
        test_field_prog_bind_map();
    }
    pub const lkl_bpf_func_id_BPF_FUNC_unspec: lkl_bpf_func_id = 0;
    pub const lkl_bpf_func_id_BPF_FUNC_map_lookup_elem: lkl_bpf_func_id = 1;
    pub const lkl_bpf_func_id_BPF_FUNC_map_update_elem: lkl_bpf_func_id = 2;
    pub const lkl_bpf_func_id_BPF_FUNC_map_delete_elem: lkl_bpf_func_id = 3;
    pub const lkl_bpf_func_id_BPF_FUNC_probe_read: lkl_bpf_func_id = 4;
    pub const lkl_bpf_func_id_BPF_FUNC_ktime_get_ns: lkl_bpf_func_id = 5;
    pub const lkl_bpf_func_id_BPF_FUNC_trace_printk: lkl_bpf_func_id = 6;
    pub const lkl_bpf_func_id_BPF_FUNC_get_prandom_u32: lkl_bpf_func_id = 7;
    pub const lkl_bpf_func_id_BPF_FUNC_get_smp_processor_id: lkl_bpf_func_id = 8;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_store_bytes: lkl_bpf_func_id = 9;
    pub const lkl_bpf_func_id_BPF_FUNC_l3_csum_replace: lkl_bpf_func_id = 10;
    pub const lkl_bpf_func_id_BPF_FUNC_l4_csum_replace: lkl_bpf_func_id = 11;
    pub const lkl_bpf_func_id_BPF_FUNC_tail_call: lkl_bpf_func_id = 12;
    pub const lkl_bpf_func_id_BPF_FUNC_clone_redirect: lkl_bpf_func_id = 13;
    pub const lkl_bpf_func_id_BPF_FUNC_get_current_pid_tgid: lkl_bpf_func_id = 14;
    pub const lkl_bpf_func_id_BPF_FUNC_get_current_uid_gid: lkl_bpf_func_id = 15;
    pub const lkl_bpf_func_id_BPF_FUNC_get_current_comm: lkl_bpf_func_id = 16;
    pub const lkl_bpf_func_id_BPF_FUNC_get_cgroup_classid: lkl_bpf_func_id = 17;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_vlan_push: lkl_bpf_func_id = 18;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_vlan_pop: lkl_bpf_func_id = 19;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_get_tunnel_key: lkl_bpf_func_id = 20;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_set_tunnel_key: lkl_bpf_func_id = 21;
    pub const lkl_bpf_func_id_BPF_FUNC_perf_event_read: lkl_bpf_func_id = 22;
    pub const lkl_bpf_func_id_BPF_FUNC_redirect: lkl_bpf_func_id = 23;
    pub const lkl_bpf_func_id_BPF_FUNC_get_route_realm: lkl_bpf_func_id = 24;
    pub const lkl_bpf_func_id_BPF_FUNC_perf_event_output: lkl_bpf_func_id = 25;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_load_bytes: lkl_bpf_func_id = 26;
    pub const lkl_bpf_func_id_BPF_FUNC_get_stackid: lkl_bpf_func_id = 27;
    pub const lkl_bpf_func_id_BPF_FUNC_csum_diff: lkl_bpf_func_id = 28;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_get_tunnel_opt: lkl_bpf_func_id = 29;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_set_tunnel_opt: lkl_bpf_func_id = 30;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_change_proto: lkl_bpf_func_id = 31;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_change_type: lkl_bpf_func_id = 32;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_under_cgroup: lkl_bpf_func_id = 33;
    pub const lkl_bpf_func_id_BPF_FUNC_get_hash_recalc: lkl_bpf_func_id = 34;
    pub const lkl_bpf_func_id_BPF_FUNC_get_current_task: lkl_bpf_func_id = 35;
    pub const lkl_bpf_func_id_BPF_FUNC_probe_write_user: lkl_bpf_func_id = 36;
    pub const lkl_bpf_func_id_BPF_FUNC_current_task_under_cgroup: lkl_bpf_func_id = 37;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_change_tail: lkl_bpf_func_id = 38;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_pull_data: lkl_bpf_func_id = 39;
    pub const lkl_bpf_func_id_BPF_FUNC_csum_update: lkl_bpf_func_id = 40;
    pub const lkl_bpf_func_id_BPF_FUNC_set_hash_invalid: lkl_bpf_func_id = 41;
    pub const lkl_bpf_func_id_BPF_FUNC_get_numa_node_id: lkl_bpf_func_id = 42;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_change_head: lkl_bpf_func_id = 43;
    pub const lkl_bpf_func_id_BPF_FUNC_xdp_adjust_head: lkl_bpf_func_id = 44;
    pub const lkl_bpf_func_id_BPF_FUNC_probe_read_str: lkl_bpf_func_id = 45;
    pub const lkl_bpf_func_id_BPF_FUNC_get_socket_cookie: lkl_bpf_func_id = 46;
    pub const lkl_bpf_func_id_BPF_FUNC_get_socket_uid: lkl_bpf_func_id = 47;
    pub const lkl_bpf_func_id_BPF_FUNC_set_hash: lkl_bpf_func_id = 48;
    pub const lkl_bpf_func_id_BPF_FUNC_setsockopt: lkl_bpf_func_id = 49;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_adjust_room: lkl_bpf_func_id = 50;
    pub const lkl_bpf_func_id_BPF_FUNC_redirect_map: lkl_bpf_func_id = 51;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_redirect_map: lkl_bpf_func_id = 52;
    pub const lkl_bpf_func_id_BPF_FUNC_sock_map_update: lkl_bpf_func_id = 53;
    pub const lkl_bpf_func_id_BPF_FUNC_xdp_adjust_meta: lkl_bpf_func_id = 54;
    pub const lkl_bpf_func_id_BPF_FUNC_perf_event_read_value: lkl_bpf_func_id = 55;
    pub const lkl_bpf_func_id_BPF_FUNC_perf_prog_read_value: lkl_bpf_func_id = 56;
    pub const lkl_bpf_func_id_BPF_FUNC_getsockopt: lkl_bpf_func_id = 57;
    pub const lkl_bpf_func_id_BPF_FUNC_override_return: lkl_bpf_func_id = 58;
    pub const lkl_bpf_func_id_BPF_FUNC_sock_ops_cb_flags_set: lkl_bpf_func_id = 59;
    pub const lkl_bpf_func_id_BPF_FUNC_msg_redirect_map: lkl_bpf_func_id = 60;
    pub const lkl_bpf_func_id_BPF_FUNC_msg_apply_bytes: lkl_bpf_func_id = 61;
    pub const lkl_bpf_func_id_BPF_FUNC_msg_cork_bytes: lkl_bpf_func_id = 62;
    pub const lkl_bpf_func_id_BPF_FUNC_msg_pull_data: lkl_bpf_func_id = 63;
    pub const lkl_bpf_func_id_BPF_FUNC_bind: lkl_bpf_func_id = 64;
    pub const lkl_bpf_func_id_BPF_FUNC_xdp_adjust_tail: lkl_bpf_func_id = 65;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_get_xfrm_state: lkl_bpf_func_id = 66;
    pub const lkl_bpf_func_id_BPF_FUNC_get_stack: lkl_bpf_func_id = 67;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_load_bytes_relative: lkl_bpf_func_id = 68;
    pub const lkl_bpf_func_id_BPF_FUNC_fib_lookup: lkl_bpf_func_id = 69;
    pub const lkl_bpf_func_id_BPF_FUNC_sock_hash_update: lkl_bpf_func_id = 70;
    pub const lkl_bpf_func_id_BPF_FUNC_msg_redirect_hash: lkl_bpf_func_id = 71;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_redirect_hash: lkl_bpf_func_id = 72;
    pub const lkl_bpf_func_id_BPF_FUNC_lwt_push_encap: lkl_bpf_func_id = 73;
    pub const lkl_bpf_func_id_BPF_FUNC_lwt_seg6_store_bytes: lkl_bpf_func_id = 74;
    pub const lkl_bpf_func_id_BPF_FUNC_lwt_seg6_adjust_srh: lkl_bpf_func_id = 75;
    pub const lkl_bpf_func_id_BPF_FUNC_lwt_seg6_action: lkl_bpf_func_id = 76;
    pub const lkl_bpf_func_id_BPF_FUNC_rc_repeat: lkl_bpf_func_id = 77;
    pub const lkl_bpf_func_id_BPF_FUNC_rc_keydown: lkl_bpf_func_id = 78;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_cgroup_id: lkl_bpf_func_id = 79;
    pub const lkl_bpf_func_id_BPF_FUNC_get_current_cgroup_id: lkl_bpf_func_id = 80;
    pub const lkl_bpf_func_id_BPF_FUNC_get_local_storage: lkl_bpf_func_id = 81;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_select_reuseport: lkl_bpf_func_id = 82;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_ancestor_cgroup_id: lkl_bpf_func_id = 83;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_lookup_tcp: lkl_bpf_func_id = 84;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_lookup_udp: lkl_bpf_func_id = 85;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_release: lkl_bpf_func_id = 86;
    pub const lkl_bpf_func_id_BPF_FUNC_map_push_elem: lkl_bpf_func_id = 87;
    pub const lkl_bpf_func_id_BPF_FUNC_map_pop_elem: lkl_bpf_func_id = 88;
    pub const lkl_bpf_func_id_BPF_FUNC_map_peek_elem: lkl_bpf_func_id = 89;
    pub const lkl_bpf_func_id_BPF_FUNC_msg_push_data: lkl_bpf_func_id = 90;
    pub const lkl_bpf_func_id_BPF_FUNC_msg_pop_data: lkl_bpf_func_id = 91;
    pub const lkl_bpf_func_id_BPF_FUNC_rc_pointer_rel: lkl_bpf_func_id = 92;
    pub const lkl_bpf_func_id_BPF_FUNC_spin_lock: lkl_bpf_func_id = 93;
    pub const lkl_bpf_func_id_BPF_FUNC_spin_unlock: lkl_bpf_func_id = 94;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_fullsock: lkl_bpf_func_id = 95;
    pub const lkl_bpf_func_id_BPF_FUNC_tcp_sock: lkl_bpf_func_id = 96;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_ecn_set_ce: lkl_bpf_func_id = 97;
    pub const lkl_bpf_func_id_BPF_FUNC_get_listener_sock: lkl_bpf_func_id = 98;
    pub const lkl_bpf_func_id_BPF_FUNC_skc_lookup_tcp: lkl_bpf_func_id = 99;
    pub const lkl_bpf_func_id_BPF_FUNC_tcp_check_syncookie: lkl_bpf_func_id = 100;
    pub const lkl_bpf_func_id_BPF_FUNC_sysctl_get_name: lkl_bpf_func_id = 101;
    pub const lkl_bpf_func_id_BPF_FUNC_sysctl_get_current_value: lkl_bpf_func_id = 102;
    pub const lkl_bpf_func_id_BPF_FUNC_sysctl_get_new_value: lkl_bpf_func_id = 103;
    pub const lkl_bpf_func_id_BPF_FUNC_sysctl_set_new_value: lkl_bpf_func_id = 104;
    pub const lkl_bpf_func_id_BPF_FUNC_strtol: lkl_bpf_func_id = 105;
    pub const lkl_bpf_func_id_BPF_FUNC_strtoul: lkl_bpf_func_id = 106;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_storage_get: lkl_bpf_func_id = 107;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_storage_delete: lkl_bpf_func_id = 108;
    pub const lkl_bpf_func_id_BPF_FUNC_send_signal: lkl_bpf_func_id = 109;
    pub const lkl_bpf_func_id_BPF_FUNC_tcp_gen_syncookie: lkl_bpf_func_id = 110;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_output: lkl_bpf_func_id = 111;
    pub const lkl_bpf_func_id_BPF_FUNC_probe_read_user: lkl_bpf_func_id = 112;
    pub const lkl_bpf_func_id_BPF_FUNC_probe_read_kernel: lkl_bpf_func_id = 113;
    pub const lkl_bpf_func_id_BPF_FUNC_probe_read_user_str: lkl_bpf_func_id = 114;
    pub const lkl_bpf_func_id_BPF_FUNC_probe_read_kernel_str: lkl_bpf_func_id = 115;
    pub const lkl_bpf_func_id_BPF_FUNC_tcp_send_ack: lkl_bpf_func_id = 116;
    pub const lkl_bpf_func_id_BPF_FUNC_send_signal_thread: lkl_bpf_func_id = 117;
    pub const lkl_bpf_func_id_BPF_FUNC_jiffies64: lkl_bpf_func_id = 118;
    pub const lkl_bpf_func_id_BPF_FUNC_read_branch_records: lkl_bpf_func_id = 119;
    pub const lkl_bpf_func_id_BPF_FUNC_get_ns_current_pid_tgid: lkl_bpf_func_id = 120;
    pub const lkl_bpf_func_id_BPF_FUNC_xdp_output: lkl_bpf_func_id = 121;
    pub const lkl_bpf_func_id_BPF_FUNC_get_netns_cookie: lkl_bpf_func_id = 122;
    pub const lkl_bpf_func_id_BPF_FUNC_get_current_ancestor_cgroup_id: lkl_bpf_func_id = 123;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_assign: lkl_bpf_func_id = 124;
    pub const lkl_bpf_func_id_BPF_FUNC_ktime_get_boot_ns: lkl_bpf_func_id = 125;
    pub const lkl_bpf_func_id_BPF_FUNC_seq_printf: lkl_bpf_func_id = 126;
    pub const lkl_bpf_func_id_BPF_FUNC_seq_write: lkl_bpf_func_id = 127;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_cgroup_id: lkl_bpf_func_id = 128;
    pub const lkl_bpf_func_id_BPF_FUNC_sk_ancestor_cgroup_id: lkl_bpf_func_id = 129;
    pub const lkl_bpf_func_id_BPF_FUNC_ringbuf_output: lkl_bpf_func_id = 130;
    pub const lkl_bpf_func_id_BPF_FUNC_ringbuf_reserve: lkl_bpf_func_id = 131;
    pub const lkl_bpf_func_id_BPF_FUNC_ringbuf_submit: lkl_bpf_func_id = 132;
    pub const lkl_bpf_func_id_BPF_FUNC_ringbuf_discard: lkl_bpf_func_id = 133;
    pub const lkl_bpf_func_id_BPF_FUNC_ringbuf_query: lkl_bpf_func_id = 134;
    pub const lkl_bpf_func_id_BPF_FUNC_csum_level: lkl_bpf_func_id = 135;
    pub const lkl_bpf_func_id_BPF_FUNC_skc_to_tcp6_sock: lkl_bpf_func_id = 136;
    pub const lkl_bpf_func_id_BPF_FUNC_skc_to_tcp_sock: lkl_bpf_func_id = 137;
    pub const lkl_bpf_func_id_BPF_FUNC_skc_to_tcp_timewait_sock: lkl_bpf_func_id = 138;
    pub const lkl_bpf_func_id_BPF_FUNC_skc_to_tcp_request_sock: lkl_bpf_func_id = 139;
    pub const lkl_bpf_func_id_BPF_FUNC_skc_to_udp6_sock: lkl_bpf_func_id = 140;
    pub const lkl_bpf_func_id_BPF_FUNC_get_task_stack: lkl_bpf_func_id = 141;
    pub const lkl_bpf_func_id_BPF_FUNC_load_hdr_opt: lkl_bpf_func_id = 142;
    pub const lkl_bpf_func_id_BPF_FUNC_store_hdr_opt: lkl_bpf_func_id = 143;
    pub const lkl_bpf_func_id_BPF_FUNC_reserve_hdr_opt: lkl_bpf_func_id = 144;
    pub const lkl_bpf_func_id_BPF_FUNC_inode_storage_get: lkl_bpf_func_id = 145;
    pub const lkl_bpf_func_id_BPF_FUNC_inode_storage_delete: lkl_bpf_func_id = 146;
    pub const lkl_bpf_func_id_BPF_FUNC_d_path: lkl_bpf_func_id = 147;
    pub const lkl_bpf_func_id_BPF_FUNC_copy_from_user: lkl_bpf_func_id = 148;
    pub const lkl_bpf_func_id_BPF_FUNC_snprintf_btf: lkl_bpf_func_id = 149;
    pub const lkl_bpf_func_id_BPF_FUNC_seq_printf_btf: lkl_bpf_func_id = 150;
    pub const lkl_bpf_func_id_BPF_FUNC_skb_cgroup_classid: lkl_bpf_func_id = 151;
    pub const lkl_bpf_func_id_BPF_FUNC_redirect_neigh: lkl_bpf_func_id = 152;
    pub const lkl_bpf_func_id_BPF_FUNC_per_cpu_ptr: lkl_bpf_func_id = 153;
    pub const lkl_bpf_func_id_BPF_FUNC_this_cpu_ptr: lkl_bpf_func_id = 154;
    pub const lkl_bpf_func_id_BPF_FUNC_redirect_peer: lkl_bpf_func_id = 155;
    pub const lkl_bpf_func_id___LKL__BPF_FUNC_MAX_ID: lkl_bpf_func_id = 156;
    pub type lkl_bpf_func_id = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_RECOMPUTE_CSUM: _bindgen_ty_4 = 1;
    pub const LKL_BPF_F_INVALIDATE_HASH: _bindgen_ty_4 = 2;
    pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_HDR_FIELD_MASK: _bindgen_ty_5 = 15;
    pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_PSEUDO_HDR: _bindgen_ty_6 = 16;
    pub const LKL_BPF_F_MARK_MANGLED_0: _bindgen_ty_6 = 32;
    pub const LKL_BPF_F_MARK_ENFORCE: _bindgen_ty_6 = 64;
    pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_INGRESS: _bindgen_ty_7 = 1;
    pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_TUNINFO_IPV6: _bindgen_ty_8 = 1;
    pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_SKIP_FIELD_MASK: _bindgen_ty_9 = 255;
    pub const LKL_BPF_F_USER_STACK: _bindgen_ty_9 = 256;
    pub const LKL_BPF_F_FAST_STACK_CMP: _bindgen_ty_9 = 512;
    pub const LKL_BPF_F_REUSE_STACKID: _bindgen_ty_9 = 1024;
    pub const LKL_BPF_F_USER_BUILD_ID: _bindgen_ty_9 = 2048;
    pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_ZERO_CSUM_TX: _bindgen_ty_10 = 2;
    pub const LKL_BPF_F_DONT_FRAGMENT: _bindgen_ty_10 = 4;
    pub const LKL_BPF_F_SEQ_NUMBER: _bindgen_ty_10 = 8;
    pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_INDEX_MASK: _bindgen_ty_11 = 4294967295;
    pub const LKL_BPF_F_CURRENT_CPU: _bindgen_ty_11 = 4294967295;
    pub const LKL_BPF_F_CTXLEN_MASK: _bindgen_ty_11 = 4503595332403200;
    pub type _bindgen_ty_11 = ::std::os::raw::c_ulong;
    pub const LKL_BPF_F_CURRENT_NETNS: _bindgen_ty_12 = -1;
    pub type _bindgen_ty_12 = ::std::os::raw::c_int;
    pub const LKL_BPF_CSUM_LEVEL_QUERY: _bindgen_ty_13 = 0;
    pub const LKL_BPF_CSUM_LEVEL_INC: _bindgen_ty_13 = 1;
    pub const LKL_BPF_CSUM_LEVEL_DEC: _bindgen_ty_13 = 2;
    pub const LKL_BPF_CSUM_LEVEL_RESET: _bindgen_ty_13 = 3;
    pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_ADJ_ROOM_FIXED_GSO: _bindgen_ty_14 = 1;
    pub const LKL_BPF_F_ADJ_ROOM_ENCAP_L3_IPV4: _bindgen_ty_14 = 2;
    pub const LKL_BPF_F_ADJ_ROOM_ENCAP_L3_IPV6: _bindgen_ty_14 = 4;
    pub const LKL_BPF_F_ADJ_ROOM_ENCAP_L4_GRE: _bindgen_ty_14 = 8;
    pub const LKL_BPF_F_ADJ_ROOM_ENCAP_L4_UDP: _bindgen_ty_14 = 16;
    pub const LKL_BPF_F_ADJ_ROOM_NO_CSUM_RESET: _bindgen_ty_14 = 32;
    pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
    pub const LKL_BPF_ADJ_ROOM_ENCAP_L2_MASK: _bindgen_ty_15 = 255;
    pub const LKL_BPF_ADJ_ROOM_ENCAP_L2_SHIFT: _bindgen_ty_15 = 56;
    pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_SYSCTL_BASE_NAME: _bindgen_ty_16 = 1;
    pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
    pub const LKL_BPF_LOCAL_STORAGE_GET_F_CREATE: _bindgen_ty_17 = 1;
    pub const LKL_BPF_SK_STORAGE_GET_F_CREATE: _bindgen_ty_17 = 1;
    pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
    pub const LKL_BPF_F_GET_BRANCH_RECORDS_SIZE: _bindgen_ty_18 = 1;
    pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
    pub const LKL_BPF_RB_NO_WAKEUP: _bindgen_ty_19 = 1;
    pub const LKL_BPF_RB_FORCE_WAKEUP: _bindgen_ty_19 = 2;
    pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
    pub const LKL_BPF_RB_AVAIL_DATA: _bindgen_ty_20 = 0;
    pub const LKL_BPF_RB_RING_SIZE: _bindgen_ty_20 = 1;
    pub const LKL_BPF_RB_CONS_POS: _bindgen_ty_20 = 2;
    pub const LKL_BPF_RB_PROD_POS: _bindgen_ty_20 = 3;
    pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
    pub const LKL_BPF_RINGBUF_BUSY_BIT: _bindgen_ty_21 = 2147483648;
    pub const LKL_BPF_RINGBUF_DISCARD_BIT: _bindgen_ty_21 = 1073741824;
    pub const LKL_BPF_RINGBUF_HDR_SZ: _bindgen_ty_21 = 8;
    pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
    pub const LKL_BPF_SK_LOOKUP_F_REPLACE: _bindgen_ty_22 = 1;
    pub const LKL_BPF_SK_LOOKUP_F_NO_REUSEPORT: _bindgen_ty_22 = 2;
    pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
    pub const lkl_bpf_adj_room_mode_LKL_BPF_ADJ_ROOM_NET: lkl_bpf_adj_room_mode = 0;
    pub const lkl_bpf_adj_room_mode_LKL_BPF_ADJ_ROOM_MAC: lkl_bpf_adj_room_mode = 1;
    pub type lkl_bpf_adj_room_mode = ::std::os::raw::c_uint;
    pub const lkl_bpf_hdr_start_off_LKL_BPF_HDR_START_MAC: lkl_bpf_hdr_start_off = 0;
    pub const lkl_bpf_hdr_start_off_LKL_BPF_HDR_START_NET: lkl_bpf_hdr_start_off = 1;
    pub type lkl_bpf_hdr_start_off = ::std::os::raw::c_uint;
    pub const lkl_bpf_lwt_encap_mode_LKL_BPF_LWT_ENCAP_SEG6: lkl_bpf_lwt_encap_mode = 0;
    pub const lkl_bpf_lwt_encap_mode_LKL_BPF_LWT_ENCAP_SEG6_INLINE: lkl_bpf_lwt_encap_mode = 1;
    pub const lkl_bpf_lwt_encap_mode_LKL_BPF_LWT_ENCAP_IP: lkl_bpf_lwt_encap_mode = 2;
    pub type lkl_bpf_lwt_encap_mode = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __lkl__sk_buff {
        pub len: __lkl__u32,
        pub pkt_type: __lkl__u32,
        pub mark: __lkl__u32,
        pub queue_mapping: __lkl__u32,
        pub protocol: __lkl__u32,
        pub vlan_present: __lkl__u32,
        pub vlan_tci: __lkl__u32,
        pub vlan_proto: __lkl__u32,
        pub priority: __lkl__u32,
        pub ingress_ifindex: __lkl__u32,
        pub ifindex: __lkl__u32,
        pub tc_index: __lkl__u32,
        pub cb: [__lkl__u32; 5usize],
        pub hash: __lkl__u32,
        pub tc_classid: __lkl__u32,
        pub data: __lkl__u32,
        pub data_end: __lkl__u32,
        pub napi_id: __lkl__u32,
        pub family: __lkl__u32,
        pub remote_ip4: __lkl__u32,
        pub local_ip4: __lkl__u32,
        pub remote_ip6: [__lkl__u32; 4usize],
        pub local_ip6: [__lkl__u32; 4usize],
        pub remote_port: __lkl__u32,
        pub local_port: __lkl__u32,
        pub data_meta: __lkl__u32,
        pub __bindgen_anon_1: __lkl__sk_buff__bindgen_ty_1,
        pub tstamp: __lkl__u64,
        pub wire_len: __lkl__u32,
        pub gso_segs: __lkl__u32,
        pub __bindgen_anon_2: __lkl__sk_buff__bindgen_ty_2,
        pub gso_size: __lkl__u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __lkl__sk_buff__bindgen_ty_1 {
        pub flow_keys: *mut lkl_bpf_flow_keys,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout___lkl__sk_buff__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sk_buff__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(__lkl__sk_buff__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sk_buff__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__sk_buff__bindgen_ty_1))
        );
        fn test_field_flow_keys() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flow_keys) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff__bindgen_ty_1),
                    "::",
                    stringify!(flow_keys)
                )
            );
        }
        test_field_flow_keys();
    }
    impl __lkl__sk_buff__bindgen_ty_1 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __lkl__sk_buff__bindgen_ty_2 {
        pub sk: *mut lkl_bpf_sock,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout___lkl__sk_buff__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sk_buff__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(__lkl__sk_buff__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sk_buff__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__sk_buff__bindgen_ty_2))
        );
        fn test_field_sk() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sk) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff__bindgen_ty_2),
                    "::",
                    stringify!(sk)
                )
            );
        }
        test_field_sk();
    }
    impl __lkl__sk_buff__bindgen_ty_2 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[test]
    fn bindgen_test_layout___lkl__sk_buff() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sk_buff>(),
            184usize,
            concat!("Size of: ", stringify!(__lkl__sk_buff))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sk_buff>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__sk_buff))
        );
        fn test_field_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(len)
                )
            );
        }
        test_field_len();
        fn test_field_pkt_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pkt_type) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(pkt_type)
                )
            );
        }
        test_field_pkt_type();
        fn test_field_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mark) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(mark)
                )
            );
        }
        test_field_mark();
        fn test_field_queue_mapping() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).queue_mapping) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(queue_mapping)
                )
            );
        }
        test_field_queue_mapping();
        fn test_field_protocol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(protocol)
                )
            );
        }
        test_field_protocol();
        fn test_field_vlan_present() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vlan_present) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(vlan_present)
                )
            );
        }
        test_field_vlan_present();
        fn test_field_vlan_tci() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vlan_tci) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(vlan_tci)
                )
            );
        }
        test_field_vlan_tci();
        fn test_field_vlan_proto() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vlan_proto) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(vlan_proto)
                )
            );
        }
        test_field_vlan_proto();
        fn test_field_priority() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(priority)
                )
            );
        }
        test_field_priority();
        fn test_field_ingress_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ingress_ifindex) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(ingress_ifindex)
                )
            );
        }
        test_field_ingress_ifindex();
        fn test_field_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifindex) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(ifindex)
                )
            );
        }
        test_field_ifindex();
        fn test_field_tc_index() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tc_index) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(tc_index)
                )
            );
        }
        test_field_tc_index();
        fn test_field_cb() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(cb)
                )
            );
        }
        test_field_cb();
        fn test_field_hash() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(hash)
                )
            );
        }
        test_field_hash();
        fn test_field_tc_classid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tc_classid) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(tc_classid)
                )
            );
        }
        test_field_tc_classid();
        fn test_field_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(data)
                )
            );
        }
        test_field_data();
        fn test_field_data_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_end) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(data_end)
                )
            );
        }
        test_field_data_end();
        fn test_field_napi_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).napi_id) as usize - ptr as usize
                },
                84usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(napi_id)
                )
            );
        }
        test_field_napi_id();
        fn test_field_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(family)
                )
            );
        }
        test_field_family();
        fn test_field_remote_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ip4) as usize - ptr as usize
                },
                92usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(remote_ip4)
                )
            );
        }
        test_field_remote_ip4();
        fn test_field_local_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_ip4) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(local_ip4)
                )
            );
        }
        test_field_local_ip4();
        fn test_field_remote_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ip6) as usize - ptr as usize
                },
                100usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(remote_ip6)
                )
            );
        }
        test_field_remote_ip6();
        fn test_field_local_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_ip6) as usize - ptr as usize
                },
                116usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(local_ip6)
                )
            );
        }
        test_field_local_ip6();
        fn test_field_remote_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_port) as usize - ptr as usize
                },
                132usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(remote_port)
                )
            );
        }
        test_field_remote_port();
        fn test_field_local_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_port) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(local_port)
                )
            );
        }
        test_field_local_port();
        fn test_field_data_meta() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_meta) as usize - ptr as usize
                },
                140usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(data_meta)
                )
            );
        }
        test_field_data_meta();
        fn test_field_tstamp() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tstamp) as usize - ptr as usize
                },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(tstamp)
                )
            );
        }
        test_field_tstamp();
        fn test_field_wire_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).wire_len) as usize - ptr as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(wire_len)
                )
            );
        }
        test_field_wire_len();
        fn test_field_gso_segs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gso_segs) as usize - ptr as usize
                },
                164usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(gso_segs)
                )
            );
        }
        test_field_gso_segs();
        fn test_field_gso_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sk_buff>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gso_size) as usize - ptr as usize
                },
                176usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sk_buff),
                    "::",
                    stringify!(gso_size)
                )
            );
        }
        test_field_gso_size();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_tunnel_key {
        pub tunnel_id: __lkl__u32,
        pub __bindgen_anon_1: lkl_bpf_tunnel_key__bindgen_ty_1,
        pub tunnel_tos: __lkl__u8,
        pub tunnel_ttl: __lkl__u8,
        pub tunnel_ext: __lkl__u16,
        pub tunnel_label: __lkl__u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_tunnel_key__bindgen_ty_1 {
        pub remote_ipv4: __lkl__u32,
        pub remote_ipv6: [__lkl__u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_tunnel_key__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_tunnel_key__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_tunnel_key__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_tunnel_key__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_tunnel_key__bindgen_ty_1)
            )
        );
        fn test_field_remote_ipv4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tunnel_key__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ipv4) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tunnel_key__bindgen_ty_1),
                    "::",
                    stringify!(remote_ipv4)
                )
            );
        }
        test_field_remote_ipv4();
        fn test_field_remote_ipv6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tunnel_key__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ipv6) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tunnel_key__bindgen_ty_1),
                    "::",
                    stringify!(remote_ipv6)
                )
            );
        }
        test_field_remote_ipv6();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_tunnel_key() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_tunnel_key>(),
            28usize,
            concat!("Size of: ", stringify!(lkl_bpf_tunnel_key))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_tunnel_key>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_tunnel_key))
        );
        fn test_field_tunnel_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tunnel_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tunnel_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tunnel_key),
                    "::",
                    stringify!(tunnel_id)
                )
            );
        }
        test_field_tunnel_id();
        fn test_field_tunnel_tos() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tunnel_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tunnel_tos) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tunnel_key),
                    "::",
                    stringify!(tunnel_tos)
                )
            );
        }
        test_field_tunnel_tos();
        fn test_field_tunnel_ttl() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tunnel_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tunnel_ttl) as usize - ptr as usize
                },
                21usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tunnel_key),
                    "::",
                    stringify!(tunnel_ttl)
                )
            );
        }
        test_field_tunnel_ttl();
        fn test_field_tunnel_ext() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tunnel_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tunnel_ext) as usize - ptr as usize
                },
                22usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tunnel_key),
                    "::",
                    stringify!(tunnel_ext)
                )
            );
        }
        test_field_tunnel_ext();
        fn test_field_tunnel_label() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tunnel_key>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tunnel_label) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tunnel_key),
                    "::",
                    stringify!(tunnel_label)
                )
            );
        }
        test_field_tunnel_label();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_xfrm_state {
        pub reqid: __lkl__u32,
        pub spi: __lkl__u32,
        pub family: __lkl__u16,
        pub ext: __lkl__u16,
        pub __bindgen_anon_1: lkl_bpf_xfrm_state__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_xfrm_state__bindgen_ty_1 {
        pub remote_ipv4: __lkl__u32,
        pub remote_ipv6: [__lkl__u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_xfrm_state__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_xfrm_state__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_xfrm_state__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_xfrm_state__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_xfrm_state__bindgen_ty_1)
            )
        );
        fn test_field_remote_ipv4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_xfrm_state__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ipv4) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_xfrm_state__bindgen_ty_1),
                    "::",
                    stringify!(remote_ipv4)
                )
            );
        }
        test_field_remote_ipv4();
        fn test_field_remote_ipv6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_xfrm_state__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ipv6) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_xfrm_state__bindgen_ty_1),
                    "::",
                    stringify!(remote_ipv6)
                )
            );
        }
        test_field_remote_ipv6();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_xfrm_state() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_xfrm_state>(),
            28usize,
            concat!("Size of: ", stringify!(lkl_bpf_xfrm_state))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_xfrm_state>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_xfrm_state))
        );
        fn test_field_reqid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_xfrm_state>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reqid) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_xfrm_state),
                    "::",
                    stringify!(reqid)
                )
            );
        }
        test_field_reqid();
        fn test_field_spi() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_xfrm_state>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).spi) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_xfrm_state),
                    "::",
                    stringify!(spi)
                )
            );
        }
        test_field_spi();
        fn test_field_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_xfrm_state>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_xfrm_state),
                    "::",
                    stringify!(family)
                )
            );
        }
        test_field_family();
        fn test_field_ext() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_xfrm_state>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ext) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_xfrm_state),
                    "::",
                    stringify!(ext)
                )
            );
        }
        test_field_ext();
    }
    pub const lkl_bpf_ret_code_LKL_BPF_OK: lkl_bpf_ret_code = 0;
    pub const lkl_bpf_ret_code_LKL_BPF_DROP: lkl_bpf_ret_code = 2;
    pub const lkl_bpf_ret_code_LKL_BPF_REDIRECT: lkl_bpf_ret_code = 7;
    pub const lkl_bpf_ret_code_LKL_BPF_LWT_REROUTE: lkl_bpf_ret_code = 128;
    pub type lkl_bpf_ret_code = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_sock {
        pub bound_dev_if: __lkl__u32,
        pub family: __lkl__u32,
        pub type_: __lkl__u32,
        pub protocol: __lkl__u32,
        pub mark: __lkl__u32,
        pub priority: __lkl__u32,
        pub src_ip4: __lkl__u32,
        pub src_ip6: [__lkl__u32; 4usize],
        pub src_port: __lkl__u32,
        pub dst_port: __lkl__u32,
        pub dst_ip4: __lkl__u32,
        pub dst_ip6: [__lkl__u32; 4usize],
        pub state: __lkl__u32,
        pub rx_queue_mapping: __lkl__s32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock>(),
            80usize,
            concat!("Size of: ", stringify!(lkl_bpf_sock))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sock))
        );
        fn test_field_bound_dev_if() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bound_dev_if) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(bound_dev_if)
                )
            );
        }
        test_field_bound_dev_if();
        fn test_field_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(family)
                )
            );
        }
        test_field_family();
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_protocol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(protocol)
                )
            );
        }
        test_field_protocol();
        fn test_field_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mark) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(mark)
                )
            );
        }
        test_field_mark();
        fn test_field_priority() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(priority)
                )
            );
        }
        test_field_priority();
        fn test_field_src_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).src_ip4) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(src_ip4)
                )
            );
        }
        test_field_src_ip4();
        fn test_field_src_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).src_ip6) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(src_ip6)
                )
            );
        }
        test_field_src_ip6();
        fn test_field_src_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).src_port) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(src_port)
                )
            );
        }
        test_field_src_port();
        fn test_field_dst_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dst_port) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(dst_port)
                )
            );
        }
        test_field_dst_port();
        fn test_field_dst_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dst_ip4) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(dst_ip4)
                )
            );
        }
        test_field_dst_ip4();
        fn test_field_dst_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dst_ip6) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(dst_ip6)
                )
            );
        }
        test_field_dst_ip6();
        fn test_field_state() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(state)
                )
            );
        }
        test_field_state();
        fn test_field_rx_queue_mapping() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_queue_mapping) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock),
                    "::",
                    stringify!(rx_queue_mapping)
                )
            );
        }
        test_field_rx_queue_mapping();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_tcp_sock {
        pub snd_cwnd: __lkl__u32,
        pub srtt_us: __lkl__u32,
        pub rtt_min: __lkl__u32,
        pub snd_ssthresh: __lkl__u32,
        pub rcv_nxt: __lkl__u32,
        pub snd_nxt: __lkl__u32,
        pub snd_una: __lkl__u32,
        pub mss_cache: __lkl__u32,
        pub ecn_flags: __lkl__u32,
        pub rate_delivered: __lkl__u32,
        pub rate_interval_us: __lkl__u32,
        pub packets_out: __lkl__u32,
        pub retrans_out: __lkl__u32,
        pub total_retrans: __lkl__u32,
        pub segs_in: __lkl__u32,
        pub data_segs_in: __lkl__u32,
        pub segs_out: __lkl__u32,
        pub data_segs_out: __lkl__u32,
        pub lost_out: __lkl__u32,
        pub sacked_out: __lkl__u32,
        pub bytes_received: __lkl__u64,
        pub bytes_acked: __lkl__u64,
        pub dsack_dups: __lkl__u32,
        pub delivered: __lkl__u32,
        pub delivered_ce: __lkl__u32,
        pub icsk_retransmits: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_tcp_sock() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_tcp_sock>(),
            112usize,
            concat!("Size of: ", stringify!(lkl_bpf_tcp_sock))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_tcp_sock>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_tcp_sock))
        );
        fn test_field_snd_cwnd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).snd_cwnd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(snd_cwnd)
                )
            );
        }
        test_field_snd_cwnd();
        fn test_field_srtt_us() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).srtt_us) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(srtt_us)
                )
            );
        }
        test_field_srtt_us();
        fn test_field_rtt_min() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtt_min) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(rtt_min)
                )
            );
        }
        test_field_rtt_min();
        fn test_field_snd_ssthresh() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).snd_ssthresh) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(snd_ssthresh)
                )
            );
        }
        test_field_snd_ssthresh();
        fn test_field_rcv_nxt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rcv_nxt) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(rcv_nxt)
                )
            );
        }
        test_field_rcv_nxt();
        fn test_field_snd_nxt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).snd_nxt) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(snd_nxt)
                )
            );
        }
        test_field_snd_nxt();
        fn test_field_snd_una() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).snd_una) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(snd_una)
                )
            );
        }
        test_field_snd_una();
        fn test_field_mss_cache() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mss_cache) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(mss_cache)
                )
            );
        }
        test_field_mss_cache();
        fn test_field_ecn_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ecn_flags) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(ecn_flags)
                )
            );
        }
        test_field_ecn_flags();
        fn test_field_rate_delivered() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rate_delivered) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(rate_delivered)
                )
            );
        }
        test_field_rate_delivered();
        fn test_field_rate_interval_us() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rate_interval_us) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(rate_interval_us)
                )
            );
        }
        test_field_rate_interval_us();
        fn test_field_packets_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).packets_out) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(packets_out)
                )
            );
        }
        test_field_packets_out();
        fn test_field_retrans_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).retrans_out) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(retrans_out)
                )
            );
        }
        test_field_retrans_out();
        fn test_field_total_retrans() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).total_retrans) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(total_retrans)
                )
            );
        }
        test_field_total_retrans();
        fn test_field_segs_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).segs_in) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(segs_in)
                )
            );
        }
        test_field_segs_in();
        fn test_field_data_segs_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_segs_in) as usize - ptr as usize
                },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(data_segs_in)
                )
            );
        }
        test_field_data_segs_in();
        fn test_field_segs_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).segs_out) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(segs_out)
                )
            );
        }
        test_field_segs_out();
        fn test_field_data_segs_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_segs_out) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(data_segs_out)
                )
            );
        }
        test_field_data_segs_out();
        fn test_field_lost_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lost_out) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(lost_out)
                )
            );
        }
        test_field_lost_out();
        fn test_field_sacked_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sacked_out) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(sacked_out)
                )
            );
        }
        test_field_sacked_out();
        fn test_field_bytes_received() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bytes_received) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(bytes_received)
                )
            );
        }
        test_field_bytes_received();
        fn test_field_bytes_acked() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bytes_acked) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(bytes_acked)
                )
            );
        }
        test_field_bytes_acked();
        fn test_field_dsack_dups() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dsack_dups) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(dsack_dups)
                )
            );
        }
        test_field_dsack_dups();
        fn test_field_delivered() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).delivered) as usize - ptr as usize
                },
                100usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(delivered)
                )
            );
        }
        test_field_delivered();
        fn test_field_delivered_ce() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).delivered_ce) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(delivered_ce)
                )
            );
        }
        test_field_delivered_ce();
        fn test_field_icsk_retransmits() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_tcp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).icsk_retransmits) as usize - ptr as usize
                },
                108usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_tcp_sock),
                    "::",
                    stringify!(icsk_retransmits)
                )
            );
        }
        test_field_icsk_retransmits();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_sock_tuple {
        pub __bindgen_anon_1: lkl_bpf_sock_tuple__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_sock_tuple__bindgen_ty_1 {
        pub ipv4: lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1,
        pub ipv6: lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1 {
        pub saddr: __lkl__be32,
        pub daddr: __lkl__be32,
        pub sport: __lkl__be16,
        pub dport: __lkl__be16,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1>(),
            12usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field_saddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).saddr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(saddr)
                )
            );
        }
        test_field_saddr();
        fn test_field_daddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).daddr) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(daddr)
                )
            );
        }
        test_field_daddr();
        fn test_field_sport() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sport) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(sport)
                )
            );
        }
        test_field_sport();
        fn test_field_dport() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dport) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(dport)
                )
            );
        }
        test_field_dport();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2 {
        pub saddr: [__lkl__be32; 4usize],
        pub daddr: [__lkl__be32; 4usize],
        pub sport: __lkl__be16,
        pub dport: __lkl__be16,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2>(),
            36usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2)
            )
        );
        fn test_field_saddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).saddr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(saddr)
                )
            );
        }
        test_field_saddr();
        fn test_field_daddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).daddr) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(daddr)
                )
            );
        }
        test_field_daddr();
        fn test_field_sport() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sport) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(sport)
                )
            );
        }
        test_field_sport();
        fn test_field_dport() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dport) as usize - ptr as usize
                },
                34usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(dport)
                )
            );
        }
        test_field_dport();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_tuple__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_tuple__bindgen_ty_1>(),
            36usize,
            concat!("Size of: ", stringify!(lkl_bpf_sock_tuple__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_tuple__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_sock_tuple__bindgen_ty_1)
            )
        );
        fn test_field_ipv4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_tuple__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv4) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_tuple__bindgen_ty_1),
                    "::",
                    stringify!(ipv4)
                )
            );
        }
        test_field_ipv4();
        fn test_field_ipv6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_tuple__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv6) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_tuple__bindgen_ty_1),
                    "::",
                    stringify!(ipv6)
                )
            );
        }
        test_field_ipv6();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_tuple() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_tuple>(),
            36usize,
            concat!("Size of: ", stringify!(lkl_bpf_sock_tuple))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_tuple>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sock_tuple))
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_xdp_sock {
        pub queue_id: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_xdp_sock() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_xdp_sock>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_bpf_xdp_sock))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_xdp_sock>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_xdp_sock))
        );
        fn test_field_queue_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_xdp_sock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).queue_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_xdp_sock),
                    "::",
                    stringify!(queue_id)
                )
            );
        }
        test_field_queue_id();
    }
    pub const lkl_xdp_action_LKL_XDP_ABORTED: lkl_xdp_action = 0;
    pub const lkl_xdp_action_LKL_XDP_DROP: lkl_xdp_action = 1;
    pub const lkl_xdp_action_LKL_XDP_PASS: lkl_xdp_action = 2;
    pub const lkl_xdp_action_LKL_XDP_TX: lkl_xdp_action = 3;
    pub const lkl_xdp_action_LKL_XDP_REDIRECT: lkl_xdp_action = 4;
    pub type lkl_xdp_action = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_xdp_md {
        pub data: __lkl__u32,
        pub data_end: __lkl__u32,
        pub data_meta: __lkl__u32,
        pub ingress_ifindex: __lkl__u32,
        pub rx_queue_index: __lkl__u32,
        pub egress_ifindex: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_xdp_md() {
        assert_eq!(
            ::std::mem::size_of::<lkl_xdp_md>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_xdp_md))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_xdp_md>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_xdp_md))
        );
        fn test_field_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_xdp_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_xdp_md),
                    "::",
                    stringify!(data)
                )
            );
        }
        test_field_data();
        fn test_field_data_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_xdp_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_end) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_xdp_md),
                    "::",
                    stringify!(data_end)
                )
            );
        }
        test_field_data_end();
        fn test_field_data_meta() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_xdp_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_meta) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_xdp_md),
                    "::",
                    stringify!(data_meta)
                )
            );
        }
        test_field_data_meta();
        fn test_field_ingress_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_xdp_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ingress_ifindex) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_xdp_md),
                    "::",
                    stringify!(ingress_ifindex)
                )
            );
        }
        test_field_ingress_ifindex();
        fn test_field_rx_queue_index() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_xdp_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_queue_index) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_xdp_md),
                    "::",
                    stringify!(rx_queue_index)
                )
            );
        }
        test_field_rx_queue_index();
        fn test_field_egress_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_xdp_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).egress_ifindex) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_xdp_md),
                    "::",
                    stringify!(egress_ifindex)
                )
            );
        }
        test_field_egress_ifindex();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_devmap_val {
        pub ifindex: __lkl__u32,
        pub bpf_prog: lkl_bpf_devmap_val__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_devmap_val__bindgen_ty_1 {
        pub fd: ::std::os::raw::c_int,
        pub id: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_devmap_val__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_devmap_val__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_bpf_devmap_val__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_devmap_val__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_devmap_val__bindgen_ty_1)
            )
        );
        fn test_field_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_devmap_val__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_devmap_val__bindgen_ty_1),
                    "::",
                    stringify!(fd)
                )
            );
        }
        test_field_fd();
        fn test_field_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_devmap_val__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_devmap_val__bindgen_ty_1),
                    "::",
                    stringify!(id)
                )
            );
        }
        test_field_id();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_devmap_val() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_devmap_val>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_devmap_val))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_devmap_val>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_devmap_val))
        );
        fn test_field_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_devmap_val>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifindex) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_devmap_val),
                    "::",
                    stringify!(ifindex)
                )
            );
        }
        test_field_ifindex();
        fn test_field_bpf_prog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_devmap_val>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bpf_prog) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_devmap_val),
                    "::",
                    stringify!(bpf_prog)
                )
            );
        }
        test_field_bpf_prog();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_cpumap_val {
        pub qsize: __lkl__u32,
        pub bpf_prog: lkl_bpf_cpumap_val__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_cpumap_val__bindgen_ty_1 {
        pub fd: ::std::os::raw::c_int,
        pub id: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_cpumap_val__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_cpumap_val__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_bpf_cpumap_val__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_cpumap_val__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_cpumap_val__bindgen_ty_1)
            )
        );
        fn test_field_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_cpumap_val__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_cpumap_val__bindgen_ty_1),
                    "::",
                    stringify!(fd)
                )
            );
        }
        test_field_fd();
        fn test_field_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_cpumap_val__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_cpumap_val__bindgen_ty_1),
                    "::",
                    stringify!(id)
                )
            );
        }
        test_field_id();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_cpumap_val() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_cpumap_val>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_cpumap_val))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_cpumap_val>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_cpumap_val))
        );
        fn test_field_qsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_cpumap_val>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qsize) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_cpumap_val),
                    "::",
                    stringify!(qsize)
                )
            );
        }
        test_field_qsize();
        fn test_field_bpf_prog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_cpumap_val>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bpf_prog) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_cpumap_val),
                    "::",
                    stringify!(bpf_prog)
                )
            );
        }
        test_field_bpf_prog();
    }
    pub const lkl_sk_action_LKL_SK_DROP: lkl_sk_action = 0;
    pub const lkl_sk_action_LKL_SK_PASS: lkl_sk_action = 1;
    pub type lkl_sk_action = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_sk_msg_md {
        pub __bindgen_anon_1: lkl_sk_msg_md__bindgen_ty_1,
        pub __bindgen_anon_2: lkl_sk_msg_md__bindgen_ty_2,
        pub family: __lkl__u32,
        pub remote_ip4: __lkl__u32,
        pub local_ip4: __lkl__u32,
        pub remote_ip6: [__lkl__u32; 4usize],
        pub local_ip6: [__lkl__u32; 4usize],
        pub remote_port: __lkl__u32,
        pub local_port: __lkl__u32,
        pub size: __lkl__u32,
        pub __bindgen_anon_3: lkl_sk_msg_md__bindgen_ty_3,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_sk_msg_md__bindgen_ty_1 {
        pub data: *mut ::std::os::raw::c_void,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_sk_msg_md__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sk_msg_md__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_sk_msg_md__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sk_msg_md__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sk_msg_md__bindgen_ty_1))
        );
        fn test_field_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md__bindgen_ty_1),
                    "::",
                    stringify!(data)
                )
            );
        }
        test_field_data();
    }
    impl lkl_sk_msg_md__bindgen_ty_1 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_sk_msg_md__bindgen_ty_2 {
        pub data_end: *mut ::std::os::raw::c_void,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_sk_msg_md__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sk_msg_md__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_sk_msg_md__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sk_msg_md__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sk_msg_md__bindgen_ty_2))
        );
        fn test_field_data_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_end) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md__bindgen_ty_2),
                    "::",
                    stringify!(data_end)
                )
            );
        }
        test_field_data_end();
    }
    impl lkl_sk_msg_md__bindgen_ty_2 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_sk_msg_md__bindgen_ty_3 {
        pub sk: *mut lkl_bpf_sock,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_sk_msg_md__bindgen_ty_3() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sk_msg_md__bindgen_ty_3>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_sk_msg_md__bindgen_ty_3))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sk_msg_md__bindgen_ty_3>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sk_msg_md__bindgen_ty_3))
        );
        fn test_field_sk() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sk) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md__bindgen_ty_3),
                    "::",
                    stringify!(sk)
                )
            );
        }
        test_field_sk();
    }
    impl lkl_sk_msg_md__bindgen_ty_3 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[test]
    fn bindgen_test_layout_lkl_sk_msg_md() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sk_msg_md>(),
            80usize,
            concat!("Size of: ", stringify!(lkl_sk_msg_md))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sk_msg_md>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sk_msg_md))
        );
        fn test_field_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md),
                    "::",
                    stringify!(family)
                )
            );
        }
        test_field_family();
        fn test_field_remote_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ip4) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md),
                    "::",
                    stringify!(remote_ip4)
                )
            );
        }
        test_field_remote_ip4();
        fn test_field_local_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_ip4) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md),
                    "::",
                    stringify!(local_ip4)
                )
            );
        }
        test_field_local_ip4();
        fn test_field_remote_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ip6) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md),
                    "::",
                    stringify!(remote_ip6)
                )
            );
        }
        test_field_remote_ip6();
        fn test_field_local_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_ip6) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md),
                    "::",
                    stringify!(local_ip6)
                )
            );
        }
        test_field_local_ip6();
        fn test_field_remote_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_port) as usize - ptr as usize
                },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md),
                    "::",
                    stringify!(remote_port)
                )
            );
        }
        test_field_remote_port();
        fn test_field_local_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_port) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md),
                    "::",
                    stringify!(local_port)
                )
            );
        }
        test_field_local_port();
        fn test_field_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_msg_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_msg_md),
                    "::",
                    stringify!(size)
                )
            );
        }
        test_field_size();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_sk_reuseport_md {
        pub __bindgen_anon_1: lkl_sk_reuseport_md__bindgen_ty_1,
        pub __bindgen_anon_2: lkl_sk_reuseport_md__bindgen_ty_2,
        pub len: __lkl__u32,
        pub eth_protocol: __lkl__u32,
        pub ip_protocol: __lkl__u32,
        pub bind_inany: __lkl__u32,
        pub hash: __lkl__u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_sk_reuseport_md__bindgen_ty_1 {
        pub data: *mut ::std::os::raw::c_void,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_sk_reuseport_md__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sk_reuseport_md__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_sk_reuseport_md__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sk_reuseport_md__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_sk_reuseport_md__bindgen_ty_1)
            )
        );
        fn test_field_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_reuseport_md__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_reuseport_md__bindgen_ty_1),
                    "::",
                    stringify!(data)
                )
            );
        }
        test_field_data();
    }
    impl lkl_sk_reuseport_md__bindgen_ty_1 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_sk_reuseport_md__bindgen_ty_2 {
        pub data_end: *mut ::std::os::raw::c_void,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_sk_reuseport_md__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sk_reuseport_md__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_sk_reuseport_md__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sk_reuseport_md__bindgen_ty_2>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_sk_reuseport_md__bindgen_ty_2)
            )
        );
        fn test_field_data_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_reuseport_md__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_end) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_reuseport_md__bindgen_ty_2),
                    "::",
                    stringify!(data_end)
                )
            );
        }
        test_field_data_end();
    }
    impl lkl_sk_reuseport_md__bindgen_ty_2 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[test]
    fn bindgen_test_layout_lkl_sk_reuseport_md() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sk_reuseport_md>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_sk_reuseport_md))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sk_reuseport_md>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sk_reuseport_md))
        );
        fn test_field_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_reuseport_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_reuseport_md),
                    "::",
                    stringify!(len)
                )
            );
        }
        test_field_len();
        fn test_field_eth_protocol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_reuseport_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).eth_protocol) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_reuseport_md),
                    "::",
                    stringify!(eth_protocol)
                )
            );
        }
        test_field_eth_protocol();
        fn test_field_ip_protocol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_reuseport_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ip_protocol) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_reuseport_md),
                    "::",
                    stringify!(ip_protocol)
                )
            );
        }
        test_field_ip_protocol();
        fn test_field_bind_inany() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_reuseport_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bind_inany) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_reuseport_md),
                    "::",
                    stringify!(bind_inany)
                )
            );
        }
        test_field_bind_inany();
        fn test_field_hash() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sk_reuseport_md>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sk_reuseport_md),
                    "::",
                    stringify!(hash)
                )
            );
        }
        test_field_hash();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_prog_info {
        pub type_: __lkl__u32,
        pub id: __lkl__u32,
        pub tag: [__lkl__u8; 8usize],
        pub jited_prog_len: __lkl__u32,
        pub xlated_prog_len: __lkl__u32,
        pub jited_prog_insns: __lkl__u64,
        pub xlated_prog_insns: __lkl__u64,
        pub load_time: __lkl__u64,
        pub created_by_uid: __lkl__u32,
        pub nr_map_ids: __lkl__u32,
        pub map_ids: __lkl__u64,
        pub name: [::std::os::raw::c_char; 16usize],
        pub ifindex: __lkl__u32,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
        pub netns_dev: __lkl__u64,
        pub netns_ino: __lkl__u64,
        pub nr_jited_ksyms: __lkl__u32,
        pub nr_jited_func_lens: __lkl__u32,
        pub jited_ksyms: __lkl__u64,
        pub jited_func_lens: __lkl__u64,
        pub btf_id: __lkl__u32,
        pub func_info_rec_size: __lkl__u32,
        pub func_info: __lkl__u64,
        pub nr_func_info: __lkl__u32,
        pub nr_line_info: __lkl__u32,
        pub line_info: __lkl__u64,
        pub jited_line_info: __lkl__u64,
        pub nr_jited_line_info: __lkl__u32,
        pub line_info_rec_size: __lkl__u32,
        pub jited_line_info_rec_size: __lkl__u32,
        pub nr_prog_tags: __lkl__u32,
        pub prog_tags: __lkl__u64,
        pub run_time_ns: __lkl__u64,
        pub run_cnt: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_prog_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_prog_info>(),
            208usize,
            concat!("Size of: ", stringify!(lkl_bpf_prog_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_prog_info>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_prog_info))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(id)
                )
            );
        }
        test_field_id();
        fn test_field_tag() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(tag)
                )
            );
        }
        test_field_tag();
        fn test_field_jited_prog_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jited_prog_len) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(jited_prog_len)
                )
            );
        }
        test_field_jited_prog_len();
        fn test_field_xlated_prog_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).xlated_prog_len) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(xlated_prog_len)
                )
            );
        }
        test_field_xlated_prog_len();
        fn test_field_jited_prog_insns() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jited_prog_insns) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(jited_prog_insns)
                )
            );
        }
        test_field_jited_prog_insns();
        fn test_field_xlated_prog_insns() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).xlated_prog_insns) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(xlated_prog_insns)
                )
            );
        }
        test_field_xlated_prog_insns();
        fn test_field_load_time() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).load_time) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(load_time)
                )
            );
        }
        test_field_load_time();
        fn test_field_created_by_uid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).created_by_uid) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(created_by_uid)
                )
            );
        }
        test_field_created_by_uid();
        fn test_field_nr_map_ids() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_map_ids) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(nr_map_ids)
                )
            );
        }
        test_field_nr_map_ids();
        fn test_field_map_ids() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_ids) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(map_ids)
                )
            );
        }
        test_field_map_ids();
        fn test_field_name() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(name)
                )
            );
        }
        test_field_name();
        fn test_field_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifindex) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(ifindex)
                )
            );
        }
        test_field_ifindex();
        fn test_field_netns_dev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).netns_dev) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(netns_dev)
                )
            );
        }
        test_field_netns_dev();
        fn test_field_netns_ino() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).netns_ino) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(netns_ino)
                )
            );
        }
        test_field_netns_ino();
        fn test_field_nr_jited_ksyms() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_jited_ksyms) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(nr_jited_ksyms)
                )
            );
        }
        test_field_nr_jited_ksyms();
        fn test_field_nr_jited_func_lens() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_jited_func_lens) as usize - ptr as usize
                },
                108usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(nr_jited_func_lens)
                )
            );
        }
        test_field_nr_jited_func_lens();
        fn test_field_jited_ksyms() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jited_ksyms) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(jited_ksyms)
                )
            );
        }
        test_field_jited_ksyms();
        fn test_field_jited_func_lens() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jited_func_lens) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(jited_func_lens)
                )
            );
        }
        test_field_jited_func_lens();
        fn test_field_btf_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_id) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(btf_id)
                )
            );
        }
        test_field_btf_id();
        fn test_field_func_info_rec_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).func_info_rec_size) as usize - ptr as usize
                },
                132usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(func_info_rec_size)
                )
            );
        }
        test_field_func_info_rec_size();
        fn test_field_func_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).func_info) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(func_info)
                )
            );
        }
        test_field_func_info();
        fn test_field_nr_func_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_func_info) as usize - ptr as usize
                },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(nr_func_info)
                )
            );
        }
        test_field_nr_func_info();
        fn test_field_nr_line_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_line_info) as usize - ptr as usize
                },
                148usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(nr_line_info)
                )
            );
        }
        test_field_nr_line_info();
        fn test_field_line_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).line_info) as usize - ptr as usize
                },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(line_info)
                )
            );
        }
        test_field_line_info();
        fn test_field_jited_line_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jited_line_info) as usize - ptr as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(jited_line_info)
                )
            );
        }
        test_field_jited_line_info();
        fn test_field_nr_jited_line_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_jited_line_info) as usize - ptr as usize
                },
                168usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(nr_jited_line_info)
                )
            );
        }
        test_field_nr_jited_line_info();
        fn test_field_line_info_rec_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).line_info_rec_size) as usize - ptr as usize
                },
                172usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(line_info_rec_size)
                )
            );
        }
        test_field_line_info_rec_size();
        fn test_field_jited_line_info_rec_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jited_line_info_rec_size) as usize - ptr as usize
                },
                176usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(jited_line_info_rec_size)
                )
            );
        }
        test_field_jited_line_info_rec_size();
        fn test_field_nr_prog_tags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nr_prog_tags) as usize - ptr as usize
                },
                180usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(nr_prog_tags)
                )
            );
        }
        test_field_nr_prog_tags();
        fn test_field_prog_tags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_tags) as usize - ptr as usize
                },
                184usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(prog_tags)
                )
            );
        }
        test_field_prog_tags();
        fn test_field_run_time_ns() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).run_time_ns) as usize - ptr as usize
                },
                192usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(run_time_ns)
                )
            );
        }
        test_field_run_time_ns();
        fn test_field_run_cnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_prog_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).run_cnt) as usize - ptr as usize
                },
                200usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_prog_info),
                    "::",
                    stringify!(run_cnt)
                )
            );
        }
        test_field_run_cnt();
    }
    impl lkl_bpf_prog_info {
        #[inline]
        pub fn gpl_compatible(&self) -> __lkl__u32 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_gpl_compatible(&mut self, val: __lkl__u32) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(gpl_compatible: __lkl__u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let gpl_compatible: u32 = unsafe { ::std::mem::transmute(gpl_compatible) };
                gpl_compatible as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_map_info {
        pub type_: __lkl__u32,
        pub id: __lkl__u32,
        pub key_size: __lkl__u32,
        pub value_size: __lkl__u32,
        pub max_entries: __lkl__u32,
        pub map_flags: __lkl__u32,
        pub name: [::std::os::raw::c_char; 16usize],
        pub ifindex: __lkl__u32,
        pub btf_vmlinux_value_type_id: __lkl__u32,
        pub netns_dev: __lkl__u64,
        pub netns_ino: __lkl__u64,
        pub btf_id: __lkl__u32,
        pub btf_key_type_id: __lkl__u32,
        pub btf_value_type_id: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_map_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_map_info>(),
            80usize,
            concat!("Size of: ", stringify!(lkl_bpf_map_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_map_info>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_map_info))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(id)
                )
            );
        }
        test_field_id();
        fn test_field_key_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).key_size) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(key_size)
                )
            );
        }
        test_field_key_size();
        fn test_field_value_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).value_size) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(value_size)
                )
            );
        }
        test_field_value_size();
        fn test_field_max_entries() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_entries) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(max_entries)
                )
            );
        }
        test_field_max_entries();
        fn test_field_map_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_flags) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(map_flags)
                )
            );
        }
        test_field_map_flags();
        fn test_field_name() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(name)
                )
            );
        }
        test_field_name();
        fn test_field_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifindex) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(ifindex)
                )
            );
        }
        test_field_ifindex();
        fn test_field_btf_vmlinux_value_type_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_vmlinux_value_type_id) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(btf_vmlinux_value_type_id)
                )
            );
        }
        test_field_btf_vmlinux_value_type_id();
        fn test_field_netns_dev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).netns_dev) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(netns_dev)
                )
            );
        }
        test_field_netns_dev();
        fn test_field_netns_ino() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).netns_ino) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(netns_ino)
                )
            );
        }
        test_field_netns_ino();
        fn test_field_btf_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_id) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(btf_id)
                )
            );
        }
        test_field_btf_id();
        fn test_field_btf_key_type_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_key_type_id) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(btf_key_type_id)
                )
            );
        }
        test_field_btf_key_type_id();
        fn test_field_btf_value_type_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_map_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_value_type_id) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_map_info),
                    "::",
                    stringify!(btf_value_type_id)
                )
            );
        }
        test_field_btf_value_type_id();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_btf_info {
        pub btf: __lkl__u64,
        pub btf_size: __lkl__u32,
        pub id: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_btf_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_btf_info>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_btf_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_btf_info>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_btf_info))
        );
        fn test_field_btf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_btf_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_btf_info),
                    "::",
                    stringify!(btf)
                )
            );
        }
        test_field_btf();
        fn test_field_btf_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_btf_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).btf_size) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_btf_info),
                    "::",
                    stringify!(btf_size)
                )
            );
        }
        test_field_btf_size();
        fn test_field_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_btf_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_btf_info),
                    "::",
                    stringify!(id)
                )
            );
        }
        test_field_id();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_link_info {
        pub type_: __lkl__u32,
        pub id: __lkl__u32,
        pub prog_id: __lkl__u32,
        pub __bindgen_anon_1: lkl_bpf_link_info__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_link_info__bindgen_ty_1 {
        pub raw_tracepoint: lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1,
        pub tracing: lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_2,
        pub cgroup: lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3,
        pub iter: lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4,
        pub netns: lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5,
        pub xdp: lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_6,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1 {
        pub tp_name: __lkl__u64,
        pub tp_name_len: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field_tp_name() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tp_name) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(tp_name)
                )
            );
        }
        test_field_tp_name();
        fn test_field_tp_name_len() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tp_name_len) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(tp_name_len)
                )
            );
        }
        test_field_tp_name_len();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_2 {
        pub attach_type: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_2>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_2)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_2>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_2)
            )
        );
        fn test_field_attach_type() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_type) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(attach_type)
                )
            );
        }
        test_field_attach_type();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3 {
        pub cgroup_id: __lkl__u64,
        pub attach_type: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3)
            )
        );
        fn test_field_cgroup_id() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cgroup_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3),
                    "::",
                    stringify!(cgroup_id)
                )
            );
        }
        test_field_cgroup_id();
        fn test_field_attach_type() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_type) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_3),
                    "::",
                    stringify!(attach_type)
                )
            );
        }
        test_field_attach_type();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4 {
        pub target_name: __lkl__u64,
        pub target_name_len: __lkl__u32,
        pub __bindgen_anon_1: lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
        pub map: lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 {
        pub map_id: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<
                lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
            >(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
            >(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field_map_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(
                        lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1
                    ),
                    "::",
                    stringify!(map_id)
                )
            );
        }
        test_field_map_id();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1)
            )
        );
        fn test_field_map() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
                    "::",
                    stringify!(map)
                )
            );
        }
        test_field_map();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4)
            )
        );
        fn test_field_target_name() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).target_name) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4),
                    "::",
                    stringify!(target_name)
                )
            );
        }
        test_field_target_name();
        fn test_field_target_name_len() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).target_name_len) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_4),
                    "::",
                    stringify!(target_name_len)
                )
            );
        }
        test_field_target_name_len();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5 {
        pub netns_ino: __lkl__u32,
        pub attach_type: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5)
            )
        );
        fn test_field_netns_ino() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).netns_ino) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5),
                    "::",
                    stringify!(netns_ino)
                )
            );
        }
        test_field_netns_ino();
        fn test_field_attach_type() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).attach_type) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_5),
                    "::",
                    stringify!(attach_type)
                )
            );
        }
        test_field_attach_type();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_6 {
        pub ifindex: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_6() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_6>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_6)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_6>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_6)
            )
        );
        fn test_field_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_6 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifindex) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1__bindgen_ty_6),
                    "::",
                    stringify!(ifindex)
                )
            );
        }
        test_field_ifindex();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_link_info__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_link_info__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_link_info__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_link_info__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_link_info__bindgen_ty_1))
        );
        fn test_field_raw_tracepoint() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_link_info__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).raw_tracepoint) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1),
                    "::",
                    stringify!(raw_tracepoint)
                )
            );
        }
        test_field_raw_tracepoint();
        fn test_field_tracing() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_link_info__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tracing) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1),
                    "::",
                    stringify!(tracing)
                )
            );
        }
        test_field_tracing();
        fn test_field_cgroup() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_link_info__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cgroup) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1),
                    "::",
                    stringify!(cgroup)
                )
            );
        }
        test_field_cgroup();
        fn test_field_iter() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_link_info__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).iter) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1),
                    "::",
                    stringify!(iter)
                )
            );
        }
        test_field_iter();
        fn test_field_netns() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_link_info__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).netns) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1),
                    "::",
                    stringify!(netns)
                )
            );
        }
        test_field_netns();
        fn test_field_xdp() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_link_info__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).xdp) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info__bindgen_ty_1),
                    "::",
                    stringify!(xdp)
                )
            );
        }
        test_field_xdp();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_link_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_link_info>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_bpf_link_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_link_info>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_link_info))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_link_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_link_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info),
                    "::",
                    stringify!(id)
                )
            );
        }
        test_field_id();
        fn test_field_prog_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_link_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_id) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_link_info),
                    "::",
                    stringify!(prog_id)
                )
            );
        }
        test_field_prog_id();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_sock_addr {
        pub user_family: __lkl__u32,
        pub user_ip4: __lkl__u32,
        pub user_ip6: [__lkl__u32; 4usize],
        pub user_port: __lkl__u32,
        pub family: __lkl__u32,
        pub type_: __lkl__u32,
        pub protocol: __lkl__u32,
        pub msg_src_ip4: __lkl__u32,
        pub msg_src_ip6: [__lkl__u32; 4usize],
        pub __bindgen_anon_1: lkl_bpf_sock_addr__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_sock_addr__bindgen_ty_1 {
        pub sk: *mut lkl_bpf_sock,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_addr__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_addr__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_sock_addr__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_addr__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sock_addr__bindgen_ty_1))
        );
        fn test_field_sk() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_addr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sk) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_addr__bindgen_ty_1),
                    "::",
                    stringify!(sk)
                )
            );
        }
        test_field_sk();
    }
    impl lkl_bpf_sock_addr__bindgen_ty_1 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_addr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_addr>(),
            72usize,
            concat!("Size of: ", stringify!(lkl_bpf_sock_addr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_addr>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sock_addr))
        );
        fn test_field_user_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).user_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_addr),
                    "::",
                    stringify!(user_family)
                )
            );
        }
        test_field_user_family();
        fn test_field_user_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).user_ip4) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_addr),
                    "::",
                    stringify!(user_ip4)
                )
            );
        }
        test_field_user_ip4();
        fn test_field_user_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).user_ip6) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_addr),
                    "::",
                    stringify!(user_ip6)
                )
            );
        }
        test_field_user_ip6();
        fn test_field_user_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).user_port) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_addr),
                    "::",
                    stringify!(user_port)
                )
            );
        }
        test_field_user_port();
        fn test_field_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_addr),
                    "::",
                    stringify!(family)
                )
            );
        }
        test_field_family();
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_addr),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_protocol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_addr),
                    "::",
                    stringify!(protocol)
                )
            );
        }
        test_field_protocol();
        fn test_field_msg_src_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_src_ip4) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_addr),
                    "::",
                    stringify!(msg_src_ip4)
                )
            );
        }
        test_field_msg_src_ip4();
        fn test_field_msg_src_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_src_ip6) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_addr),
                    "::",
                    stringify!(msg_src_ip6)
                )
            );
        }
        test_field_msg_src_ip6();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_sock_ops {
        pub op: __lkl__u32,
        pub __bindgen_anon_1: lkl_bpf_sock_ops__bindgen_ty_1,
        pub family: __lkl__u32,
        pub remote_ip4: __lkl__u32,
        pub local_ip4: __lkl__u32,
        pub remote_ip6: [__lkl__u32; 4usize],
        pub local_ip6: [__lkl__u32; 4usize],
        pub remote_port: __lkl__u32,
        pub local_port: __lkl__u32,
        pub is_fullsock: __lkl__u32,
        pub snd_cwnd: __lkl__u32,
        pub srtt_us: __lkl__u32,
        pub bpf_sock_ops_cb_flags: __lkl__u32,
        pub state: __lkl__u32,
        pub rtt_min: __lkl__u32,
        pub snd_ssthresh: __lkl__u32,
        pub rcv_nxt: __lkl__u32,
        pub snd_nxt: __lkl__u32,
        pub snd_una: __lkl__u32,
        pub mss_cache: __lkl__u32,
        pub ecn_flags: __lkl__u32,
        pub rate_delivered: __lkl__u32,
        pub rate_interval_us: __lkl__u32,
        pub packets_out: __lkl__u32,
        pub retrans_out: __lkl__u32,
        pub total_retrans: __lkl__u32,
        pub segs_in: __lkl__u32,
        pub data_segs_in: __lkl__u32,
        pub segs_out: __lkl__u32,
        pub data_segs_out: __lkl__u32,
        pub lost_out: __lkl__u32,
        pub sacked_out: __lkl__u32,
        pub sk_txhash: __lkl__u32,
        pub bytes_received: __lkl__u64,
        pub bytes_acked: __lkl__u64,
        pub __bindgen_anon_2: lkl_bpf_sock_ops__bindgen_ty_2,
        pub __bindgen_anon_3: lkl_bpf_sock_ops__bindgen_ty_3,
        pub __bindgen_anon_4: lkl_bpf_sock_ops__bindgen_ty_4,
        pub skb_len: __lkl__u32,
        pub skb_tcp_flags: __lkl__u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_sock_ops__bindgen_ty_1 {
        pub args: [__lkl__u32; 4usize],
        pub reply: __lkl__u32,
        pub replylong: [__lkl__u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_ops__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_ops__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_sock_ops__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_ops__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sock_ops__bindgen_ty_1))
        );
        fn test_field_args() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops__bindgen_ty_1),
                    "::",
                    stringify!(args)
                )
            );
        }
        test_field_args();
        fn test_field_reply() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reply) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops__bindgen_ty_1),
                    "::",
                    stringify!(reply)
                )
            );
        }
        test_field_reply();
        fn test_field_replylong() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).replylong) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops__bindgen_ty_1),
                    "::",
                    stringify!(replylong)
                )
            );
        }
        test_field_replylong();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_sock_ops__bindgen_ty_2 {
        pub sk: *mut lkl_bpf_sock,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_ops__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_ops__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_sock_ops__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_ops__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sock_ops__bindgen_ty_2))
        );
        fn test_field_sk() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sk) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops__bindgen_ty_2),
                    "::",
                    stringify!(sk)
                )
            );
        }
        test_field_sk();
    }
    impl lkl_bpf_sock_ops__bindgen_ty_2 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_sock_ops__bindgen_ty_3 {
        pub skb_data: *mut ::std::os::raw::c_void,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_ops__bindgen_ty_3() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_ops__bindgen_ty_3>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_sock_ops__bindgen_ty_3))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_ops__bindgen_ty_3>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sock_ops__bindgen_ty_3))
        );
        fn test_field_skb_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).skb_data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops__bindgen_ty_3),
                    "::",
                    stringify!(skb_data)
                )
            );
        }
        test_field_skb_data();
    }
    impl lkl_bpf_sock_ops__bindgen_ty_3 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_sock_ops__bindgen_ty_4 {
        pub skb_data_end: *mut ::std::os::raw::c_void,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_ops__bindgen_ty_4() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_ops__bindgen_ty_4>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_sock_ops__bindgen_ty_4))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_ops__bindgen_ty_4>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sock_ops__bindgen_ty_4))
        );
        fn test_field_skb_data_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).skb_data_end) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops__bindgen_ty_4),
                    "::",
                    stringify!(skb_data_end)
                )
            );
        }
        test_field_skb_data_end();
    }
    impl lkl_bpf_sock_ops__bindgen_ty_4 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sock_ops() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sock_ops>(),
            216usize,
            concat!("Size of: ", stringify!(lkl_bpf_sock_ops))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sock_ops>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sock_ops))
        );
        fn test_field_op() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(op)
                )
            );
        }
        test_field_op();
        fn test_field_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(family)
                )
            );
        }
        test_field_family();
        fn test_field_remote_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ip4) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(remote_ip4)
                )
            );
        }
        test_field_remote_ip4();
        fn test_field_local_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_ip4) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(local_ip4)
                )
            );
        }
        test_field_local_ip4();
        fn test_field_remote_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ip6) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(remote_ip6)
                )
            );
        }
        test_field_remote_ip6();
        fn test_field_local_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_ip6) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(local_ip6)
                )
            );
        }
        test_field_local_ip6();
        fn test_field_remote_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_port) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(remote_port)
                )
            );
        }
        test_field_remote_port();
        fn test_field_local_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_port) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(local_port)
                )
            );
        }
        test_field_local_port();
        fn test_field_is_fullsock() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).is_fullsock) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(is_fullsock)
                )
            );
        }
        test_field_is_fullsock();
        fn test_field_snd_cwnd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).snd_cwnd) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(snd_cwnd)
                )
            );
        }
        test_field_snd_cwnd();
        fn test_field_srtt_us() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).srtt_us) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(srtt_us)
                )
            );
        }
        test_field_srtt_us();
        fn test_field_bpf_sock_ops_cb_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bpf_sock_ops_cb_flags) as usize - ptr as usize
                },
                84usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(bpf_sock_ops_cb_flags)
                )
            );
        }
        test_field_bpf_sock_ops_cb_flags();
        fn test_field_state() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(state)
                )
            );
        }
        test_field_state();
        fn test_field_rtt_min() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtt_min) as usize - ptr as usize
                },
                92usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(rtt_min)
                )
            );
        }
        test_field_rtt_min();
        fn test_field_snd_ssthresh() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).snd_ssthresh) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(snd_ssthresh)
                )
            );
        }
        test_field_snd_ssthresh();
        fn test_field_rcv_nxt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rcv_nxt) as usize - ptr as usize
                },
                100usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(rcv_nxt)
                )
            );
        }
        test_field_rcv_nxt();
        fn test_field_snd_nxt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).snd_nxt) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(snd_nxt)
                )
            );
        }
        test_field_snd_nxt();
        fn test_field_snd_una() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).snd_una) as usize - ptr as usize
                },
                108usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(snd_una)
                )
            );
        }
        test_field_snd_una();
        fn test_field_mss_cache() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mss_cache) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(mss_cache)
                )
            );
        }
        test_field_mss_cache();
        fn test_field_ecn_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ecn_flags) as usize - ptr as usize
                },
                116usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(ecn_flags)
                )
            );
        }
        test_field_ecn_flags();
        fn test_field_rate_delivered() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rate_delivered) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(rate_delivered)
                )
            );
        }
        test_field_rate_delivered();
        fn test_field_rate_interval_us() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rate_interval_us) as usize - ptr as usize
                },
                124usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(rate_interval_us)
                )
            );
        }
        test_field_rate_interval_us();
        fn test_field_packets_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).packets_out) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(packets_out)
                )
            );
        }
        test_field_packets_out();
        fn test_field_retrans_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).retrans_out) as usize - ptr as usize
                },
                132usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(retrans_out)
                )
            );
        }
        test_field_retrans_out();
        fn test_field_total_retrans() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).total_retrans) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(total_retrans)
                )
            );
        }
        test_field_total_retrans();
        fn test_field_segs_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).segs_in) as usize - ptr as usize
                },
                140usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(segs_in)
                )
            );
        }
        test_field_segs_in();
        fn test_field_data_segs_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_segs_in) as usize - ptr as usize
                },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(data_segs_in)
                )
            );
        }
        test_field_data_segs_in();
        fn test_field_segs_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).segs_out) as usize - ptr as usize
                },
                148usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(segs_out)
                )
            );
        }
        test_field_segs_out();
        fn test_field_data_segs_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_segs_out) as usize - ptr as usize
                },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(data_segs_out)
                )
            );
        }
        test_field_data_segs_out();
        fn test_field_lost_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lost_out) as usize - ptr as usize
                },
                156usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(lost_out)
                )
            );
        }
        test_field_lost_out();
        fn test_field_sacked_out() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sacked_out) as usize - ptr as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(sacked_out)
                )
            );
        }
        test_field_sacked_out();
        fn test_field_sk_txhash() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sk_txhash) as usize - ptr as usize
                },
                164usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(sk_txhash)
                )
            );
        }
        test_field_sk_txhash();
        fn test_field_bytes_received() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bytes_received) as usize - ptr as usize
                },
                168usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(bytes_received)
                )
            );
        }
        test_field_bytes_received();
        fn test_field_bytes_acked() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bytes_acked) as usize - ptr as usize
                },
                176usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(bytes_acked)
                )
            );
        }
        test_field_bytes_acked();
        fn test_field_skb_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).skb_len) as usize - ptr as usize
                },
                208usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(skb_len)
                )
            );
        }
        test_field_skb_len();
        fn test_field_skb_tcp_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sock_ops>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).skb_tcp_flags) as usize - ptr as usize
                },
                212usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sock_ops),
                    "::",
                    stringify!(skb_tcp_flags)
                )
            );
        }
        test_field_skb_tcp_flags();
    }
    pub const LKL_BPF_SOCK_OPS_RTO_CB_FLAG: _bindgen_ty_23 = 1;
    pub const LKL_BPF_SOCK_OPS_RETRANS_CB_FLAG: _bindgen_ty_23 = 2;
    pub const LKL_BPF_SOCK_OPS_STATE_CB_FLAG: _bindgen_ty_23 = 4;
    pub const LKL_BPF_SOCK_OPS_RTT_CB_FLAG: _bindgen_ty_23 = 8;
    pub const LKL_BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG: _bindgen_ty_23 = 16;
    pub const LKL_BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG: _bindgen_ty_23 = 32;
    pub const LKL_BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG: _bindgen_ty_23 = 64;
    pub const LKL_BPF_SOCK_OPS_ALL_CB_FLAGS: _bindgen_ty_23 = 127;
    pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
    pub const LKL_BPF_SOCK_OPS_VOID: _bindgen_ty_24 = 0;
    pub const LKL_BPF_SOCK_OPS_TIMEOUT_INIT: _bindgen_ty_24 = 1;
    pub const LKL_BPF_SOCK_OPS_RWND_INIT: _bindgen_ty_24 = 2;
    pub const LKL_BPF_SOCK_OPS_TCP_CONNECT_CB: _bindgen_ty_24 = 3;
    pub const LKL_BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB: _bindgen_ty_24 = 4;
    pub const LKL_BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB: _bindgen_ty_24 = 5;
    pub const LKL_BPF_SOCK_OPS_NEEDS_ECN: _bindgen_ty_24 = 6;
    pub const LKL_BPF_SOCK_OPS_BASE_RTT: _bindgen_ty_24 = 7;
    pub const LKL_BPF_SOCK_OPS_RTO_CB: _bindgen_ty_24 = 8;
    pub const LKL_BPF_SOCK_OPS_RETRANS_CB: _bindgen_ty_24 = 9;
    pub const LKL_BPF_SOCK_OPS_STATE_CB: _bindgen_ty_24 = 10;
    pub const LKL_BPF_SOCK_OPS_TCP_LISTEN_CB: _bindgen_ty_24 = 11;
    pub const LKL_BPF_SOCK_OPS_RTT_CB: _bindgen_ty_24 = 12;
    pub const LKL_BPF_SOCK_OPS_PARSE_HDR_OPT_CB: _bindgen_ty_24 = 13;
    pub const LKL_BPF_SOCK_OPS_HDR_OPT_LEN_CB: _bindgen_ty_24 = 14;
    pub const LKL_BPF_SOCK_OPS_WRITE_HDR_OPT_CB: _bindgen_ty_24 = 15;
    pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
    pub const LKL_BPF_TCP_ESTABLISHED: _bindgen_ty_25 = 1;
    pub const LKL_BPF_TCP_SYN_SENT: _bindgen_ty_25 = 2;
    pub const LKL_BPF_TCP_SYN_RECV: _bindgen_ty_25 = 3;
    pub const LKL_BPF_TCP_FIN_WAIT1: _bindgen_ty_25 = 4;
    pub const LKL_BPF_TCP_FIN_WAIT2: _bindgen_ty_25 = 5;
    pub const LKL_BPF_TCP_TIME_WAIT: _bindgen_ty_25 = 6;
    pub const LKL_BPF_TCP_CLOSE: _bindgen_ty_25 = 7;
    pub const LKL_BPF_TCP_CLOSE_WAIT: _bindgen_ty_25 = 8;
    pub const LKL_BPF_TCP_LAST_ACK: _bindgen_ty_25 = 9;
    pub const LKL_BPF_TCP_LISTEN: _bindgen_ty_25 = 10;
    pub const LKL_BPF_TCP_CLOSING: _bindgen_ty_25 = 11;
    pub const LKL_BPF_TCP_NEW_SYN_RECV: _bindgen_ty_25 = 12;
    pub const LKL_BPF_TCP_MAX_STATES: _bindgen_ty_25 = 13;
    pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
    pub const LKL_TCP_BPF_IW: _bindgen_ty_26 = 1001;
    pub const LKL_TCP_BPF_SNDCWND_CLAMP: _bindgen_ty_26 = 1002;
    pub const LKL_TCP_BPF_DELACK_MAX: _bindgen_ty_26 = 1003;
    pub const LKL_TCP_BPF_RTO_MIN: _bindgen_ty_26 = 1004;
    pub const LKL_TCP_BPF_SYN: _bindgen_ty_26 = 1005;
    pub const LKL_TCP_BPF_SYN_IP: _bindgen_ty_26 = 1006;
    pub const LKL_TCP_BPF_SYN_MAC: _bindgen_ty_26 = 1007;
    pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
    pub const LKL_BPF_LOAD_HDR_OPT_TCP_SYN: _bindgen_ty_27 = 1;
    pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
    pub const LKL_BPF_WRITE_HDR_TCP_CURRENT_MSS: _bindgen_ty_28 = 1;
    pub const LKL_BPF_WRITE_HDR_TCP_SYNACK_COOKIE: _bindgen_ty_28 = 2;
    pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_perf_event_value {
        pub counter: __lkl__u64,
        pub enabled: __lkl__u64,
        pub running: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_perf_event_value() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_perf_event_value>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_bpf_perf_event_value))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_perf_event_value>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_perf_event_value))
        );
        fn test_field_counter() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_perf_event_value>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_perf_event_value),
                    "::",
                    stringify!(counter)
                )
            );
        }
        test_field_counter();
        fn test_field_enabled() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_perf_event_value>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_perf_event_value),
                    "::",
                    stringify!(enabled)
                )
            );
        }
        test_field_enabled();
        fn test_field_running() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_perf_event_value>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).running) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_perf_event_value),
                    "::",
                    stringify!(running)
                )
            );
        }
        test_field_running();
    }
    pub const LKL_BPF_DEVCG_ACC_MKNOD: _bindgen_ty_29 = 1;
    pub const LKL_BPF_DEVCG_ACC_READ: _bindgen_ty_29 = 2;
    pub const LKL_BPF_DEVCG_ACC_WRITE: _bindgen_ty_29 = 4;
    pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
    pub const LKL_BPF_DEVCG_DEV_BLOCK: _bindgen_ty_30 = 1;
    pub const LKL_BPF_DEVCG_DEV_CHAR: _bindgen_ty_30 = 2;
    pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_cgroup_dev_ctx {
        pub access_type: __lkl__u32,
        pub major: __lkl__u32,
        pub minor: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_cgroup_dev_ctx() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_cgroup_dev_ctx>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_bpf_cgroup_dev_ctx))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_cgroup_dev_ctx>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_cgroup_dev_ctx))
        );
        fn test_field_access_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_cgroup_dev_ctx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).access_type) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_cgroup_dev_ctx),
                    "::",
                    stringify!(access_type)
                )
            );
        }
        test_field_access_type();
        fn test_field_major() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_cgroup_dev_ctx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_cgroup_dev_ctx),
                    "::",
                    stringify!(major)
                )
            );
        }
        test_field_major();
        fn test_field_minor() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_cgroup_dev_ctx>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_cgroup_dev_ctx),
                    "::",
                    stringify!(minor)
                )
            );
        }
        test_field_minor();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_bpf_raw_tracepoint_args {
        pub args: __IncompleteArrayField<__lkl__u64>,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_raw_tracepoint_args() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_raw_tracepoint_args>(),
            0usize,
            concat!("Size of: ", stringify!(lkl_bpf_raw_tracepoint_args))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_raw_tracepoint_args>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_raw_tracepoint_args))
        );
        fn test_field_args() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_raw_tracepoint_args>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_raw_tracepoint_args),
                    "::",
                    stringify!(args)
                )
            );
        }
        test_field_args();
    }
    pub const LKL_BPF_FIB_LOOKUP_DIRECT: _bindgen_ty_31 = 1;
    pub const LKL_BPF_FIB_LOOKUP_OUTPUT: _bindgen_ty_31 = 2;
    pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
    pub const LKL_BPF_FIB_LKUP_RET_SUCCESS: _bindgen_ty_32 = 0;
    pub const LKL_BPF_FIB_LKUP_RET_BLACKHOLE: _bindgen_ty_32 = 1;
    pub const LKL_BPF_FIB_LKUP_RET_UNREACHABLE: _bindgen_ty_32 = 2;
    pub const LKL_BPF_FIB_LKUP_RET_PROHIBIT: _bindgen_ty_32 = 3;
    pub const LKL_BPF_FIB_LKUP_RET_NOT_FWDED: _bindgen_ty_32 = 4;
    pub const LKL_BPF_FIB_LKUP_RET_FWD_DISABLED: _bindgen_ty_32 = 5;
    pub const LKL_BPF_FIB_LKUP_RET_UNSUPP_LWT: _bindgen_ty_32 = 6;
    pub const LKL_BPF_FIB_LKUP_RET_NO_NEIGH: _bindgen_ty_32 = 7;
    pub const LKL_BPF_FIB_LKUP_RET_FRAG_NEEDED: _bindgen_ty_32 = 8;
    pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_fib_lookup {
        pub family: __lkl__u8,
        pub l4_protocol: __lkl__u8,
        pub sport: __lkl__be16,
        pub dport: __lkl__be16,
        pub tot_len: __lkl__u16,
        pub ifindex: __lkl__u32,
        pub __bindgen_anon_1: lkl_bpf_fib_lookup__bindgen_ty_1,
        pub __bindgen_anon_2: lkl_bpf_fib_lookup__bindgen_ty_2,
        pub __bindgen_anon_3: lkl_bpf_fib_lookup__bindgen_ty_3,
        pub h_vlan_proto: __lkl__be16,
        pub h_vlan_TCI: __lkl__be16,
        pub smac: [__lkl__u8; 6usize],
        pub dmac: [__lkl__u8; 6usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_fib_lookup__bindgen_ty_1 {
        pub tos: __lkl__u8,
        pub flowinfo: __lkl__be32,
        pub rt_metric: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_fib_lookup__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_fib_lookup__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_bpf_fib_lookup__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_fib_lookup__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_fib_lookup__bindgen_ty_1)
            )
        );
        fn test_field_tos() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tos) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup__bindgen_ty_1),
                    "::",
                    stringify!(tos)
                )
            );
        }
        test_field_tos();
        fn test_field_flowinfo() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flowinfo) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup__bindgen_ty_1),
                    "::",
                    stringify!(flowinfo)
                )
            );
        }
        test_field_flowinfo();
        fn test_field_rt_metric() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_metric) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup__bindgen_ty_1),
                    "::",
                    stringify!(rt_metric)
                )
            );
        }
        test_field_rt_metric();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_fib_lookup__bindgen_ty_2 {
        pub ipv4_src: __lkl__be32,
        pub ipv6_src: [__lkl__u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_fib_lookup__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_fib_lookup__bindgen_ty_2>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_fib_lookup__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_fib_lookup__bindgen_ty_2>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_fib_lookup__bindgen_ty_2)
            )
        );
        fn test_field_ipv4_src() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv4_src) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup__bindgen_ty_2),
                    "::",
                    stringify!(ipv4_src)
                )
            );
        }
        test_field_ipv4_src();
        fn test_field_ipv6_src() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv6_src) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup__bindgen_ty_2),
                    "::",
                    stringify!(ipv6_src)
                )
            );
        }
        test_field_ipv6_src();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_fib_lookup__bindgen_ty_3 {
        pub ipv4_dst: __lkl__be32,
        pub ipv6_dst: [__lkl__u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_fib_lookup__bindgen_ty_3() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_fib_lookup__bindgen_ty_3>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_fib_lookup__bindgen_ty_3))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_fib_lookup__bindgen_ty_3>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_fib_lookup__bindgen_ty_3)
            )
        );
        fn test_field_ipv4_dst() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv4_dst) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup__bindgen_ty_3),
                    "::",
                    stringify!(ipv4_dst)
                )
            );
        }
        test_field_ipv4_dst();
        fn test_field_ipv6_dst() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv6_dst) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup__bindgen_ty_3),
                    "::",
                    stringify!(ipv6_dst)
                )
            );
        }
        test_field_ipv6_dst();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_fib_lookup() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_fib_lookup>(),
            64usize,
            concat!("Size of: ", stringify!(lkl_bpf_fib_lookup))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_fib_lookup>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_fib_lookup))
        );
        fn test_field_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup),
                    "::",
                    stringify!(family)
                )
            );
        }
        test_field_family();
        fn test_field_l4_protocol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l4_protocol) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup),
                    "::",
                    stringify!(l4_protocol)
                )
            );
        }
        test_field_l4_protocol();
        fn test_field_sport() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sport) as usize - ptr as usize
                },
                2usize,
                concat!(
    :                "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup),
                    "::",
                    stringify!(sport)
                )
            );
        }
        test_field_sport();
        fn test_field_dport() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dport) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup),
                    "::",
                    stringify!(dport)
                )
            );
        }
        test_field_dport();
        fn test_field_tot_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tot_len) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup),
                    "::",
                    stringify!(tot_len)
                )
            );
        }
        test_field_tot_len();
        fn test_field_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifindex) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup),
                    "::",
                    stringify!(ifindex)
                )
            );
        }
        test_field_ifindex();
        fn test_field_h_vlan_proto() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).h_vlan_proto) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup),
                    "::",
                    stringify!(h_vlan_proto)
                )
            );
        }
        test_field_h_vlan_proto();
        fn test_field_h_vlan_TCI() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).h_vlan_TCI) as usize - ptr as usize
                },
                50usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup),
                    "::",
                    stringify!(h_vlan_TCI)
                )
            );
        }
        test_field_h_vlan_TCI();
        fn test_field_smac() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).smac) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup),
                    "::",
                    stringify!(smac)
                )
            );
        }
        test_field_smac();
        fn test_field_dmac() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_fib_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dmac) as usize - ptr as usize
                },
                58usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_fib_lookup),
                    "::",
                    stringify!(dmac)
                )
            );
        }
        test_field_dmac();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_redir_neigh {
        pub nh_family: __lkl__u32,
        pub __bindgen_anon_1: lkl_bpf_redir_neigh__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_redir_neigh__bindgen_ty_1 {
        pub ipv4_nh: __lkl__be32,
        pub ipv6_nh: [__lkl__u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_redir_neigh__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_redir_neigh__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_redir_neigh__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_redir_neigh__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_redir_neigh__bindgen_ty_1)
            )
        );
        fn test_field_ipv4_nh() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_redir_neigh__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv4_nh) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_redir_neigh__bindgen_ty_1),
                    "::",
                    stringify!(ipv4_nh)
                )
            );
        }
        test_field_ipv4_nh();
        fn test_field_ipv6_nh() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_redir_neigh__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv6_nh) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_redir_neigh__bindgen_ty_1),
                    "::",
                    stringify!(ipv6_nh)
                )
            );
        }
        test_field_ipv6_nh();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_redir_neigh() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_redir_neigh>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_bpf_redir_neigh))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_redir_neigh>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_redir_neigh))
        );
        fn test_field_nh_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_redir_neigh>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nh_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_redir_neigh),
                    "::",
                    stringify!(nh_family)
                )
            );
        }
        test_field_nh_family();
    }
    pub const lkl_bpf_task_fd_type_LKL_BPF_FD_TYPE_RAW_TRACEPOINT: lkl_bpf_task_fd_type = 0;
    pub const lkl_bpf_task_fd_type_LKL_BPF_FD_TYPE_TRACEPOINT: lkl_bpf_task_fd_type = 1;
    pub const lkl_bpf_task_fd_type_LKL_BPF_FD_TYPE_KPROBE: lkl_bpf_task_fd_type = 2;
    pub const lkl_bpf_task_fd_type_LKL_BPF_FD_TYPE_KRETPROBE: lkl_bpf_task_fd_type = 3;
    pub const lkl_bpf_task_fd_type_LKL_BPF_FD_TYPE_UPROBE: lkl_bpf_task_fd_type = 4;
    pub const lkl_bpf_task_fd_type_LKL_BPF_FD_TYPE_URETPROBE: lkl_bpf_task_fd_type = 5;
    pub type lkl_bpf_task_fd_type = ::std::os::raw::c_uint;
    pub const LKL_BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG: _bindgen_ty_33 = 1;
    pub const LKL_BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL: _bindgen_ty_33 = 2;
    pub const LKL_BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP: _bindgen_ty_33 = 4;
    pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_flow_keys {
        pub nhoff: __lkl__u16,
        pub thoff: __lkl__u16,
        pub addr_proto: __lkl__u16,
        pub is_frag: __lkl__u8,
        pub is_first_frag: __lkl__u8,
        pub is_encap: __lkl__u8,
        pub ip_proto: __lkl__u8,
        pub n_proto: __lkl__be16,
        pub sport: __lkl__be16,
        pub dport: __lkl__be16,
        pub __bindgen_anon_1: lkl_bpf_flow_keys__bindgen_ty_1,
        pub flags: __lkl__u32,
        pub flow_label: __lkl__be32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_flow_keys__bindgen_ty_1 {
        pub __bindgen_anon_1: lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1,
        pub __bindgen_anon_2: lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1 {
        pub ipv4_src: __lkl__be32,
        pub ipv4_dst: __lkl__be32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field_ipv4_src() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv4_src) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(ipv4_src)
                )
            );
        }
        test_field_ipv4_src();
        fn test_field_ipv4_dst() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv4_dst) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(ipv4_dst)
                )
            );
        }
        test_field_ipv4_dst();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2 {
        pub ipv6_src: [__lkl__u32; 4usize],
        pub ipv6_dst: [__lkl__u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2>(),
            32usize,
            concat!(
                "Size of: ",
                stringify!(lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2)
            )
        );
        fn test_field_ipv6_src() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv6_src) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(ipv6_src)
                )
            );
        }
        test_field_ipv6_src();
        fn test_field_ipv6_dst() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2 > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipv6_dst) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(ipv6_dst)
                )
            );
        }
        test_field_ipv6_dst();
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_flow_keys__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_flow_keys__bindgen_ty_1>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_bpf_flow_keys__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_flow_keys__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_flow_keys__bindgen_ty_1))
        );
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_flow_keys() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_flow_keys>(),
            56usize,
            concat!("Size of: ", stringify!(lkl_bpf_flow_keys))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_flow_keys>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_flow_keys))
        );
        fn test_field_nhoff() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nhoff) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(nhoff)
                )
            );
        }
        test_field_nhoff();
        fn test_field_thoff() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).thoff) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(thoff)
                )
            );
        }
        test_field_thoff();
        fn test_field_addr_proto() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).addr_proto) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(addr_proto)
                )
            );
        }
        test_field_addr_proto();
        fn test_field_is_frag() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).is_frag) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(is_frag)
                )
            );
        }
        test_field_is_frag();
        fn test_field_is_first_frag() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).is_first_frag) as usize - ptr as usize
                },
                7usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(is_first_frag)
                )
            );
        }
        test_field_is_first_frag();
        fn test_field_is_encap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).is_encap) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(is_encap)
                )
            );
        }
        test_field_is_encap();
        fn test_field_ip_proto() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ip_proto) as usize - ptr as usize
                },
                9usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(ip_proto)
                )
            );
        }
        test_field_ip_proto();
        fn test_field_n_proto() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).n_proto) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(n_proto)
                )
            );
        }
        test_field_n_proto();
        fn test_field_sport() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sport) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(sport)
                )
            );
        }
        test_field_sport();
        fn test_field_dport() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dport) as usize - ptr as usize
                },
                14usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(dport)
                )
            );
        }
        test_field_dport();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_flow_label() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_flow_keys>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flow_label) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_flow_keys),
                    "::",
                    stringify!(flow_label)
                )
            );
        }
        test_field_flow_label();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_func_info {
        pub insn_off: __lkl__u32,
        pub type_id: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_func_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_func_info>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_func_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_func_info>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_func_info))
        );
        fn test_field_insn_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_func_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).insn_off) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_func_info),
                    "::",
                    stringify!(insn_off)
                )
            );
        }
        test_field_insn_off();
        fn test_field_type_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_func_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_id) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_func_info),
                    "::",
                    stringify!(type_id)
                )
            );
        }
        test_field_type_id();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_line_info {
        pub insn_off: __lkl__u32,
        pub file_name_off: __lkl__u32,
        pub line_off: __lkl__u32,
        pub line_col: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_line_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_line_info>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_bpf_line_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_line_info>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_line_info))
        );
        fn test_field_insn_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_line_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).insn_off) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_line_info),
                    "::",
                    stringify!(insn_off)
                )
            );
        }
        test_field_insn_off();
        fn test_field_file_name_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_line_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).file_name_off) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_line_info),
                    "::",
                    stringify!(file_name_off)
                )
            );
        }
        test_field_file_name_off();
        fn test_field_line_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_line_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).line_off) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_line_info),
                    "::",
                    stringify!(line_off)
                )
            );
        }
        test_field_line_off();
        fn test_field_line_col() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_line_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).line_col) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_line_info),
                    "::",
                    stringify!(line_col)
                )
            );
        }
        test_field_line_col();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_spin_lock {
        pub val: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_spin_lock() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_spin_lock>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_bpf_spin_lock))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_spin_lock>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_spin_lock))
        );
        fn test_field_val() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_spin_lock>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_spin_lock),
                    "::",
                    stringify!(val)
                )
            );
        }
        test_field_val();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_sysctl {
        pub write: __lkl__u32,
        pub file_pos: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sysctl() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sysctl>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_sysctl))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sysctl>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sysctl))
        );
        fn test_field_write() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sysctl>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sysctl),
                    "::",
                    stringify!(write)
                )
            );
        }
        test_field_write();
        fn test_field_file_pos() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sysctl>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).file_pos) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sysctl),
                    "::",
                    stringify!(file_pos)
                )
            );
        }
        test_field_file_pos();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_sockopt {
        pub __bindgen_anon_1: lkl_bpf_sockopt__bindgen_ty_1,
        pub __bindgen_anon_2: lkl_bpf_sockopt__bindgen_ty_2,
        pub __bindgen_anon_3: lkl_bpf_sockopt__bindgen_ty_3,
        pub level: __lkl__s32,
        pub optname: __lkl__s32,
        pub optlen: __lkl__s32,
        pub retval: __lkl__s32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_sockopt__bindgen_ty_1 {
        pub sk: *mut lkl_bpf_sock,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sockopt__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sockopt__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_sockopt__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sockopt__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sockopt__bindgen_ty_1))
        );
        fn test_field_sk() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sockopt__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sk) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sockopt__bindgen_ty_1),
                    "::",
                    stringify!(sk)
                )
            );
        }
        test_field_sk();
    }
    impl lkl_bpf_sockopt__bindgen_ty_1 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_sockopt__bindgen_ty_2 {
        pub optval: *mut ::std::os::raw::c_void,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sockopt__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sockopt__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_sockopt__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sockopt__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sockopt__bindgen_ty_2))
        );
        fn test_field_optval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sockopt__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).optval) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sockopt__bindgen_ty_2),
                    "::",
                    stringify!(optval)
                )
            );
        }
        test_field_optval();
    }
    impl lkl_bpf_sockopt__bindgen_ty_2 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_sockopt__bindgen_ty_3 {
        pub optval_end: *mut ::std::os::raw::c_void,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sockopt__bindgen_ty_3() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sockopt__bindgen_ty_3>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_sockopt__bindgen_ty_3))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sockopt__bindgen_ty_3>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sockopt__bindgen_ty_3))
        );
        fn test_field_optval_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sockopt__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).optval_end) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sockopt__bindgen_ty_3),
                    "::",
                    stringify!(optval_end)
                )
            );
        }
        test_field_optval_end();
    }
    impl lkl_bpf_sockopt__bindgen_ty_3 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sockopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sockopt>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_bpf_sockopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sockopt>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sockopt))
        );
        fn test_field_level() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sockopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sockopt),
                    "::",
                    stringify!(level)
                )
            );
        }
        test_field_level();
        fn test_field_optname() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sockopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).optname) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sockopt),
                    "::",
                    stringify!(optname)
                )
            );
        }
        test_field_optname();
        fn test_field_optlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sockopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).optlen) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sockopt),
                    "::",
                    stringify!(optlen)
                )
            );
        }
        test_field_optlen();
        fn test_field_retval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sockopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).retval) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sockopt),
                    "::",
                    stringify!(retval)
                )
            );
        }
        test_field_retval();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_bpf_pidns_info {
        pub pid: __lkl__u32,
        pub tgid: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_pidns_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_pidns_info>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_pidns_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_pidns_info>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_bpf_pidns_info))
        );
        fn test_field_pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_pidns_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_pidns_info),
                    "::",
                    stringify!(pid)
                )
            );
        }
        test_field_pid();
        fn test_field_tgid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_pidns_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tgid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_pidns_info),
                    "::",
                    stringify!(tgid)
                )
            );
        }
        test_field_tgid();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_bpf_sk_lookup {
        pub __bindgen_anon_1: lkl_bpf_sk_lookup__bindgen_ty_1,
        pub family: __lkl__u32,
        pub protocol: __lkl__u32,
        pub remote_ip4: __lkl__u32,
        pub remote_ip6: [__lkl__u32; 4usize],
        pub remote_port: __lkl__u32,
        pub local_ip4: __lkl__u32,
        pub local_ip6: [__lkl__u32; 4usize],
        pub local_port: __lkl__u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_bpf_sk_lookup__bindgen_ty_1 {
        pub sk: *mut lkl_bpf_sock,
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sk_lookup__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sk_lookup__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_bpf_sk_lookup__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sk_lookup__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sk_lookup__bindgen_ty_1))
        );
        fn test_field_sk() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sk_lookup__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sk) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sk_lookup__bindgen_ty_1),
                    "::",
                    stringify!(sk)
                )
            );
        }
        test_field_sk();
    }
    impl lkl_bpf_sk_lookup__bindgen_ty_1 {
        #[inline]
        pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit
        }
    }
    #[test]
    fn bindgen_test_layout_lkl_bpf_sk_lookup() {
        assert_eq!(
            ::std::mem::size_of::<lkl_bpf_sk_lookup>(),
            64usize,
            concat!("Size of: ", stringify!(lkl_bpf_sk_lookup))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_bpf_sk_lookup>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_bpf_sk_lookup))
        );
        fn test_field_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sk_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sk_lookup),
                    "::",
                    stringify!(family)
                )
            );
        }
        test_field_family();
        fn test_field_protocol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sk_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sk_lookup),
                    "::",
                    stringify!(protocol)
                )
            );
        }
        test_field_protocol();
        fn test_field_remote_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sk_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ip4) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sk_lookup),
                    "::",
                    stringify!(remote_ip4)
                )
            );
        }
        test_field_remote_ip4();
        fn test_field_remote_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sk_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_ip6) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sk_lookup),
                    "::",
                    stringify!(remote_ip6)
                )
            );
        }
        test_field_remote_ip6();
        fn test_field_remote_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sk_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).remote_port) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sk_lookup),
                    "::",
                    stringify!(remote_port)
                )
            );
        }
        test_field_remote_port();
        fn test_field_local_ip4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sk_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_ip4) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sk_lookup),
                    "::",
                    stringify!(local_ip4)
                )
            );
        }
        test_field_local_ip4();
        fn test_field_local_ip6() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sk_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_ip6) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sk_lookup),
                    "::",
                    stringify!(local_ip6)
                )
            );
        }
        test_field_local_ip6();
        fn test_field_local_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_bpf_sk_lookup>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).local_port) as usize - ptr as usize
                },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_bpf_sk_lookup),
                    "::",
                    stringify!(local_port)
                )
            );
        }
        test_field_local_port();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_btf_ptr {
        pub ptr: *mut ::std::os::raw::c_void,
        pub type_id: __lkl__u32,
        pub flags: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_btf_ptr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_btf_ptr>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_btf_ptr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_btf_ptr>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_btf_ptr))
        );
        fn test_field_ptr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_btf_ptr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_btf_ptr),
                    "::",
                    stringify!(ptr)
                )
            );
        }
        test_field_ptr();
        fn test_field_type_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_btf_ptr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_id) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_btf_ptr),
                    "::",
                    stringify!(type_id)
                )
            );
        }
        test_field_type_id();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_btf_ptr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_btf_ptr),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    pub const LKL_BTF_F_COMPACT: _bindgen_ty_34 = 1;
    pub const LKL_BTF_F_NONAME: _bindgen_ty_34 = 2;
    pub const LKL_BTF_F_PTR_RAW: _bindgen_ty_34 = 4;
    pub const LKL_BTF_F_ZERO: _bindgen_ty_34 = 8;
    pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ipc_perm {
        pub key: __lkl__kernel_key_t,
        pub uid: __lkl__kernel_uid_t,
        pub gid: __lkl__kernel_gid_t,
        pub cuid: __lkl__kernel_uid_t,
        pub cgid: __lkl__kernel_gid_t,
        pub mode: __lkl__kernel_mode_t,
        pub seq: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_ipc_perm() {
        assert_eq!(
            ::std::mem::size_of::<ipc_perm>(),
            28usize,
            concat!("Size of: ", stringify!(ipc_perm))
        );
        assert_eq!(
            ::std::mem::align_of::<ipc_perm>(),
            4usize,
            concat!("Alignment of ", stringify!(ipc_perm))
        );
        fn test_field_key() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<ipc_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ipc_perm),
                    "::",
                    stringify!(key)
                )
            );
        }
        test_field_key();
        fn test_field_uid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<ipc_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ipc_perm),
                    "::",
                    stringify!(uid)
                )
            );
        }
        test_field_uid();
        fn test_field_gid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<ipc_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ipc_perm),
                    "::",
                    stringify!(gid)
                )
            );
        }
        test_field_gid();
        fn test_field_cuid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<ipc_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cuid) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ipc_perm),
                    "::",
                    stringify!(cuid)
                )
            );
        }
        test_field_cuid();
        fn test_field_cgid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<ipc_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cgid) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ipc_perm),
                    "::",
                    stringify!(cgid)
                )
            );
        }
        test_field_cgid();
        fn test_field_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<ipc_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ipc_perm),
                    "::",
                    stringify!(mode)
                )
            );
        }
        test_field_mode();
        fn test_field_seq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<ipc_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ipc_perm),
                    "::",
                    stringify!(seq)
                )
            );
        }
        test_field_seq();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_ipc64_perm {
        pub key: __lkl__kernel_key_t,
        pub uid: __lkl__kernel_uid32_t,
        pub gid: __lkl__kernel_gid32_t,
        pub cuid: __lkl__kernel_uid32_t,
        pub cgid: __lkl__kernel_gid32_t,
        pub mode: __lkl__kernel_mode_t,
        pub __pad1: __IncompleteArrayField<::std::os::raw::c_uchar>,
        pub seq: ::std::os::raw::c_ushort,
        pub __pad2: ::std::os::raw::c_ushort,
        pub __unused1: __lkl__kernel_ulong_t,
        pub __unused2: __lkl__kernel_ulong_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_ipc64_perm() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ipc64_perm>(),
            48usize,
            concat!("Size of: ", stringify!(lkl_ipc64_perm))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ipc64_perm>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_ipc64_perm))
        );
        fn test_field_key() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(key)
                )
            );
        }
        test_field_key();
        fn test_field_uid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(uid)
                )
            );
        }
        test_field_uid();
        fn test_field_gid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(gid)
                )
            );
        }
        test_field_gid();
        fn test_field_cuid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cuid) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(cuid)
                )
            );
        }
        test_field_cuid();
        fn test_field_cgid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cgid) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(cgid)
                )
            );
        }
        test_field_cgid();
        fn test_field_mode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(mode)
                )
            );
        }
        test_field_mode();
        fn test_field___pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(__pad1)
                )
            );
        }
        test_field___pad1();
        fn test_field_seq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(seq)
                )
            );
        }
        test_field_seq();
        fn test_field___pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
                },
                26usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(__pad2)
                )
            );
        }
        test_field___pad2();
        fn test_field___unused1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused1) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(__unused1)
                )
            );
        }
        test_field___unused1();
        fn test_field___unused2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc64_perm>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused2) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc64_perm),
                    "::",
                    stringify!(__unused2)
                )
            );
        }
        test_field___unused2();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ipc_kludge {
        pub msgp: *mut lkl_msgbuf,
        pub msgtyp: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_lkl_ipc_kludge() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ipc_kludge>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_ipc_kludge))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ipc_kludge>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_ipc_kludge))
        );
        fn test_field_msgp() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc_kludge>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msgp) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc_kludge),
                    "::",
                    stringify!(msgp)
                )
            );
        }
        test_field_msgp();
        fn test_field_msgtyp() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipc_kludge>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msgtyp) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipc_kludge),
                    "::",
                    stringify!(msgtyp)
                )
            );
        }
        test_field_msgtyp();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_msqid_ds {
        pub msg_perm: ipc_perm,
        pub msg_first: *mut msg,
        pub msg_last: *mut msg,
        pub msg_stime: __lkl__kernel_old_time_t,
        pub msg_rtime: __lkl__kernel_old_time_t,
        pub msg_ctime: __lkl__kernel_old_time_t,
        pub msg_lcbytes: ::std::os::raw::c_ulong,
        pub msg_lqbytes: ::std::os::raw::c_ulong,
        pub msg_cbytes: ::std::os::raw::c_ushort,
        pub msg_qnum: ::std::os::raw::c_ushort,
        pub msg_qbytes: ::std::os::raw::c_ushort,
        pub msg_lspid: __lkl__kernel_ipc_pid_t,
        pub msg_lrpid: __lkl__kernel_ipc_pid_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_msqid_ds() {
        assert_eq!(
            ::std::mem::size_of::<lkl_msqid_ds>(),
            104usize,
            concat!("Size of: ", stringify!(lkl_msqid_ds))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_msqid_ds>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_msqid_ds))
        );
        fn test_field_msg_perm() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_perm) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_perm)
                )
            );
        }
        test_field_msg_perm();
        fn test_field_msg_first() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_first) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_first)
                )
            );
        }
        test_field_msg_first();
        fn test_field_msg_last() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_last) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_last)
                )
            );
        }
        test_field_msg_last();
        fn test_field_msg_stime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_stime) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_stime)
                )
            );
        }
        test_field_msg_stime();
        fn test_field_msg_rtime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_rtime) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_rtime)
                )
            );
        }
        test_field_msg_rtime();
        fn test_field_msg_ctime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_ctime) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_ctime)
                )
            );
        }
        test_field_msg_ctime();
        fn test_field_msg_lcbytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_lcbytes) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_lcbytes)
                )
            );
        }
        test_field_msg_lcbytes();
        fn test_field_msg_lqbytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_lqbytes) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_lqbytes)
                )
            );
        }
        test_field_msg_lqbytes();
        fn test_field_msg_cbytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_cbytes) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_cbytes)
                )
            );
        }
        test_field_msg_cbytes();
        fn test_field_msg_qnum() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_qnum) as usize - ptr as usize
                },
                90usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_qnum)
                )
            );
        }
        test_field_msg_qnum();
        fn test_field_msg_qbytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_qbytes) as usize - ptr as usize
                },
                92usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_qbytes)
                )
            );
        }
        test_field_msg_qbytes();
        fn test_field_msg_lspid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_lspid) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_lspid)
                )
            );
        }
        test_field_msg_lspid();
        fn test_field_msg_lrpid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_lrpid) as usize - ptr as usize
                },
                100usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid_ds),
                    "::",
                    stringify!(msg_lrpid)
                )
            );
        }
        test_field_msg_lrpid();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_msqid64_ds {
        pub msg_perm: lkl_ipc64_perm,
        pub msg_stime: ::std::os::raw::c_long,
        pub msg_rtime: ::std::os::raw::c_long,
        pub msg_ctime: ::std::os::raw::c_long,
        pub msg_cbytes: ::std::os::raw::c_ulong,
        pub msg_qnum: ::std::os::raw::c_ulong,
        pub msg_qbytes: ::std::os::raw::c_ulong,
        pub msg_lspid: __lkl__kernel_pid_t,
        pub msg_lrpid: __lkl__kernel_pid_t,
        pub __unused4: ::std::os::raw::c_ulong,
        pub __unused5: ::std::os::raw::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_lkl_msqid64_ds() {
        assert_eq!(
            ::std::mem::size_of::<lkl_msqid64_ds>(),
            120usize,
            concat!("Size of: ", stringify!(lkl_msqid64_ds))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_msqid64_ds>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_msqid64_ds))
        );
        fn test_field_msg_perm() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_perm) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(msg_perm)
                )
            );
        }
        test_field_msg_perm();
        fn test_field_msg_stime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_stime) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(msg_stime)
                )
            );
        }
        test_field_msg_stime();
        fn test_field_msg_rtime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_rtime) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(msg_rtime)
                )
            );
        }
        test_field_msg_rtime();
        fn test_field_msg_ctime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_ctime) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(msg_ctime)
                )
            );
        }
        test_field_msg_ctime();
        fn test_field_msg_cbytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_cbytes) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(msg_cbytes)
                )
            );
        }
        test_field_msg_cbytes();
        fn test_field_msg_qnum() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_qnum) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(msg_qnum)
                )
            );
        }
        test_field_msg_qnum();
        fn test_field_msg_qbytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_qbytes) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(msg_qbytes)
                )
            );
        }
        test_field_msg_qbytes();
        fn test_field_msg_lspid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_lspid) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(msg_lspid)
                )
            );
        }
        test_field_msg_lspid();
        fn test_field_msg_lrpid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_lrpid) as usize - ptr as usize
                },
                100usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(msg_lrpid)
                )
            );
        }
        test_field_msg_lrpid();
        fn test_field___unused4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused4) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(__unused4)
                )
            );
        }
        test_field___unused4();
        fn test_field___unused5() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msqid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused5) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msqid64_ds),
                    "::",
                    stringify!(__unused5)
                )
            );
        }
        test_field___unused5();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_msgbuf {
        pub mtype: __lkl__kernel_long_t,
        pub mtext: [::std::os::raw::c_char; 1usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_msgbuf() {
        assert_eq!(
            ::std::mem::size_of::<lkl_msgbuf>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_msgbuf))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_msgbuf>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_msgbuf))
        );
        fn test_field_mtype() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msgbuf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mtype) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msgbuf),
                    "::",
                    stringify!(mtype)
                )
            );
        }
        test_field_mtype();
        fn test_field_mtext() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msgbuf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mtext) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msgbuf),
                    "::",
                    stringify!(mtext)
                )
            );
        }
        test_field_mtext();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_msginfo {
        pub msgpool: ::std::os::raw::c_int,
        pub msgmap: ::std::os::raw::c_int,
        pub msgmax: ::std::os::raw::c_int,
        pub msgmnb: ::std::os::raw::c_int,
        pub msgmni: ::std::os::raw::c_int,
        pub msgssz: ::std::os::raw::c_int,
        pub msgtql: ::std::os::raw::c_int,
        pub msgseg: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_lkl_msginfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_msginfo>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_msginfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_msginfo>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_msginfo))
        );
        fn test_field_msgpool() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msginfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msgpool) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msginfo),
                    "::",
                    stringify!(msgpool)
                )
            );
        }
        test_field_msgpool();
        fn test_field_msgmap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msginfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msgmap) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msginfo),
                    "::",
                    stringify!(msgmap)
                )
            );
        }
        test_field_msgmap();
        fn test_field_msgmax() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msginfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msgmax) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msginfo),
                    "::",
                    stringify!(msgmax)
                )
            );
        }
        test_field_msgmax();
        fn test_field_msgmnb() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msginfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msgmnb) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msginfo),
                    "::",
                    stringify!(msgmnb)
                )
            );
        }
        test_field_msgmnb();
        fn test_field_msgmni() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msginfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msgmni) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msginfo),
                    "::",
                    stringify!(msgmni)
                )
            );
        }
        test_field_msgmni();
        fn test_field_msgssz() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msginfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msgssz) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msginfo),
                    "::",
                    stringify!(msgssz)
                )
            );
        }
        test_field_msgssz();
        fn test_field_msgtql() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msginfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msgtql) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msginfo),
                    "::",
                    stringify!(msgtql)
                )
            );
        }
        test_field_msgtql();
        fn test_field_msgseg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_msginfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msgseg) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_msginfo),
                    "::",
                    stringify!(msgseg)
                )
            );
        }
        test_field_msgseg();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rusage {
        pub ru_utime: __lkl__kernel_old_timeval,
        pub ru_stime: __lkl__kernel_old_timeval,
        pub ru_maxrss: __lkl__kernel_long_t,
        pub ru_ixrss: __lkl__kernel_long_t,
        pub ru_idrss: __lkl__kernel_long_t,
        pub ru_isrss: __lkl__kernel_long_t,
        pub ru_minflt: __lkl__kernel_long_t,
        pub ru_majflt: __lkl__kernel_long_t,
        pub ru_nswap: __lkl__kernel_long_t,
        pub ru_inblock: __lkl__kernel_long_t,
        pub ru_oublock: __lkl__kernel_long_t,
        pub ru_msgsnd: __lkl__kernel_long_t,
        pub ru_msgrcv: __lkl__kernel_long_t,
        pub ru_nsignals: __lkl__kernel_long_t,
        pub ru_nvcsw: __lkl__kernel_long_t,
        pub ru_nivcsw: __lkl__kernel_long_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_rusage() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rusage>(),
            144usize,
            concat!("Size of: ", stringify!(lkl_rusage))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rusage>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_rusage))
        );
        fn test_field_ru_utime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_utime) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_utime)
                )
            );
        }
        test_field_ru_utime();
        fn test_field_ru_stime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_stime) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_stime)
                )
            );
        }
        test_field_ru_stime();
        fn test_field_ru_maxrss() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_maxrss) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_maxrss)
                )
            );
        }
        test_field_ru_maxrss();
        fn test_field_ru_ixrss() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_ixrss) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_ixrss)
                )
            );
        }
        test_field_ru_ixrss();
        fn test_field_ru_idrss() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_idrss) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_idrss)
                )
            );
        }
        test_field_ru_idrss();
        fn test_field_ru_isrss() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_isrss) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_isrss)
                )
            );
        }
        test_field_ru_isrss();
        fn test_field_ru_minflt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_minflt) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_minflt)
                )
            );
        }
        test_field_ru_minflt();
        fn test_field_ru_majflt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_majflt) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_majflt)
                )
            );
        }
        test_field_ru_majflt();
        fn test_field_ru_nswap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_nswap) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_nswap)
                )
            );
        }
        test_field_ru_nswap();
        fn test_field_ru_inblock() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_inblock) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_inblock)
                )
            );
        }
        test_field_ru_inblock();
        fn test_field_ru_oublock() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_oublock) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_oublock)
                )
            );
        }
        test_field_ru_oublock();
        fn test_field_ru_msgsnd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_msgsnd) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_msgsnd)
                )
            );
        }
        test_field_ru_msgsnd();
        fn test_field_ru_msgrcv() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_msgrcv) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_msgrcv)
                )
            );
        }
        test_field_ru_msgrcv();
        fn test_field_ru_nsignals() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_nsignals) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_nsignals)
                )
            );
        }
        test_field_ru_nsignals();
        fn test_field_ru_nvcsw() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_nvcsw) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_nvcsw)
                )
            );
        }
        test_field_ru_nvcsw();
        fn test_field_ru_nivcsw() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rusage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ru_nivcsw) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rusage),
                    "::",
                    stringify!(ru_nivcsw)
                )
            );
        }
        test_field_ru_nivcsw();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rlimit {
        pub rlim_cur: __lkl__kernel_ulong_t,
        pub rlim_max: __lkl__kernel_ulong_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_rlimit() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rlimit>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_rlimit))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rlimit>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_rlimit))
        );
        fn test_field_rlim_cur() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rlimit>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rlimit),
                    "::",
                    stringify!(rlim_cur)
                )
            );
        }
        test_field_rlim_cur();
        fn test_field_rlim_max() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rlimit>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rlimit),
                    "::",
                    stringify!(rlim_max)
                )
            );
        }
        test_field_rlim_max();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rlimit64 {
        pub rlim_cur: __lkl__u64,
        pub rlim_max: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_rlimit64() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rlimit64>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_rlimit64))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rlimit64>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_rlimit64))
        );
        fn test_field_rlim_cur() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rlimit64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rlimit64),
                    "::",
                    stringify!(rlim_cur)
                )
            );
        }
        test_field_rlim_cur();
        fn test_field_rlim_max() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rlimit64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rlimit64),
                    "::",
                    stringify!(rlim_max)
                )
            );
        }
        test_field_rlim_max();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_sysinfo {
        pub uptime: __lkl__kernel_long_t,
        pub loads: [__lkl__kernel_ulong_t; 3usize],
        pub totalram: __lkl__kernel_ulong_t,
        pub freeram: __lkl__kernel_ulong_t,
        pub sharedram: __lkl__kernel_ulong_t,
        pub bufferram: __lkl__kernel_ulong_t,
        pub totalswap: __lkl__kernel_ulong_t,
        pub freeswap: __lkl__kernel_ulong_t,
        pub procs: __lkl__u16,
        pub pad: __lkl__u16,
        pub totalhigh: __lkl__kernel_ulong_t,
        pub freehigh: __lkl__kernel_ulong_t,
        pub mem_unit: __lkl__u32,
        pub _f: __IncompleteArrayField<::std::os::raw::c_char>,
    }
    #[test]
    fn bindgen_test_layout_lkl_sysinfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sysinfo>(),
            112usize,
            concat!("Size of: ", stringify!(lkl_sysinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sysinfo>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sysinfo))
        );
        fn test_field_uptime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).uptime) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(uptime)
                )
            );
        }
        test_field_uptime();
        fn test_field_loads() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).loads) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(loads)
                )
            );
        }
        test_field_loads();
        fn test_field_totalram() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).totalram) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(totalram)
                )
            );
        }
        test_field_totalram();
        fn test_field_freeram() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).freeram) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(freeram)
                )
            );
        }
        test_field_freeram();
        fn test_field_sharedram() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sharedram) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(sharedram)
                )
            );
        }
        test_field_sharedram();
        fn test_field_bufferram() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bufferram) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(bufferram)
                )
            );
        }
        test_field_bufferram();
        fn test_field_totalswap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).totalswap) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(totalswap)
                )
            );
        }
        test_field_totalswap();
        fn test_field_freeswap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).freeswap) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(freeswap)
                )
            );
        }
        test_field_freeswap();
        fn test_field_procs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).procs) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(procs)
                )
            );
        }
        test_field_procs();
        fn test_field_pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
                },
                82usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(pad)
                )
            );
        }
        test_field_pad();
        fn test_field_totalhigh() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).totalhigh) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(totalhigh)
                )
            );
        }
        test_field_totalhigh();
        fn test_field_freehigh() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).freehigh) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(freehigh)
                )
            );
        }
        test_field_freehigh();
        fn test_field_mem_unit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mem_unit) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(mem_unit)
                )
            );
        }
        test_field_mem_unit();
        fn test_field__f() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sysinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._f) as usize - ptr as usize
                },
                108usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sysinfo),
                    "::",
                    stringify!(_f)
                )
            );
        }
        test_field__f();
    }
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = __int8_t;
    pub type __uint_least8_t = __uint8_t;
    pub type __int_least16_t = __int16_t;
    pub type __uint_least16_t = __uint16_t;
    pub type __int_least32_t = __int32_t;
    pub type __uint_least32_t = __uint32_t;
    pub type __int_least64_t = __int64_t;
    pub type __uint_least64_t = __uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        fn test_field___val() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__fsid_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__fsid_t),
                    "::",
                    stringify!(__val)
                )
            );
        }
        test_field___val();
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = __off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    pub type ssize_t = __ssize_t;
    pub type size_t = ::std::os::raw::c_ulong;
    pub type gid_t = __gid_t;
    pub type uid_t = __uid_t;
    pub type off_t = __off_t;
    pub type useconds_t = __useconds_t;
    pub type pid_t = __pid_t;
    pub type socklen_t = __socklen_t;
    extern "C" {
        pub fn access(
            __name: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn faccessat(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lseek(
            __fd: ::std::os::raw::c_int,
            __offset: __off_t,
            __whence: ::std::os::raw::c_int,
        ) -> __off_t;
    }
    extern "C" {
        pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn read(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: size_t,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn write(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: size_t,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn pread(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: size_t,
            __offset: __off_t,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn pwrite(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: size_t,
            __offset: __off_t,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
    }
    extern "C" {
        pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pause() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn chown(
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fchown(
            __fd: ::std::os::raw::c_int,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lchown(
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fchownat(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getcwd(
            __buf: *mut ::std::os::raw::c_char,
            __size: size_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut __environ: *mut *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn execve(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fexecve(
            __fd: ::std::os::raw::c_int,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execv(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execle(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execl(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execvp(
            __file: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execlp(
            __file: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _exit(__status: ::std::os::raw::c_int);
    }
    pub const _PC_LINK_MAX: _bindgen_ty_35 = 0;
    pub const _PC_MAX_CANON: _bindgen_ty_35 = 1;
    pub const _PC_MAX_INPUT: _bindgen_ty_35 = 2;
    pub const _PC_NAME_MAX: _bindgen_ty_35 = 3;
    pub const _PC_PATH_MAX: _bindgen_ty_35 = 4;
    pub const _PC_PIPE_BUF: _bindgen_ty_35 = 5;
    pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_35 = 6;
    pub const _PC_NO_TRUNC: _bindgen_ty_35 = 7;
    pub const _PC_VDISABLE: _bindgen_ty_35 = 8;
    pub const _PC_SYNC_IO: _bindgen_ty_35 = 9;
    pub const _PC_ASYNC_IO: _bindgen_ty_35 = 10;
    pub const _PC_PRIO_IO: _bindgen_ty_35 = 11;
    pub const _PC_SOCK_MAXBUF: _bindgen_ty_35 = 12;
    pub const _PC_FILESIZEBITS: _bindgen_ty_35 = 13;
    pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_35 = 14;
    pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_35 = 15;
    pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_35 = 16;
    pub const _PC_REC_XFER_ALIGN: _bindgen_ty_35 = 17;
    pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_35 = 18;
    pub const _PC_SYMLINK_MAX: _bindgen_ty_35 = 19;
    pub const _PC_2_SYMLINKS: _bindgen_ty_35 = 20;
    pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
    pub const _SC_ARG_MAX: _bindgen_ty_36 = 0;
    pub const _SC_CHILD_MAX: _bindgen_ty_36 = 1;
    pub const _SC_CLK_TCK: _bindgen_ty_36 = 2;
    pub const _SC_NGROUPS_MAX: _bindgen_ty_36 = 3;
    pub const _SC_OPEN_MAX: _bindgen_ty_36 = 4;
    pub const _SC_STREAM_MAX: _bindgen_ty_36 = 5;
    pub const _SC_TZNAME_MAX: _bindgen_ty_36 = 6;
    pub const _SC_JOB_CONTROL: _bindgen_ty_36 = 7;
    pub const _SC_SAVED_IDS: _bindgen_ty_36 = 8;
    pub const _SC_REALTIME_SIGNALS: _bindgen_ty_36 = 9;
    pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_36 = 10;
    pub const _SC_TIMERS: _bindgen_ty_36 = 11;
    pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_36 = 12;
    pub const _SC_PRIORITIZED_IO: _bindgen_ty_36 = 13;
    pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_36 = 14;
    pub const _SC_FSYNC: _bindgen_ty_36 = 15;
    pub const _SC_MAPPED_FILES: _bindgen_ty_36 = 16;
    pub const _SC_MEMLOCK: _bindgen_ty_36 = 17;
    pub const _SC_MEMLOCK_RANGE: _bindgen_ty_36 = 18;
    pub const _SC_MEMORY_PROTECTION: _bindgen_ty_36 = 19;
    pub const _SC_MESSAGE_PASSING: _bindgen_ty_36 = 20;
    pub const _SC_SEMAPHORES: _bindgen_ty_36 = 21;
    pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_36 = 22;
    pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_36 = 23;
    pub const _SC_AIO_MAX: _bindgen_ty_36 = 24;
    pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_36 = 25;
    pub const _SC_DELAYTIMER_MAX: _bindgen_ty_36 = 26;
    pub const _SC_MQ_OPEN_MAX: _bindgen_ty_36 = 27;
    pub const _SC_MQ_PRIO_MAX: _bindgen_ty_36 = 28;
    pub const _SC_VERSION: _bindgen_ty_36 = 29;
    pub const _SC_PAGESIZE: _bindgen_ty_36 = 30;
    pub const _SC_RTSIG_MAX: _bindgen_ty_36 = 31;
    pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_36 = 32;
    pub const _SC_SEM_VALUE_MAX: _bindgen_ty_36 = 33;
    pub const _SC_SIGQUEUE_MAX: _bindgen_ty_36 = 34;
    pub const _SC_TIMER_MAX: _bindgen_ty_36 = 35;
    pub const _SC_BC_BASE_MAX: _bindgen_ty_36 = 36;
    pub const _SC_BC_DIM_MAX: _bindgen_ty_36 = 37;
    pub const _SC_BC_SCALE_MAX: _bindgen_ty_36 = 38;
    pub const _SC_BC_STRING_MAX: _bindgen_ty_36 = 39;
    pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_36 = 40;
    pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_36 = 41;
    pub const _SC_EXPR_NEST_MAX: _bindgen_ty_36 = 42;
    pub const _SC_LINE_MAX: _bindgen_ty_36 = 43;
    pub const _SC_RE_DUP_MAX: _bindgen_ty_36 = 44;
    pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_36 = 45;
    pub const _SC_2_VERSION: _bindgen_ty_36 = 46;
    pub const _SC_2_C_BIND: _bindgen_ty_36 = 47;
    pub const _SC_2_C_DEV: _bindgen_ty_36 = 48;
    pub const _SC_2_FORT_DEV: _bindgen_ty_36 = 49;
    pub const _SC_2_FORT_RUN: _bindgen_ty_36 = 50;
    pub const _SC_2_SW_DEV: _bindgen_ty_36 = 51;
    pub const _SC_2_LOCALEDEF: _bindgen_ty_36 = 52;
    pub const _SC_PII: _bindgen_ty_36 = 53;
    pub const _SC_PII_XTI: _bindgen_ty_36 = 54;
    pub const _SC_PII_SOCKET: _bindgen_ty_36 = 55;
    pub const _SC_PII_INTERNET: _bindgen_ty_36 = 56;
    pub const _SC_PII_OSI: _bindgen_ty_36 = 57;
    pub const _SC_POLL: _bindgen_ty_36 = 58;
    pub const _SC_SELECT: _bindgen_ty_36 = 59;
    pub const _SC_UIO_MAXIOV: _bindgen_ty_36 = 60;
    pub const _SC_IOV_MAX: _bindgen_ty_36 = 60;
    pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_36 = 61;
    pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_36 = 62;
    pub const _SC_PII_OSI_COTS: _bindgen_ty_36 = 63;
    pub const _SC_PII_OSI_CLTS: _bindgen_ty_36 = 64;
    pub const _SC_PII_OSI_M: _bindgen_ty_36 = 65;
    pub const _SC_T_IOV_MAX: _bindgen_ty_36 = 66;
    pub const _SC_THREADS: _bindgen_ty_36 = 67;
    pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_36 = 68;
    pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_36 = 69;
    pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_36 = 70;
    pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_36 = 71;
    pub const _SC_TTY_NAME_MAX: _bindgen_ty_36 = 72;
    pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_36 = 73;
    pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_36 = 74;
    pub const _SC_THREAD_STACK_MIN: _bindgen_ty_36 = 75;
    pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_36 = 76;
    pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_36 = 77;
    pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_36 = 78;
    pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_36 = 79;
    pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_36 = 80;
    pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_36 = 81;
    pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_36 = 82;
    pub const _SC_NPROCESSORS_CONF: _bindgen_ty_36 = 83;
    pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_36 = 84;
    pub const _SC_PHYS_PAGES: _bindgen_ty_36 = 85;
    pub const _SC_AVPHYS_PAGES: _bindgen_ty_36 = 86;
    pub const _SC_ATEXIT_MAX: _bindgen_ty_36 = 87;
    pub const _SC_PASS_MAX: _bindgen_ty_36 = 88;
    pub const _SC_XOPEN_VERSION: _bindgen_ty_36 = 89;
    pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_36 = 90;
    pub const _SC_XOPEN_UNIX: _bindgen_ty_36 = 91;
    pub const _SC_XOPEN_CRYPT: _bindgen_ty_36 = 92;
    pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_36 = 93;
    pub const _SC_XOPEN_SHM: _bindgen_ty_36 = 94;
    pub const _SC_2_CHAR_TERM: _bindgen_ty_36 = 95;
    pub const _SC_2_C_VERSION: _bindgen_ty_36 = 96;
    pub const _SC_2_UPE: _bindgen_ty_36 = 97;
    pub const _SC_XOPEN_XPG2: _bindgen_ty_36 = 98;
    pub const _SC_XOPEN_XPG3: _bindgen_ty_36 = 99;
    pub const _SC_XOPEN_XPG4: _bindgen_ty_36 = 100;
    pub const _SC_CHAR_BIT: _bindgen_ty_36 = 101;
    pub const _SC_CHAR_MAX: _bindgen_ty_36 = 102;
    pub const _SC_CHAR_MIN: _bindgen_ty_36 = 103;
    pub const _SC_INT_MAX: _bindgen_ty_36 = 104;
    pub const _SC_INT_MIN: _bindgen_ty_36 = 105;
    pub const _SC_LONG_BIT: _bindgen_ty_36 = 106;
    pub const _SC_WORD_BIT: _bindgen_ty_36 = 107;
    pub const _SC_MB_LEN_MAX: _bindgen_ty_36 = 108;
    pub const _SC_NZERO: _bindgen_ty_36 = 109;
    pub const _SC_SSIZE_MAX: _bindgen_ty_36 = 110;
    pub const _SC_SCHAR_MAX: _bindgen_ty_36 = 111;
    pub const _SC_SCHAR_MIN: _bindgen_ty_36 = 112;
    pub const _SC_SHRT_MAX: _bindgen_ty_36 = 113;
    pub const _SC_SHRT_MIN: _bindgen_ty_36 = 114;
    pub const _SC_UCHAR_MAX: _bindgen_ty_36 = 115;
    pub const _SC_UINT_MAX: _bindgen_ty_36 = 116;
    pub const _SC_ULONG_MAX: _bindgen_ty_36 = 117;
    pub const _SC_USHRT_MAX: _bindgen_ty_36 = 118;
    pub const _SC_NL_ARGMAX: _bindgen_ty_36 = 119;
    pub const _SC_NL_LANGMAX: _bindgen_ty_36 = 120;
    pub const _SC_NL_MSGMAX: _bindgen_ty_36 = 121;
    pub const _SC_NL_NMAX: _bindgen_ty_36 = 122;
    pub const _SC_NL_SETMAX: _bindgen_ty_36 = 123;
    pub const _SC_NL_TEXTMAX: _bindgen_ty_36 = 124;
    pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_36 = 125;
    pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_36 = 126;
    pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_36 = 127;
    pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_36 = 128;
    pub const _SC_XOPEN_LEGACY: _bindgen_ty_36 = 129;
    pub const _SC_XOPEN_REALTIME: _bindgen_ty_36 = 130;
    pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_36 = 131;
    pub const _SC_ADVISORY_INFO: _bindgen_ty_36 = 132;
    pub const _SC_BARRIERS: _bindgen_ty_36 = 133;
    pub const _SC_BASE: _bindgen_ty_36 = 134;
    pub const _SC_C_LANG_SUPPORT: _bindgen_ty_36 = 135;
    pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_36 = 136;
    pub const _SC_CLOCK_SELECTION: _bindgen_ty_36 = 137;
    pub const _SC_CPUTIME: _bindgen_ty_36 = 138;
    pub const _SC_THREAD_CPUTIME: _bindgen_ty_36 = 139;
    pub const _SC_DEVICE_IO: _bindgen_ty_36 = 140;
    pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_36 = 141;
    pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_36 = 142;
    pub const _SC_FD_MGMT: _bindgen_ty_36 = 143;
    pub const _SC_FIFO: _bindgen_ty_36 = 144;
    pub const _SC_PIPE: _bindgen_ty_36 = 145;
    pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_36 = 146;
    pub const _SC_FILE_LOCKING: _bindgen_ty_36 = 147;
    pub const _SC_FILE_SYSTEM: _bindgen_ty_36 = 148;
    pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_36 = 149;
    pub const _SC_MULTI_PROCESS: _bindgen_ty_36 = 150;
    pub const _SC_SINGLE_PROCESS: _bindgen_ty_36 = 151;
    pub const _SC_NETWORKING: _bindgen_ty_36 = 152;
    pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_36 = 153;
    pub const _SC_SPIN_LOCKS: _bindgen_ty_36 = 154;
    pub const _SC_REGEXP: _bindgen_ty_36 = 155;
    pub const _SC_REGEX_VERSION: _bindgen_ty_36 = 156;
    pub const _SC_SHELL: _bindgen_ty_36 = 157;
    pub const _SC_SIGNALS: _bindgen_ty_36 = 158;
    pub const _SC_SPAWN: _bindgen_ty_36 = 159;
    pub const _SC_SPORADIC_SERVER: _bindgen_ty_36 = 160;
    pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_36 = 161;
    pub const _SC_SYSTEM_DATABASE: _bindgen_ty_36 = 162;
    pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_36 = 163;
    pub const _SC_TIMEOUTS: _bindgen_ty_36 = 164;
    pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_36 = 165;
    pub const _SC_USER_GROUPS: _bindgen_ty_36 = 166;
    pub const _SC_USER_GROUPS_R: _bindgen_ty_36 = 167;
    pub const _SC_2_PBS: _bindgen_ty_36 = 168;
    pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_36 = 169;
    pub const _SC_2_PBS_LOCATE: _bindgen_ty_36 = 170;
    pub const _SC_2_PBS_MESSAGE: _bindgen_ty_36 = 171;
    pub const _SC_2_PBS_TRACK: _bindgen_ty_36 = 172;
    pub const _SC_SYMLOOP_MAX: _bindgen_ty_36 = 173;
    pub const _SC_STREAMS: _bindgen_ty_36 = 174;
    pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_36 = 175;
    pub const _SC_V6_ILP32_OFF32: _bindgen_ty_36 = 176;
    pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_36 = 177;
    pub const _SC_V6_LP64_OFF64: _bindgen_ty_36 = 178;
    pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_36 = 179;
    pub const _SC_HOST_NAME_MAX: _bindgen_ty_36 = 180;
    pub const _SC_TRACE: _bindgen_ty_36 = 181;
    pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_36 = 182;
    pub const _SC_TRACE_INHERIT: _bindgen_ty_36 = 183;
    pub const _SC_TRACE_LOG: _bindgen_ty_36 = 184;
    pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_36 = 185;
    pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_36 = 186;
    pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_36 = 187;
    pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_36 = 188;
    pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_36 = 189;
    pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_36 = 190;
    pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_36 = 191;
    pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_36 = 192;
    pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_36 = 193;
    pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_36 = 194;
    pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_36 = 195;
    pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_36 = 196;
    pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_36 = 197;
    pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_36 = 198;
    pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_36 = 199;
    pub const _SC_IPV6: _bindgen_ty_36 = 235;
    pub const _SC_RAW_SOCKETS: _bindgen_ty_36 = 236;
    pub const _SC_V7_ILP32_OFF32: _bindgen_ty_36 = 237;
    pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_36 = 238;
    pub const _SC_V7_LP64_OFF64: _bindgen_ty_36 = 239;
    pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_36 = 240;
    pub const _SC_SS_REPL_MAX: _bindgen_ty_36 = 241;
    pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_36 = 242;
    pub const _SC_TRACE_NAME_MAX: _bindgen_ty_36 = 243;
    pub const _SC_TRACE_SYS_MAX: _bindgen_ty_36 = 244;
    pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_36 = 245;
    pub const _SC_XOPEN_STREAMS: _bindgen_ty_36 = 246;
    pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_36 = 247;
    pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_36 = 248;
    pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
    pub const _CS_PATH: _bindgen_ty_37 = 0;
    pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_37 = 1;
    pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_37 = 2;
    pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_37 = 3;
    pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_37 = 4;
    pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_37 = 5;
    pub const _CS_LFS_CFLAGS: _bindgen_ty_37 = 1000;
    pub const _CS_LFS_LDFLAGS: _bindgen_ty_37 = 1001;
    pub const _CS_LFS_LIBS: _bindgen_ty_37 = 1002;
    pub const _CS_LFS_LINTFLAGS: _bindgen_ty_37 = 1003;
    pub const _CS_LFS64_CFLAGS: _bindgen_ty_37 = 1004;
    pub const _CS_LFS64_LDFLAGS: _bindgen_ty_37 = 1005;
    pub const _CS_LFS64_LIBS: _bindgen_ty_37 = 1006;
    pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_37 = 1007;
    pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_37 = 1100;
    pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_37 = 1101;
    pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_37 = 1102;
    pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_37 = 1103;
    pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_37 = 1104;
    pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_37 = 1105;
    pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_37 = 1106;
    pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_37 = 1107;
    pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_37 = 1108;
    pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_37 = 1109;
    pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_37 = 1110;
    pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_37 = 1111;
    pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_37 = 1112;
    pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_37 = 1113;
    pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_37 = 1114;
    pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_37 = 1115;
    pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_37 = 1116;
    pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_37 = 1117;
    pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_37 = 1118;
    pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_37 = 1119;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_37 = 1120;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_37 = 1121;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_37 = 1122;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_37 = 1123;
    pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_37 = 1124;
    pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_37 = 1125;
    pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_37 = 1126;
    pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_37 = 1127;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_37 = 1128;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_37 = 1129;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_37 = 1130;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_37 = 1131;
    pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_37 = 1132;
    pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_37 = 1133;
    pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_37 = 1134;
    pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_37 = 1135;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_37 = 1136;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_37 = 1137;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_37 = 1138;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_37 = 1139;
    pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_37 = 1140;
    pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_37 = 1141;
    pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_37 = 1142;
    pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_37 = 1143;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_37 = 1144;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_37 = 1145;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_37 = 1146;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_37 = 1147;
    pub const _CS_V6_ENV: _bindgen_ty_37 = 1148;
    pub const _CS_V7_ENV: _bindgen_ty_37 = 1149;
    pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
    extern "C" {
        pub fn pathconf(
            __path: *const ::std::os::raw::c_char,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn fpathconf(
            __fd: ::std::os::raw::c_int,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn confstr(
            __name: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> size_t;
    }
    extern "C" {
        pub fn getpid() -> __pid_t;
    }
    extern "C" {
        pub fn getppid() -> __pid_t;
    }
    extern "C" {
        pub fn getpgrp() -> __pid_t;
    }
    extern "C" {
        pub fn __getpgid(__pid: __pid_t) -> __pid_t;
    }
    extern "C" {
        pub fn getpgid(__pid: __pid_t) -> __pid_t;
    }
    extern "C" {
        pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setpgrp() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setsid() -> __pid_t;
    }
    extern "C" {
        pub fn getsid(__pid: __pid_t) -> __pid_t;
    }
    extern "C" {
        pub fn getuid() -> __uid_t;
    }
    extern "C" {
        pub fn geteuid() -> __uid_t;
    }
    extern "C" {
        pub fn getgid() -> __gid_t;
    }
    extern "C" {
        pub fn getegid() -> __gid_t;
    }
    extern "C" {
        pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fork() -> __pid_t;
    }
    extern "C" {
        pub fn vfork() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ttyname_r(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ttyslot() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn link(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn linkat(
            __fromfd: ::std::os::raw::c_int,
            __from: *const ::std::os::raw::c_char,
            __tofd: ::std::os::raw::c_int,
            __to: *const ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn symlink(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn readlink(
            __path: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn symlinkat(
            __from: *const ::std::os::raw::c_char,
            __tofd: ::std::os::raw::c_int,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn readlinkat(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unlinkat(
            __fd: ::std::os::raw::c_int,
            __name: *const ::std::os::raw::c_char,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
    }
    extern "C" {
        pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getlogin() -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn getlogin_r(
            __name: *mut ::std::os::raw::c_char,
            __name_len: size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut optarg: *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub static mut optind: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut opterr: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut optopt: ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getopt(
            ___argc: ::std::os::raw::c_int,
            ___argv: *const *mut ::std::os::raw::c_char,
            __shortopts: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sethostname(
            __name: *const ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getdomainname(
            __name: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setdomainname(
            __name: *const ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vhangup() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn profil(
            __sample_buffer: *mut ::std::os::raw::c_ushort,
            __size: size_t,
            __offset: size_t,
            __scale: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getusershell() -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn endusershell();
    }
    extern "C" {
        pub fn setusershell();
    }
    extern "C" {
        pub fn daemon(
            __nochdir: ::std::os::raw::c_int,
            __noclose: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn gethostid() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn sync();
    }
    extern "C" {
        pub fn getpagesize() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getdtablesize() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn truncate(
            __file: *const ::std::os::raw::c_char,
            __length: __off_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lockf(
            __fd: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            __len: __off_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn crypt(
            __key: *const ::std::os::raw::c_char,
            __salt: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn getentropy(
            __buffer: *mut ::std::os::raw::c_void,
            __length: size_t,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_shmid_ds {
        pub shm_perm: ipc_perm,
        pub shm_segsz: ::std::os::raw::c_int,
        pub shm_atime: __lkl__kernel_old_time_t,
        pub shm_dtime: __lkl__kernel_old_time_t,
        pub shm_ctime: __lkl__kernel_old_time_t,
        pub shm_cpid: __lkl__kernel_ipc_pid_t,
        pub shm_lpid: __lkl__kernel_ipc_pid_t,
        pub shm_nattch: ::std::os::raw::c_ushort,
        pub shm_unused: ::std::os::raw::c_ushort,
        pub shm_unused2: *mut ::std::os::raw::c_void,
        pub shm_unused3: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout_lkl_shmid_ds() {
        assert_eq!(
            ::std::mem::size_of::<lkl_shmid_ds>(),
            88usize,
            concat!("Size of: ", stringify!(lkl_shmid_ds))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_shmid_ds>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_shmid_ds))
        );
        fn test_field_shm_perm() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_perm) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_perm)
                )
            );
        }
        test_field_shm_perm();
        fn test_field_shm_segsz() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_segsz) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_segsz)
                )
            );
        }
        test_field_shm_segsz();
        fn test_field_shm_atime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_atime) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_atime)
                )
            );
        }
        test_field_shm_atime();
        fn test_field_shm_dtime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_dtime) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_dtime)
                )
            );
        }
        test_field_shm_dtime();
        fn test_field_shm_ctime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_ctime) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_ctime)
                )
            );
        }
        test_field_shm_ctime();
        fn test_field_shm_cpid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_cpid) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_cpid)
                )
            );
        }
        test_field_shm_cpid();
        fn test_field_shm_lpid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_lpid) as usize - ptr as usize
                },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_lpid)
                )
            );
        }
        test_field_shm_lpid();
        fn test_field_shm_nattch() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_nattch) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_nattch)
                )
            );
        }
        test_field_shm_nattch();
        fn test_field_shm_unused() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_unused) as usize - ptr as usize
                },
                66usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_unused)
                )
            );
        }
        test_field_shm_unused();
        fn test_field_shm_unused2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_unused2) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_unused2)
                )
            );
        }
        test_field_shm_unused2();
        fn test_field_shm_unused3() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_unused3) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid_ds),
                    "::",
                    stringify!(shm_unused3)
                )
            );
        }
        test_field_shm_unused3();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_shmid64_ds {
        pub shm_perm: lkl_ipc64_perm,
        pub shm_segsz: lkl_size_t,
        pub shm_atime: ::std::os::raw::c_long,
        pub shm_dtime: ::std::os::raw::c_long,
        pub shm_ctime: ::std::os::raw::c_long,
        pub shm_cpid: __lkl__kernel_pid_t,
        pub shm_lpid: __lkl__kernel_pid_t,
        pub shm_nattch: ::std::os::raw::c_ulong,
        pub __unused4: ::std::os::raw::c_ulong,
        pub __unused5: ::std::os::raw::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_lkl_shmid64_ds() {
        assert_eq!(
            ::std::mem::size_of::<lkl_shmid64_ds>(),
            112usize,
            concat!("Size of: ", stringify!(lkl_shmid64_ds))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_shmid64_ds>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_shmid64_ds))
        );
        fn test_field_shm_perm() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_perm) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid64_ds),
                    "::",
                    stringify!(shm_perm)
                )
            );
        }
        test_field_shm_perm();
        fn test_field_shm_segsz() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_segsz) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid64_ds),
                    "::",
                    stringify!(shm_segsz)
                )
            );
        }
        test_field_shm_segsz();
        fn test_field_shm_atime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_atime) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid64_ds),
                    "::",
                    stringify!(shm_atime)
                )
            );
        }
        test_field_shm_atime();
        fn test_field_shm_dtime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_dtime) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid64_ds),
                    "::",
                    stringify!(shm_dtime)
                )
            );
        }
        test_field_shm_dtime();
        fn test_field_shm_ctime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_ctime) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid64_ds),
                    "::",
                    stringify!(shm_ctime)
                )
            );
        }
        test_field_shm_ctime();
        fn test_field_shm_cpid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_cpid) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid64_ds),
                    "::",
                    stringify!(shm_cpid)
                )
            );
        }
        test_field_shm_cpid();
        fn test_field_shm_lpid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_lpid) as usize - ptr as usize
                },
                84usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid64_ds),
                    "::",
                    stringify!(shm_lpid)
                )
            );
        }
        test_field_shm_lpid();
        fn test_field_shm_nattch() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_nattch) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid64_ds),
                    "::",
                    stringify!(shm_nattch)
                )
            );
        }
        test_field_shm_nattch();
        fn test_field___unused4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused4) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid64_ds),
                    "::",
                    stringify!(__unused4)
                )
            );
        }
        test_field___unused4();
        fn test_field___unused5() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shmid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused5) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shmid64_ds),
                    "::",
                    stringify!(__unused5)
                )
            );
        }
        test_field___unused5();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_shminfo64 {
        pub shmmax: ::std::os::raw::c_ulong,
        pub shmmin: ::std::os::raw::c_ulong,
        pub shmmni: ::std::os::raw::c_ulong,
        pub shmseg: ::std::os::raw::c_ulong,
        pub shmall: ::std::os::raw::c_ulong,
        pub __unused1: ::std::os::raw::c_ulong,
        pub __unused2: ::std::os::raw::c_ulong,
        pub __unused3: ::std::os::raw::c_ulong,
        pub __unused4: ::std::os::raw::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_lkl_shminfo64() {
        assert_eq!(
            ::std::mem::size_of::<lkl_shminfo64>(),
            72usize,
            concat!("Size of: ", stringify!(lkl_shminfo64))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_shminfo64>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_shminfo64))
        );
        fn test_field_shmmax() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shmmax) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo64),
                    "::",
                    stringify!(shmmax)
                )
            );
        }
        test_field_shmmax();
        fn test_field_shmmin() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shmmin) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo64),
                    "::",
                    stringify!(shmmin)
                )
            );
        }
        test_field_shmmin();
        fn test_field_shmmni() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shmmni) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo64),
                    "::",
                    stringify!(shmmni)
                )
            );
        }
        test_field_shmmni();
        fn test_field_shmseg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shmseg) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo64),
                    "::",
                    stringify!(shmseg)
                )
            );
        }
        test_field_shmseg();
        fn test_field_shmall() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shmall) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo64),
                    "::",
                    stringify!(shmall)
                )
            );
        }
        test_field_shmall();
        fn test_field___unused1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused1) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo64),
                    "::",
                    stringify!(__unused1)
                )
            );
        }
        test_field___unused1();
        fn test_field___unused2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused2) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo64),
                    "::",
                    stringify!(__unused2)
                )
            );
        }
        test_field___unused2();
        fn test_field___unused3() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused3) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo64),
                    "::",
                    stringify!(__unused3)
                )
            );
        }
        test_field___unused3();
        fn test_field___unused4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused4) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo64),
                    "::",
                    stringify!(__unused4)
                )
            );
        }
        test_field___unused4();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_shminfo {
        pub shmmax: ::std::os::raw::c_int,
        pub shmmin: ::std::os::raw::c_int,
        pub shmmni: ::std::os::raw::c_int,
        pub shmseg: ::std::os::raw::c_int,
        pub shmall: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_lkl_shminfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_shminfo>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_shminfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_shminfo>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_shminfo))
        );
        fn test_field_shmmax() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shmmax) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo),
                    "::",
                    stringify!(shmmax)
                )
            );
        }
        test_field_shmmax();
        fn test_field_shmmin() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shmmin) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo),
                    "::",
                    stringify!(shmmin)
                )
            );
        }
        test_field_shmmin();
        fn test_field_shmmni() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shmmni) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo),
                    "::",
                    stringify!(shmmni)
                )
            );
        }
        test_field_shmmni();
        fn test_field_shmseg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shmseg) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo),
                    "::",
                    stringify!(shmseg)
                )
            );
        }
        test_field_shmseg();
        fn test_field_shmall() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shmall) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shminfo),
                    "::",
                    stringify!(shmall)
                )
            );
        }
        test_field_shmall();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_shm_info {
        pub used_ids: ::std::os::raw::c_int,
        pub shm_tot: __lkl__kernel_ulong_t,
        pub shm_rss: __lkl__kernel_ulong_t,
        pub shm_swp: __lkl__kernel_ulong_t,
        pub swap_attempts: __lkl__kernel_ulong_t,
        pub swap_successes: __lkl__kernel_ulong_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_shm_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_shm_info>(),
            48usize,
            concat!("Size of: ", stringify!(lkl_shm_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_shm_info>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_shm_info))
        );
        fn test_field_used_ids() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shm_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).used_ids) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shm_info),
                    "::",
                    stringify!(used_ids)
                )
            );
        }
        test_field_used_ids();
        fn test_field_shm_tot() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shm_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_tot) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shm_info),
                    "::",
                    stringify!(shm_tot)
                )
            );
        }
        test_field_shm_tot();
        fn test_field_shm_rss() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shm_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_rss) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shm_info),
                    "::",
                    stringify!(shm_rss)
                )
            );
        }
        test_field_shm_rss();
        fn test_field_shm_swp() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shm_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).shm_swp) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shm_info),
                    "::",
                    stringify!(shm_swp)
                )
            );
        }
        test_field_shm_swp();
        fn test_field_swap_attempts() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shm_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).swap_attempts) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shm_info),
                    "::",
                    stringify!(swap_attempts)
                )
            );
        }
        test_field_swap_attempts();
        fn test_field_swap_successes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_shm_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).swap_successes) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_shm_info),
                    "::",
                    stringify!(swap_successes)
                )
            );
        }
        test_field_swap_successes();
    }
    pub type lkl_aio_context_t = __lkl__kernel_ulong_t;
    pub const LKL_IOCB_CMD_PREAD: _bindgen_ty_38 = 0;
    pub const LKL_IOCB_CMD_PWRITE: _bindgen_ty_38 = 1;
    pub const LKL_IOCB_CMD_FSYNC: _bindgen_ty_38 = 2;
    pub const LKL_IOCB_CMD_FDSYNC: _bindgen_ty_38 = 3;
    pub const LKL_IOCB_CMD_POLL: _bindgen_ty_38 = 5;
    pub const LKL_IOCB_CMD_NOOP: _bindgen_ty_38 = 6;
    pub const LKL_IOCB_CMD_PREADV: _bindgen_ty_38 = 7;
    pub const LKL_IOCB_CMD_PWRITEV: _bindgen_ty_38 = 8;
    pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_io_event {
        pub data: __lkl__u64,
        pub obj: __lkl__u64,
        pub res: __lkl__s64,
        pub res2: __lkl__s64,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_event() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_event>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_io_event))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_event>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_io_event))
        );
        fn test_field_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_event>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_event),
                    "::",
                    stringify!(data)
                )
            );
        }
        test_field_data();
        fn test_field_obj() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_event>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_event),
                    "::",
                    stringify!(obj)
                )
            );
        }
        test_field_obj();
        fn test_field_res() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_event>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_event),
                    "::",
                    stringify!(res)
                )
            );
        }
        test_field_res();
        fn test_field_res2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_event>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).res2) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_event),
                    "::",
                    stringify!(res2)
                )
            );
        }
        test_field_res2();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_iocb {
        pub aio_data: __lkl__u64,
        pub aio_key: __lkl__u32,
        pub aio_rw_flags: __lkl__kernel_rwf_t,
        pub aio_lio_opcode: __lkl__u16,
        pub aio_reqprio: __lkl__s16,
        pub aio_fildes: __lkl__u32,
        pub aio_buf: __lkl__u64,
        pub aio_nbytes: __lkl__u64,
        pub aio_offset: __lkl__s64,
        pub aio_reserved2: __lkl__u64,
        pub aio_flags: __lkl__u32,
        pub aio_resfd: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_iocb() {
        assert_eq!(
            ::std::mem::size_of::<lkl_iocb>(),
            64usize,
            concat!("Size of: ", stringify!(lkl_iocb))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_iocb>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_iocb))
        );
        fn test_field_aio_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_data)
                )
            );
        }
        test_field_aio_data();
        fn test_field_aio_key() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_key) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_key)
                )
            );
        }
        test_field_aio_key();
        fn test_field_aio_rw_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_rw_flags) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_rw_flags)
                )
            );
        }
        test_field_aio_rw_flags();
        fn test_field_aio_lio_opcode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_lio_opcode) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_lio_opcode)
                )
            );
        }
        test_field_aio_lio_opcode();
        fn test_field_aio_reqprio() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_reqprio) as usize - ptr as usize
                },
                18usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_reqprio)
                )
            );
        }
        test_field_aio_reqprio();
        fn test_field_aio_fildes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_fildes) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_fildes)
                )
            );
        }
        test_field_aio_fildes();
        fn test_field_aio_buf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_buf) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_buf)
                )
            );
        }
        test_field_aio_buf();
        fn test_field_aio_nbytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_nbytes) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_nbytes)
                )
            );
        }
        test_field_aio_nbytes();
        fn test_field_aio_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_offset) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_offset)
                )
            );
        }
        test_field_aio_offset();
        fn test_field_aio_reserved2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_reserved2) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_reserved2)
                )
            );
        }
        test_field_aio_reserved2();
        fn test_field_aio_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_flags) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_flags)
                )
            );
        }
        test_field_aio_flags();
        fn test_field_aio_resfd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iocb>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aio_resfd) as usize - ptr as usize
                },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iocb),
                    "::",
                    stringify!(aio_resfd)
                )
            );
        }
        test_field_aio_resfd();
    }
    pub type __lkl__kernel_sa_family_t = ::std::os::raw::c_ushort;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __lkl__kernel_sockaddr_storage {
        pub __bindgen_anon_1: __lkl__kernel_sockaddr_storage__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __lkl__kernel_sockaddr_storage__bindgen_ty_1 {
        pub __bindgen_anon_1: __lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
        pub __align: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
        pub ss_family: __lkl__kernel_sa_family_t,
        pub __data: [::std::os::raw::c_char; 126usize],
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>(),
            128usize,
            concat!(
                "Size of: ",
                stringify!(__lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>(),
            2usize,
            concat!(
                "Alignment of ",
                stringify!(__lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field_ss_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        __lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(ss_family)
                )
            );
        }
        test_field_ss_family();
        fn test_field___data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        __lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(__data)
                )
            );
        }
        test_field___data();
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_sockaddr_storage__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_sockaddr_storage__bindgen_ty_1>(),
            128usize,
            concat!(
                "Size of: ",
                stringify!(__lkl__kernel_sockaddr_storage__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_sockaddr_storage__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(__lkl__kernel_sockaddr_storage__bindgen_ty_1)
            )
        );
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<__lkl__kernel_sockaddr_storage__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__kernel_sockaddr_storage__bindgen_ty_1),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[test]
    fn bindgen_test_layout___lkl__kernel_sockaddr_storage() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__kernel_sockaddr_storage>(),
            128usize,
            concat!("Size of: ", stringify!(__lkl__kernel_sockaddr_storage))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__kernel_sockaddr_storage>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__kernel_sockaddr_storage))
        );
    }
    pub const lkl_perf_type_id_LKL_PERF_TYPE_HARDWARE: lkl_perf_type_id = 0;
    pub const lkl_perf_type_id_LKL_PERF_TYPE_SOFTWARE: lkl_perf_type_id = 1;
    pub const lkl_perf_type_id_LKL_PERF_TYPE_TRACEPOINT: lkl_perf_type_id = 2;
    pub const lkl_perf_type_id_LKL_PERF_TYPE_HW_CACHE: lkl_perf_type_id = 3;
    pub const lkl_perf_type_id_LKL_PERF_TYPE_RAW: lkl_perf_type_id = 4;
    pub const lkl_perf_type_id_LKL_PERF_TYPE_BREAKPOINT: lkl_perf_type_id = 5;
    pub const lkl_perf_type_id_LKL_PERF_TYPE_MAX: lkl_perf_type_id = 6;
    pub type lkl_perf_type_id = ::std::os::raw::c_uint;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_CPU_CYCLES: lkl_perf_hw_id = 0;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_INSTRUCTIONS: lkl_perf_hw_id = 1;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_CACHE_REFERENCES: lkl_perf_hw_id = 2;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_CACHE_MISSES: lkl_perf_hw_id = 3;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_BRANCH_INSTRUCTIONS: lkl_perf_hw_id = 4;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_BRANCH_MISSES: lkl_perf_hw_id = 5;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_BUS_CYCLES: lkl_perf_hw_id = 6;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_STALLED_CYCLES_FRONTEND: lkl_perf_hw_id = 7;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_STALLED_CYCLES_BACKEND: lkl_perf_hw_id = 8;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_REF_CPU_CYCLES: lkl_perf_hw_id = 9;
    pub const lkl_perf_hw_id_LKL_PERF_COUNT_HW_MAX: lkl_perf_hw_id = 10;
    pub type lkl_perf_hw_id = ::std::os::raw::c_uint;
    pub const lkl_perf_hw_cache_id_LKL_PERF_COUNT_HW_CACHE_L1D: lkl_perf_hw_cache_id = 0;
    pub const lkl_perf_hw_cache_id_LKL_PERF_COUNT_HW_CACHE_L1I: lkl_perf_hw_cache_id = 1;
    pub const lkl_perf_hw_cache_id_LKL_PERF_COUNT_HW_CACHE_LL: lkl_perf_hw_cache_id = 2;
    pub const lkl_perf_hw_cache_id_LKL_PERF_COUNT_HW_CACHE_DTLB: lkl_perf_hw_cache_id = 3;
    pub const lkl_perf_hw_cache_id_LKL_PERF_COUNT_HW_CACHE_ITLB: lkl_perf_hw_cache_id = 4;
    pub const lkl_perf_hw_cache_id_LKL_PERF_COUNT_HW_CACHE_BPU: lkl_perf_hw_cache_id = 5;
    pub const lkl_perf_hw_cache_id_LKL_PERF_COUNT_HW_CACHE_NODE: lkl_perf_hw_cache_id = 6;
    pub const lkl_perf_hw_cache_id_LKL_PERF_COUNT_HW_CACHE_MAX: lkl_perf_hw_cache_id = 7;
    pub type lkl_perf_hw_cache_id = ::std::os::raw::c_uint;
    pub const lkl_perf_hw_cache_op_id_LKL_PERF_COUNT_HW_CACHE_OP_READ: lkl_perf_hw_cache_op_id = 0;
    pub const lkl_perf_hw_cache_op_id_LKL_PERF_COUNT_HW_CACHE_OP_WRITE: lkl_perf_hw_cache_op_id = 1;
    pub const lkl_perf_hw_cache_op_id_LKL_PERF_COUNT_HW_CACHE_OP_PREFETCH: lkl_perf_hw_cache_op_id = 2;
    pub const lkl_perf_hw_cache_op_id_LKL_PERF_COUNT_HW_CACHE_OP_MAX: lkl_perf_hw_cache_op_id = 3;
    pub type lkl_perf_hw_cache_op_id = ::std::os::raw::c_uint;
    pub const lkl_perf_hw_cache_op_result_id_LKL_PERF_COUNT_HW_CACHE_RESULT_ACCESS:
        lkl_perf_hw_cache_op_result_id = 0;
    pub const lkl_perf_hw_cache_op_result_id_LKL_PERF_COUNT_HW_CACHE_RESULT_MISS:
        lkl_perf_hw_cache_op_result_id = 1;
    pub const lkl_perf_hw_cache_op_result_id_LKL_PERF_COUNT_HW_CACHE_RESULT_MAX:
        lkl_perf_hw_cache_op_result_id = 2;
    pub type lkl_perf_hw_cache_op_result_id = ::std::os::raw::c_uint;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_CPU_CLOCK: lkl_perf_sw_ids = 0;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_TASK_CLOCK: lkl_perf_sw_ids = 1;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_PAGE_FAULTS: lkl_perf_sw_ids = 2;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_CONTEXT_SWITCHES: lkl_perf_sw_ids = 3;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_CPU_MIGRATIONS: lkl_perf_sw_ids = 4;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_PAGE_FAULTS_MIN: lkl_perf_sw_ids = 5;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_PAGE_FAULTS_MAJ: lkl_perf_sw_ids = 6;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_ALIGNMENT_FAULTS: lkl_perf_sw_ids = 7;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_EMULATION_FAULTS: lkl_perf_sw_ids = 8;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_DUMMY: lkl_perf_sw_ids = 9;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_BPF_OUTPUT: lkl_perf_sw_ids = 10;
    pub const lkl_perf_sw_ids_LKL_PERF_COUNT_SW_MAX: lkl_perf_sw_ids = 11;
    pub type lkl_perf_sw_ids = ::std::os::raw::c_uint;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_IP: lkl_perf_event_sample_format = 1;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_TID: lkl_perf_event_sample_format = 2;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_TIME: lkl_perf_event_sample_format = 4;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_ADDR: lkl_perf_event_sample_format = 8;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_READ: lkl_perf_event_sample_format = 16;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_CALLCHAIN: lkl_perf_event_sample_format = 32;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_ID: lkl_perf_event_sample_format = 64;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_CPU: lkl_perf_event_sample_format = 128;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_PERIOD: lkl_perf_event_sample_format = 256;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_STREAM_ID: lkl_perf_event_sample_format =
        512;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_RAW: lkl_perf_event_sample_format = 1024;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_BRANCH_STACK: lkl_perf_event_sample_format =
        2048;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_REGS_USER: lkl_perf_event_sample_format =
        4096;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_STACK_USER: lkl_perf_event_sample_format =
        8192;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_WEIGHT: lkl_perf_event_sample_format = 16384;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_DATA_SRC: lkl_perf_event_sample_format =
        32768;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_IDENTIFIER: lkl_perf_event_sample_format =
        65536;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_TRANSACTION: lkl_perf_event_sample_format =
        131072;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_REGS_INTR: lkl_perf_event_sample_format =
        262144;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_PHYS_ADDR: lkl_perf_event_sample_format =
        524288;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_AUX: lkl_perf_event_sample_format = 1048576;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_CGROUP: lkl_perf_event_sample_format =
        2097152;
    pub const lkl_perf_event_sample_format_LKL_PERF_SAMPLE_MAX: lkl_perf_event_sample_format = 4194304;
    pub const lkl_perf_event_sample_format___LKL__PERF_SAMPLE_CALLCHAIN_EARLY:
        lkl_perf_event_sample_format = 9223372036854775808;
    pub type lkl_perf_event_sample_format = ::std::os::raw::c_ulong;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_USER_SHIFT:
        lkl_perf_branch_sample_type_shift = 0;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_KERNEL_SHIFT:
        lkl_perf_branch_sample_type_shift = 1;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_HV_SHIFT:
        lkl_perf_branch_sample_type_shift = 2;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_ANY_SHIFT:
        lkl_perf_branch_sample_type_shift = 3;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT:
        lkl_perf_branch_sample_type_shift = 4;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT:
        lkl_perf_branch_sample_type_shift = 5;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_IND_CALL_SHIFT:
        lkl_perf_branch_sample_type_shift = 6;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT:
        lkl_perf_branch_sample_type_shift = 7;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_IN_TX_SHIFT:
        lkl_perf_branch_sample_type_shift = 8;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_NO_TX_SHIFT:
        lkl_perf_branch_sample_type_shift = 9;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_COND_SHIFT:
        lkl_perf_branch_sample_type_shift = 10;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT:
        lkl_perf_branch_sample_type_shift = 11;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT:
        lkl_perf_branch_sample_type_shift = 12;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_CALL_SHIFT:
        lkl_perf_branch_sample_type_shift = 13;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT:
        lkl_perf_branch_sample_type_shift = 14;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT:
        lkl_perf_branch_sample_type_shift = 15;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT:
        lkl_perf_branch_sample_type_shift = 16;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_HW_INDEX_SHIFT:
        lkl_perf_branch_sample_type_shift = 17;
    pub const lkl_perf_branch_sample_type_shift_LKL_PERF_SAMPLE_BRANCH_MAX_SHIFT:
        lkl_perf_branch_sample_type_shift = 18;
    pub type lkl_perf_branch_sample_type_shift = ::std::os::raw::c_uint;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_USER: lkl_perf_branch_sample_type = 1;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_KERNEL: lkl_perf_branch_sample_type =
        2;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_HV: lkl_perf_branch_sample_type = 4;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_ANY: lkl_perf_branch_sample_type = 8;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_ANY_CALL: lkl_perf_branch_sample_type =
        16;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_ANY_RETURN:
        lkl_perf_branch_sample_type = 32;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_IND_CALL: lkl_perf_branch_sample_type =
        64;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_ABORT_TX: lkl_perf_branch_sample_type =
        128;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_IN_TX: lkl_perf_branch_sample_type =
        256;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_NO_TX: lkl_perf_branch_sample_type =
        512;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_COND: lkl_perf_branch_sample_type =
        1024;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_CALL_STACK:
        lkl_perf_branch_sample_type = 2048;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_IND_JUMP: lkl_perf_branch_sample_type =
        4096;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_CALL: lkl_perf_branch_sample_type =
        8192;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_NO_FLAGS: lkl_perf_branch_sample_type =
        16384;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_NO_CYCLES:
        lkl_perf_branch_sample_type = 32768;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_TYPE_SAVE:
        lkl_perf_branch_sample_type = 65536;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_HW_INDEX: lkl_perf_branch_sample_type =
        131072;
    pub const lkl_perf_branch_sample_type_LKL_PERF_SAMPLE_BRANCH_MAX: lkl_perf_branch_sample_type =
        262144;
    pub type lkl_perf_branch_sample_type = ::std::os::raw::c_uint;
    pub const LKL_PERF_BR_UNKNOWN: _bindgen_ty_39 = 0;
    pub const LKL_PERF_BR_COND: _bindgen_ty_39 = 1;
    pub const LKL_PERF_BR_UNCOND: _bindgen_ty_39 = 2;
    pub const LKL_PERF_BR_IND: _bindgen_ty_39 = 3;
    pub const LKL_PERF_BR_CALL: _bindgen_ty_39 = 4;
    pub const LKL_PERF_BR_IND_CALL: _bindgen_ty_39 = 5;
    pub const LKL_PERF_BR_RET: _bindgen_ty_39 = 6;
    pub const LKL_PERF_BR_SYSCALL: _bindgen_ty_39 = 7;
    pub const LKL_PERF_BR_SYSRET: _bindgen_ty_39 = 8;
    pub const LKL_PERF_BR_COND_CALL: _bindgen_ty_39 = 9;
    pub const LKL_PERF_BR_COND_RET: _bindgen_ty_39 = 10;
    pub const LKL_PERF_BR_MAX: _bindgen_ty_39 = 11;
    pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
    pub const lkl_perf_sample_regs_abi_LKL_PERF_SAMPLE_REGS_ABI_NONE: lkl_perf_sample_regs_abi = 0;
    pub const lkl_perf_sample_regs_abi_LKL_PERF_SAMPLE_REGS_ABI_32: lkl_perf_sample_regs_abi = 1;
    pub const lkl_perf_sample_regs_abi_LKL_PERF_SAMPLE_REGS_ABI_64: lkl_perf_sample_regs_abi = 2;
    pub type lkl_perf_sample_regs_abi = ::std::os::raw::c_uint;
    pub const LKL_PERF_TXN_ELISION: _bindgen_ty_40 = 1;
    pub const LKL_PERF_TXN_TRANSACTION: _bindgen_ty_40 = 2;
    pub const LKL_PERF_TXN_SYNC: _bindgen_ty_40 = 4;
    pub const LKL_PERF_TXN_ASYNC: _bindgen_ty_40 = 8;
    pub const LKL_PERF_TXN_RETRY: _bindgen_ty_40 = 16;
    pub const LKL_PERF_TXN_CONFLICT: _bindgen_ty_40 = 32;
    pub const LKL_PERF_TXN_CAPACITY_WRITE: _bindgen_ty_40 = 64;
    pub const LKL_PERF_TXN_CAPACITY_READ: _bindgen_ty_40 = 128;
    pub const LKL_PERF_TXN_MAX: _bindgen_ty_40 = 256;
    pub const LKL_PERF_TXN_ABORT_MASK: _bindgen_ty_40 = 18446744069414584320;
    pub const LKL_PERF_TXN_ABORT_SHIFT: _bindgen_ty_40 = 32;
    pub type _bindgen_ty_40 = ::std::os::raw::c_ulong;
    pub const lkl_perf_event_read_format_LKL_PERF_FORMAT_TOTAL_TIME_ENABLED:
        lkl_perf_event_read_format = 1;
    pub const lkl_perf_event_read_format_LKL_PERF_FORMAT_TOTAL_TIME_RUNNING:
        lkl_perf_event_read_format = 2;
    pub const lkl_perf_event_read_format_LKL_PERF_FORMAT_ID: lkl_perf_event_read_format = 4;
    pub const lkl_perf_event_read_format_LKL_PERF_FORMAT_GROUP: lkl_perf_event_read_format = 8;
    pub const lkl_perf_event_read_format_LKL_PERF_FORMAT_MAX: lkl_perf_event_read_format = 16;
    pub type lkl_perf_event_read_format = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_perf_event_attr {
        pub type_: __lkl__u32,
        pub size: __lkl__u32,
        pub config: __lkl__u64,
        pub __bindgen_anon_1: lkl_perf_event_attr__bindgen_ty_1,
        pub sample_type: __lkl__u64,
        pub read_format: __lkl__u64,
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
        pub __bindgen_anon_2: lkl_perf_event_attr__bindgen_ty_2,
        pub bp_type: __lkl__u32,
        pub __bindgen_anon_3: lkl_perf_event_attr__bindgen_ty_3,
        pub __bindgen_anon_4: lkl_perf_event_attr__bindgen_ty_4,
        pub branch_sample_type: __lkl__u64,
        pub sample_regs_user: __lkl__u64,
        pub sample_stack_user: __lkl__u32,
        pub clockid: __lkl__s32,
        pub sample_regs_intr: __lkl__u64,
        pub aux_watermark: __lkl__u32,
        pub sample_max_stack: __lkl__u16,
        pub __reserved_2: __lkl__u16,
        pub aux_sample_size: __lkl__u32,
        pub __reserved_3: __lkl__u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_perf_event_attr__bindgen_ty_1 {
        pub sample_period: __lkl__u64,
        pub sample_freq: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_event_attr__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_event_attr__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_perf_event_attr__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_event_attr__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_perf_event_attr__bindgen_ty_1)
            )
        );
        fn test_field_sample_period() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sample_period) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_1),
                    "::",
                    stringify!(sample_period)
                )
            );
        }
        test_field_sample_period();
        fn test_field_sample_freq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sample_freq) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_1),
                    "::",
                    stringify!(sample_freq)
                )
            );
        }
        test_field_sample_freq();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_perf_event_attr__bindgen_ty_2 {
        pub wakeup_events: __lkl__u32,
        pub wakeup_watermark: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_event_attr__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_event_attr__bindgen_ty_2>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_perf_event_attr__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_event_attr__bindgen_ty_2>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_perf_event_attr__bindgen_ty_2)
            )
        );
        fn test_field_wakeup_events() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).wakeup_events) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_2),
                    "::",
                    stringify!(wakeup_events)
                )
            );
        }
        test_field_wakeup_events();
        fn test_field_wakeup_watermark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).wakeup_watermark) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_2),
                    "::",
                    stringify!(wakeup_watermark)
                )
            );
        }
        test_field_wakeup_watermark();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_perf_event_attr__bindgen_ty_3 {
        pub bp_addr: __lkl__u64,
        pub kprobe_func: __lkl__u64,
        pub uprobe_path: __lkl__u64,
        pub config1: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_event_attr__bindgen_ty_3() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_event_attr__bindgen_ty_3>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_perf_event_attr__bindgen_ty_3))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_event_attr__bindgen_ty_3>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_perf_event_attr__bindgen_ty_3)
            )
        );
        fn test_field_bp_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bp_addr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_3),
                    "::",
                    stringify!(bp_addr)
                )
            );
        }
        test_field_bp_addr();
        fn test_field_kprobe_func() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).kprobe_func) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_3),
                    "::",
                    stringify!(kprobe_func)
                )
            );
        }
        test_field_kprobe_func();
        fn test_field_uprobe_path() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).uprobe_path) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_3),
                    "::",
                    stringify!(uprobe_path)
                )
            );
        }
        test_field_uprobe_path();
        fn test_field_config1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).config1) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_3),
                    "::",
                    stringify!(config1)
                )
            );
        }
        test_field_config1();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_perf_event_attr__bindgen_ty_4 {
        pub bp_len: __lkl__u64,
        pub kprobe_addr: __lkl__u64,
        pub probe_offset: __lkl__u64,
        pub config2: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_event_attr__bindgen_ty_4() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_event_attr__bindgen_ty_4>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_perf_event_attr__bindgen_ty_4))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_event_attr__bindgen_ty_4>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_perf_event_attr__bindgen_ty_4)
            )
        );
        fn test_field_bp_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bp_len) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_4),
                    "::",
                    stringify!(bp_len)
                )
            );
        }
        test_field_bp_len();
        fn test_field_kprobe_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).kprobe_addr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_4),
                    "::",
                    stringify!(kprobe_addr)
                )
            );
        }
        test_field_kprobe_addr();
        fn test_field_probe_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).probe_offset) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_4),
                    "::",
                    stringify!(probe_offset)
                )
            );
        }
        test_field_probe_offset();
        fn test_field_config2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).config2) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr__bindgen_ty_4),
                    "::",
                    stringify!(config2)
                )
            );
        }
        test_field_config2();
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_event_attr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_event_attr>(),
            120usize,
            concat!("Size of: ", stringify!(lkl_perf_event_attr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_event_attr>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_perf_event_attr))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(size)
                )
            );
        }
        test_field_size();
        fn test_field_config() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(config)
                )
            );
        }
        test_field_config();
        fn test_field_sample_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sample_type) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(sample_type)
                )
            );
        }
        test_field_sample_type();
        fn test_field_read_format() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).read_format) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(read_format)
                )
            );
        }
        test_field_read_format();
        fn test_field_bp_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bp_type) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(bp_type)
                )
            );
        }
        test_field_bp_type();
        fn test_field_branch_sample_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).branch_sample_type) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(branch_sample_type)
                )
            );
        }
        test_field_branch_sample_type();
        fn test_field_sample_regs_user() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sample_regs_user) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(sample_regs_user)
                )
            );
        }
        test_field_sample_regs_user();
        fn test_field_sample_stack_user() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sample_stack_user) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(sample_stack_user)
                )
            );
        }
        test_field_sample_stack_user();
        fn test_field_clockid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).clockid) as usize - ptr as usize
                },
                92usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(clockid)
                )
            );
        }
        test_field_clockid();
        fn test_field_sample_regs_intr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sample_regs_intr) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(sample_regs_intr)
                )
            );
        }
        test_field_sample_regs_intr();
        fn test_field_aux_watermark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aux_watermark) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(aux_watermark)
                )
            );
        }
        test_field_aux_watermark();
        fn test_field_sample_max_stack() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sample_max_stack) as usize - ptr as usize
                },
                108usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(sample_max_stack)
                )
            );
        }
        test_field_sample_max_stack();
        fn test_field___reserved_2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved_2) as usize - ptr as usize
                },
                110usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(__reserved_2)
                )
            );
        }
        test_field___reserved_2();
        fn test_field_aux_sample_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aux_sample_size) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(aux_sample_size)
                )
            );
        }
        test_field_aux_sample_size();
        fn test_field___reserved_3() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved_3) as usize - ptr as usize
                },
                116usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_attr),
                    "::",
                    stringify!(__reserved_3)
                )
            );
        }
        test_field___reserved_3();
    }
    impl lkl_perf_event_attr {
        #[inline]
        pub fn disabled(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_disabled(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn inherit(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_inherit(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn pinned(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_pinned(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn exclusive(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_exclusive(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn exclude_user(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_exclude_user(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn exclude_kernel(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_exclude_kernel(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn exclude_hv(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_exclude_hv(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(6usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn exclude_idle(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_exclude_idle(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(7usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn mmap(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_mmap(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn comm(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_comm(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(9usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn freq(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_freq(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(10usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn inherit_stat(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_inherit_stat(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(11usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn enable_on_exec(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_enable_on_exec(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(12usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn task(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_task(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(13usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn watermark(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_watermark(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(14usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn precise_ip(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 2u8) as u64) }
        }
        #[inline]
        pub fn set_precise_ip(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(15usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn mmap_data(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_mmap_data(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(17usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn sample_id_all(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_sample_id_all(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(18usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn exclude_host(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_exclude_host(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(19usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn exclude_guest(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_exclude_guest(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(20usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn exclude_callchain_kernel(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_exclude_callchain_kernel(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(21usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn exclude_callchain_user(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_exclude_callchain_user(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(22usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn mmap2(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_mmap2(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(23usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn comm_exec(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_comm_exec(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(24usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn use_clockid(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_use_clockid(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(25usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn context_switch(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_context_switch(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(26usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn write_backward(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_write_backward(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(27usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn namespaces(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_namespaces(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(28usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn ksymbol(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_ksymbol(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(29usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn bpf_event(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_bpf_event(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(30usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn aux_output(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_aux_output(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(31usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn cgroup(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_cgroup(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(32usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn text_poke(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_text_poke(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(33usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn __reserved_1(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 30u8) as u64) }
        }
        #[inline]
        pub fn set___reserved_1(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(34usize, 30u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            disabled: __lkl__u64,
            inherit: __lkl__u64,
            pinned: __lkl__u64,
            exclusive: __lkl__u64,
            exclude_user: __lkl__u64,
            exclude_kernel: __lkl__u64,
            exclude_hv: __lkl__u64,
            exclude_idle: __lkl__u64,
            mmap: __lkl__u64,
            comm: __lkl__u64,
            freq: __lkl__u64,
            inherit_stat: __lkl__u64,
            enable_on_exec: __lkl__u64,
            task: __lkl__u64,
            watermark: __lkl__u64,
            precise_ip: __lkl__u64,
            mmap_data: __lkl__u64,
            sample_id_all: __lkl__u64,
            exclude_host: __lkl__u64,
            exclude_guest: __lkl__u64,
            exclude_callchain_kernel: __lkl__u64,
            exclude_callchain_user: __lkl__u64,
            mmap2: __lkl__u64,
            comm_exec: __lkl__u64,
            use_clockid: __lkl__u64,
            context_switch: __lkl__u64,
            write_backward: __lkl__u64,
            namespaces: __lkl__u64,
            ksymbol: __lkl__u64,
            bpf_event: __lkl__u64,
            aux_output: __lkl__u64,
            cgroup: __lkl__u64,
            text_poke: __lkl__u64,
            __reserved_1: __lkl__u64,
        ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let disabled: u64 = unsafe { ::std::mem::transmute(disabled) };
                disabled as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let inherit: u64 = unsafe { ::std::mem::transmute(inherit) };
                inherit as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let pinned: u64 = unsafe { ::std::mem::transmute(pinned) };
                pinned as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let exclusive: u64 = unsafe { ::std::mem::transmute(exclusive) };
                exclusive as u64
            });
            __bindgen_bitfield_unit.set(4usize, 1u8, {
                let exclude_user: u64 = unsafe { ::std::mem::transmute(exclude_user) };
                exclude_user as u64
            });
            __bindgen_bitfield_unit.set(5usize, 1u8, {
                let exclude_kernel: u64 = unsafe { ::std::mem::transmute(exclude_kernel) };
                exclude_kernel as u64
            });
            __bindgen_bitfield_unit.set(6usize, 1u8, {
                let exclude_hv: u64 = unsafe { ::std::mem::transmute(exclude_hv) };
                exclude_hv as u64
            });
            __bindgen_bitfield_unit.set(7usize, 1u8, {
                let exclude_idle: u64 = unsafe { ::std::mem::transmute(exclude_idle) };
                exclude_idle as u64
            });
            __bindgen_bitfield_unit.set(8usize, 1u8, {
                let mmap: u64 = unsafe { ::std::mem::transmute(mmap) };
                mmap as u64
            });
            __bindgen_bitfield_unit.set(9usize, 1u8, {
                let comm: u64 = unsafe { ::std::mem::transmute(comm) };
                comm as u64
            });
            __bindgen_bitfield_unit.set(10usize, 1u8, {
                let freq: u64 = unsafe { ::std::mem::transmute(freq) };
                freq as u64
            });
            __bindgen_bitfield_unit.set(11usize, 1u8, {
                let inherit_stat: u64 = unsafe { ::std::mem::transmute(inherit_stat) };
                inherit_stat as u64
            });
            __bindgen_bitfield_unit.set(12usize, 1u8, {
                let enable_on_exec: u64 = unsafe { ::std::mem::transmute(enable_on_exec) };
                enable_on_exec as u64
            });
            __bindgen_bitfield_unit.set(13usize, 1u8, {
                let task: u64 = unsafe { ::std::mem::transmute(task) };
                task as u64
            });
            __bindgen_bitfield_unit.set(14usize, 1u8, {
                let watermark: u64 = unsafe { ::std::mem::transmute(watermark) };
                watermark as u64
            });
            __bindgen_bitfield_unit.set(15usize, 2u8, {
                let precise_ip: u64 = unsafe { ::std::mem::transmute(precise_ip) };
                precise_ip as u64
            });
            __bindgen_bitfield_unit.set(17usize, 1u8, {
                let mmap_data: u64 = unsafe { ::std::mem::transmute(mmap_data) };
                mmap_data as u64
            });
            __bindgen_bitfield_unit.set(18usize, 1u8, {
                let sample_id_all: u64 = unsafe { ::std::mem::transmute(sample_id_all) };
                sample_id_all as u64
            });
            __bindgen_bitfield_unit.set(19usize, 1u8, {
                let exclude_host: u64 = unsafe { ::std::mem::transmute(exclude_host) };
                exclude_host as u64
            });
            __bindgen_bitfield_unit.set(20usize, 1u8, {
                let exclude_guest: u64 = unsafe { ::std::mem::transmute(exclude_guest) };
                exclude_guest as u64
            });
            __bindgen_bitfield_unit.set(21usize, 1u8, {
                let exclude_callchain_kernel: u64 =
                    unsafe { ::std::mem::transmute(exclude_callchain_kernel) };
                exclude_callchain_kernel as u64
            });
            __bindgen_bitfield_unit.set(22usize, 1u8, {
                let exclude_callchain_user: u64 =
                    unsafe { ::std::mem::transmute(exclude_callchain_user) };
                exclude_callchain_user as u64
            });
            __bindgen_bitfield_unit.set(23usize, 1u8, {
                let mmap2: u64 = unsafe { ::std::mem::transmute(mmap2) };
                mmap2 as u64
            });
            __bindgen_bitfield_unit.set(24usize, 1u8, {
                let comm_exec: u64 = unsafe { ::std::mem::transmute(comm_exec) };
                comm_exec as u64
            });
            __bindgen_bitfield_unit.set(25usize, 1u8, {
                let use_clockid: u64 = unsafe { ::std::mem::transmute(use_clockid) };
                use_clockid as u64
            });
            __bindgen_bitfield_unit.set(26usize, 1u8, {
                let context_switch: u64 = unsafe { ::std::mem::transmute(context_switch) };
                context_switch as u64
            });
            __bindgen_bitfield_unit.set(27usize, 1u8, {
                let write_backward: u64 = unsafe { ::std::mem::transmute(write_backward) };
                write_backward as u64
            });
            __bindgen_bitfield_unit.set(28usize, 1u8, {
                let namespaces: u64 = unsafe { ::std::mem::transmute(namespaces) };
                namespaces as u64
            });
            __bindgen_bitfield_unit.set(29usize, 1u8, {
                let ksymbol: u64 = unsafe { ::std::mem::transmute(ksymbol) };
                ksymbol as u64
            });
            __bindgen_bitfield_unit.set(30usize, 1u8, {
                let bpf_event: u64 = unsafe { ::std::mem::transmute(bpf_event) };
                bpf_event as u64
            });
            __bindgen_bitfield_unit.set(31usize, 1u8, {
                let aux_output: u64 = unsafe { ::std::mem::transmute(aux_output) };
                aux_output as u64
            });
            __bindgen_bitfield_unit.set(32usize, 1u8, {
                let cgroup: u64 = unsafe { ::std::mem::transmute(cgroup) };
                cgroup as u64
            });
            __bindgen_bitfield_unit.set(33usize, 1u8, {
                let text_poke: u64 = unsafe { ::std::mem::transmute(text_poke) };
                text_poke as u64
            });
            __bindgen_bitfield_unit.set(34usize, 30u8, {
                let __reserved_1: u64 = unsafe { ::std::mem::transmute(__reserved_1) };
                __reserved_1 as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_perf_event_query_bpf {
        pub ids_len: __lkl__u32,
        pub prog_cnt: __lkl__u32,
        pub ids: __IncompleteArrayField<__lkl__u32>,
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_event_query_bpf() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_event_query_bpf>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_perf_event_query_bpf))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_event_query_bpf>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_perf_event_query_bpf))
        );
        fn test_field_ids_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_query_bpf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ids_len) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_query_bpf),
                    "::",
                    stringify!(ids_len)
                )
            );
        }
        test_field_ids_len();
        fn test_field_prog_cnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_query_bpf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prog_cnt) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_query_bpf),
                    "::",
                    stringify!(prog_cnt)
                )
            );
        }
        test_field_prog_cnt();
        fn test_field_ids() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_query_bpf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ids) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_query_bpf),
                    "::",
                    stringify!(ids)
                )
            );
        }
        test_field_ids();
    }
    pub const lkl_perf_event_ioc_flags_LKL_PERF_IOC_FLAG_GROUP: lkl_perf_event_ioc_flags = 1;
    pub type lkl_perf_event_ioc_flags = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_perf_event_mmap_page {
        pub version: __lkl__u32,
        pub compat_version: __lkl__u32,
        pub lock: __lkl__u32,
        pub index: __lkl__u32,
        pub offset: __lkl__s64,
        pub time_enabled: __lkl__u64,
        pub time_running: __lkl__u64,
        pub __bindgen_anon_1: lkl_perf_event_mmap_page__bindgen_ty_1,
        pub pmc_width: __lkl__u16,
        pub time_shift: __lkl__u16,
        pub time_mult: __lkl__u32,
        pub time_offset: __lkl__u64,
        pub time_zero: __lkl__u64,
        pub size: __lkl__u32,
        pub __reserved_1: __lkl__u32,
        pub time_cycles: __lkl__u64,
        pub time_mask: __lkl__u64,
        pub __reserved: [__lkl__u8; 928usize],
        pub data_head: __lkl__u64,
        pub data_tail: __lkl__u64,
        pub data_offset: __lkl__u64,
        pub data_size: __lkl__u64,
        pub aux_head: __lkl__u64,
        pub aux_tail: __lkl__u64,
        pub aux_offset: __lkl__u64,
        pub aux_size: __lkl__u64,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_perf_event_mmap_page__bindgen_ty_1 {
        pub capabilities: __lkl__u64,
        pub __bindgen_anon_1: lkl_perf_event_mmap_page__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(8))]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_perf_event_mmap_page__bindgen_ty_1__bindgen_ty_1 {
        pub _bitfield_align_1: [u64; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_event_mmap_page__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_event_mmap_page__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(lkl_perf_event_mmap_page__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_event_mmap_page__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_perf_event_mmap_page__bindgen_ty_1__bindgen_ty_1)
            )
        );
    }
    impl lkl_perf_event_mmap_page__bindgen_ty_1__bindgen_ty_1 {
        #[inline]
        pub fn cap_bit0(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_cap_bit0(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn cap_bit0_is_deprecated(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_cap_bit0_is_deprecated(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn cap_user_rdpmc(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_cap_user_rdpmc(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn cap_user_time(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_cap_user_time(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn cap_user_time_zero(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_cap_user_time_zero(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn cap_user_time_short(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_cap_user_time_short(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn cap_____res(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 58u8) as u64) }
        }
        #[inline]
        pub fn set_cap_____res(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(6usize, 58u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            cap_bit0: __lkl__u64,
            cap_bit0_is_deprecated: __lkl__u64,
            cap_user_rdpmc: __lkl__u64,
            cap_user_time: __lkl__u64,
            cap_user_time_zero: __lkl__u64,
            cap_user_time_short: __lkl__u64,
            cap_____res: __lkl__u64,
        ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let cap_bit0: u64 = unsafe { ::std::mem::transmute(cap_bit0) };
                cap_bit0 as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let cap_bit0_is_deprecated: u64 =
                    unsafe { ::std::mem::transmute(cap_bit0_is_deprecated) };
                cap_bit0_is_deprecated as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let cap_user_rdpmc: u64 = unsafe { ::std::mem::transmute(cap_user_rdpmc) };
                cap_user_rdpmc as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let cap_user_time: u64 = unsafe { ::std::mem::transmute(cap_user_time) };
                cap_user_time as u64
            });
            __bindgen_bitfield_unit.set(4usize, 1u8, {
                let cap_user_time_zero: u64 = unsafe { ::std::mem::transmute(cap_user_time_zero) };
                cap_user_time_zero as u64
            });
            __bindgen_bitfield_unit.set(5usize, 1u8, {
                let cap_user_time_short: u64 = unsafe { ::std::mem::transmute(cap_user_time_short) };
                cap_user_time_short as u64
            });
            __bindgen_bitfield_unit.set(6usize, 58u8, {
                let cap_____res: u64 = unsafe { ::std::mem::transmute(cap_____res) };
                cap_____res as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_event_mmap_page__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_event_mmap_page__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(lkl_perf_event_mmap_page__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_event_mmap_page__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_perf_event_mmap_page__bindgen_ty_1)
            )
        );
        fn test_field_capabilities() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page__bindgen_ty_1),
                    "::",
                    stringify!(capabilities)
                )
            );
        }
        test_field_capabilities();
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_event_mmap_page() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_event_mmap_page>(),
            1088usize,
            concat!("Size of: ", stringify!(lkl_perf_event_mmap_page))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_event_mmap_page>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_perf_event_mmap_page))
        );
        fn test_field_version() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(version)
                )
            );
        }
        test_field_version();
        fn test_field_compat_version() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).compat_version) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(compat_version)
                )
            );
        }
        test_field_compat_version();
        fn test_field_lock() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(lock)
                )
            );
        }
        test_field_lock();
        fn test_field_index() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(index)
                )
            );
        }
        test_field_index();
        fn test_field_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(offset)
                )
            );
        }
        test_field_offset();
        fn test_field_time_enabled() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time_enabled) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(time_enabled)
                )
            );
        }
        test_field_time_enabled();
        fn test_field_time_running() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time_running) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(time_running)
                )
            );
        }
        test_field_time_running();
        fn test_field_pmc_width() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pmc_width) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(pmc_width)
                )
            );
        }
        test_field_pmc_width();
        fn test_field_time_shift() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time_shift) as usize - ptr as usize
                },
                50usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(time_shift)
                )
            );
        }
        test_field_time_shift();
        fn test_field_time_mult() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time_mult) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(time_mult)
                )
            );
        }
        test_field_time_mult();
        fn test_field_time_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time_offset) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(time_offset)
                )
            );
        }
        test_field_time_offset();
        fn test_field_time_zero() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time_zero) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(time_zero)
                )
            );
        }
        test_field_time_zero();
        fn test_field_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(size)
                )
            );
        }
        test_field_size();
        fn test_field___reserved_1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved_1) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(__reserved_1)
                )
            );
        }
        test_field___reserved_1();
        fn test_field_time_cycles() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time_cycles) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(time_cycles)
                )
            );
        }
        test_field_time_cycles();
        fn test_field_time_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time_mask) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(time_mask)
                )
            );
        }
        test_field_time_mask();
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
        fn test_field_data_head() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_head) as usize - ptr as usize
                },
                1024usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(data_head)
                )
            );
        }
        test_field_data_head();
        fn test_field_data_tail() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_tail) as usize - ptr as usize
                },
                1032usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(data_tail)
                )
            );
        }
        test_field_data_tail();
        fn test_field_data_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_offset) as usize - ptr as usize
                },
                1040usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(data_offset)
                )
            );
        }
        test_field_data_offset();
        fn test_field_data_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize
                },
                1048usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(data_size)
                )
            );
        }
        test_field_data_size();
        fn test_field_aux_head() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aux_head) as usize - ptr as usize
                },
                1056usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(aux_head)
                )
            );
        }
        test_field_aux_head();
        fn test_field_aux_tail() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aux_tail) as usize - ptr as usize
                },
                1064usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(aux_tail)
                )
            );
        }
        test_field_aux_tail();
        fn test_field_aux_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aux_offset) as usize - ptr as usize
                },
                1072usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(aux_offset)
                )
            );
        }
        test_field_aux_offset();
        fn test_field_aux_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_mmap_page>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).aux_size) as usize - ptr as usize
                },
                1080usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_mmap_page),
                    "::",
                    stringify!(aux_size)
                )
            );
        }
        test_field_aux_size();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_perf_event_header {
        pub type_: __lkl__u32,
        pub misc: __lkl__u16,
        pub size: __lkl__u16,
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_event_header() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_event_header>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_perf_event_header))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_event_header>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_perf_event_header))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_header>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_header),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_misc() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_header>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).misc) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_header),
                    "::",
                    stringify!(misc)
                )
            );
        }
        test_field_misc();
        fn test_field_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_event_header>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_event_header),
                    "::",
                    stringify!(size)
                )
            );
        }
        test_field_size();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_perf_ns_link_info {
        pub dev: __lkl__u64,
        pub ino: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_ns_link_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_ns_link_info>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_perf_ns_link_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_ns_link_info>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_perf_ns_link_info))
        );
        fn test_field_dev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_ns_link_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_ns_link_info),
                    "::",
                    stringify!(dev)
                )
            );
        }
        test_field_dev();
        fn test_field_ino() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_ns_link_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ino) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_ns_link_info),
                    "::",
                    stringify!(ino)
                )
            );
        }
        test_field_ino();
    }
    pub const LKL_NET_NS_INDEX: _bindgen_ty_41 = 0;
    pub const LKL_UTS_NS_INDEX: _bindgen_ty_41 = 1;
    pub const LKL_IPC_NS_INDEX: _bindgen_ty_41 = 2;
    pub const LKL_PID_NS_INDEX: _bindgen_ty_41 = 3;
    pub const LKL_USER_NS_INDEX: _bindgen_ty_41 = 4;
    pub const LKL_MNT_NS_INDEX: _bindgen_ty_41 = 5;
    pub const LKL_CGROUP_NS_INDEX: _bindgen_ty_41 = 6;
    pub const LKL_NR_NAMESPACES: _bindgen_ty_41 = 7;
    pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_MMAP: lkl_perf_event_type = 1;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_LOST: lkl_perf_event_type = 2;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_COMM: lkl_perf_event_type = 3;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_EXIT: lkl_perf_event_type = 4;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_THROTTLE: lkl_perf_event_type = 5;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_UNTHROTTLE: lkl_perf_event_type = 6;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_FORK: lkl_perf_event_type = 7;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_READ: lkl_perf_event_type = 8;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_SAMPLE: lkl_perf_event_type = 9;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_MMAP2: lkl_perf_event_type = 10;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_AUX: lkl_perf_event_type = 11;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_ITRACE_START: lkl_perf_event_type = 12;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_LOST_SAMPLES: lkl_perf_event_type = 13;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_SWITCH: lkl_perf_event_type = 14;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_SWITCH_CPU_WIDE: lkl_perf_event_type = 15;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_NAMESPACES: lkl_perf_event_type = 16;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_KSYMBOL: lkl_perf_event_type = 17;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_BPF_EVENT: lkl_perf_event_type = 18;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_CGROUP: lkl_perf_event_type = 19;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_TEXT_POKE: lkl_perf_event_type = 20;
    pub const lkl_perf_event_type_LKL_PERF_RECORD_MAX: lkl_perf_event_type = 21;
    pub type lkl_perf_event_type = ::std::os::raw::c_uint;
    pub const lkl_perf_record_ksymbol_type_LKL_PERF_RECORD_KSYMBOL_TYPE_UNKNOWN:
        lkl_perf_record_ksymbol_type = 0;
    pub const lkl_perf_record_ksymbol_type_LKL_PERF_RECORD_KSYMBOL_TYPE_BPF:
        lkl_perf_record_ksymbol_type = 1;
    pub const lkl_perf_record_ksymbol_type_LKL_PERF_RECORD_KSYMBOL_TYPE_OOL:
        lkl_perf_record_ksymbol_type = 2;
    pub const lkl_perf_record_ksymbol_type_LKL_PERF_RECORD_KSYMBOL_TYPE_MAX:
        lkl_perf_record_ksymbol_type = 3;
    pub type lkl_perf_record_ksymbol_type = ::std::os::raw::c_uint;
    pub const lkl_perf_bpf_event_type_LKL_PERF_BPF_EVENT_UNKNOWN: lkl_perf_bpf_event_type = 0;
    pub const lkl_perf_bpf_event_type_LKL_PERF_BPF_EVENT_PROG_LOAD: lkl_perf_bpf_event_type = 1;
    pub const lkl_perf_bpf_event_type_LKL_PERF_BPF_EVENT_PROG_UNLOAD: lkl_perf_bpf_event_type = 2;
    pub const lkl_perf_bpf_event_type_LKL_PERF_BPF_EVENT_MAX: lkl_perf_bpf_event_type = 3;
    pub type lkl_perf_bpf_event_type = ::std::os::raw::c_uint;
    pub const lkl_perf_callchain_context_LKL_PERF_CONTEXT_HV: lkl_perf_callchain_context =
        18446744073709551584;
    pub const lkl_perf_callchain_context_LKL_PERF_CONTEXT_KERNEL: lkl_perf_callchain_context =
        18446744073709551488;
    pub const lkl_perf_callchain_context_LKL_PERF_CONTEXT_USER: lkl_perf_callchain_context =
        18446744073709551104;
    pub const lkl_perf_callchain_context_LKL_PERF_CONTEXT_GUEST: lkl_perf_callchain_context =
        18446744073709549568;
    pub const lkl_perf_callchain_context_LKL_PERF_CONTEXT_GUEST_KERNEL: lkl_perf_callchain_context =
        18446744073709549440;
    pub const lkl_perf_callchain_context_LKL_PERF_CONTEXT_GUEST_USER: lkl_perf_callchain_context =
        18446744073709549056;
    pub const lkl_perf_callchain_context_LKL_PERF_CONTEXT_MAX: lkl_perf_callchain_context =
        18446744073709547521;
    pub type lkl_perf_callchain_context = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_perf_mem_data_src {
        pub val: __lkl__u64,
        pub __bindgen_anon_1: lkl_perf_mem_data_src__bindgen_ty_1,
    }
    #[repr(C)]
    #[repr(align(8))]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_perf_mem_data_src__bindgen_ty_1 {
        pub _bitfield_align_1: [u32; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_mem_data_src__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_mem_data_src__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_perf_mem_data_src__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_mem_data_src__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_perf_mem_data_src__bindgen_ty_1)
            )
        );
    }
    impl lkl_perf_mem_data_src__bindgen_ty_1 {
        #[inline]
        pub fn mem_op(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u64) }
        }
        #[inline]
        pub fn set_mem_op(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 5u8, val as u64)
            }
        }
        #[inline]
        pub fn mem_lvl(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 14u8) as u64) }
        }
        #[inline]
        pub fn set_mem_lvl(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(5usize, 14u8, val as u64)
            }
        }
        #[inline]
        pub fn mem_snoop(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 5u8) as u64) }
        }
        #[inline]
        pub fn set_mem_snoop(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(19usize, 5u8, val as u64)
            }
        }
        #[inline]
        pub fn mem_lock(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 2u8) as u64) }
        }
        #[inline]
        pub fn set_mem_lock(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(24usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn mem_dtlb(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 7u8) as u64) }
        }
        #[inline]
        pub fn set_mem_dtlb(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(26usize, 7u8, val as u64)
            }
        }
        #[inline]
        pub fn mem_lvl_num(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 4u8) as u64) }
        }
        #[inline]
        pub fn set_mem_lvl_num(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(33usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn mem_remote(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_mem_remote(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(37usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn mem_snoopx(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(38usize, 2u8) as u64) }
        }
        #[inline]
        pub fn set_mem_snoopx(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(38usize, 2u8, val as u64)
            }
        }
        #[inline]
        pub fn mem_rsvd(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 24u8) as u64) }
        }
        #[inline]
        pub fn set_mem_rsvd(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(40usize, 24u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            mem_op: __lkl__u64,
            mem_lvl: __lkl__u64,
            mem_snoop: __lkl__u64,
            mem_lock: __lkl__u64,
            mem_dtlb: __lkl__u64,
            mem_lvl_num: __lkl__u64,
            mem_remote: __lkl__u64,
            mem_snoopx: __lkl__u64,
            mem_rsvd: __lkl__u64,
        ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit.set(0usize, 5u8, {
                let mem_op: u64 = unsafe { ::std::mem::transmute(mem_op) };
                mem_op as u64
            });
            __bindgen_bitfield_unit.set(5usize, 14u8, {
                let mem_lvl: u64 = unsafe { ::std::mem::transmute(mem_lvl) };
                mem_lvl as u64
            });
            __bindgen_bitfield_unit.set(19usize, 5u8, {
                let mem_snoop: u64 = unsafe { ::std::mem::transmute(mem_snoop) };
                mem_snoop as u64
            });
            __bindgen_bitfield_unit.set(24usize, 2u8, {
                let mem_lock: u64 = unsafe { ::std::mem::transmute(mem_lock) };
                mem_lock as u64
            });
            __bindgen_bitfield_unit.set(26usize, 7u8, {
                let mem_dtlb: u64 = unsafe { ::std::mem::transmute(mem_dtlb) };
                mem_dtlb as u64
            });
            __bindgen_bitfield_unit.set(33usize, 4u8, {
                let mem_lvl_num: u64 = unsafe { ::std::mem::transmute(mem_lvl_num) };
                mem_lvl_num as u64
            });
            __bindgen_bitfield_unit.set(37usize, 1u8, {
                let mem_remote: u64 = unsafe { ::std::mem::transmute(mem_remote) };
                mem_remote as u64
            });
            __bindgen_bitfield_unit.set(38usize, 2u8, {
                let mem_snoopx: u64 = unsafe { ::std::mem::transmute(mem_snoopx) };
                mem_snoopx as u64
            });
            __bindgen_bitfield_unit.set(40usize, 24u8, {
                let mem_rsvd: u64 = unsafe { ::std::mem::transmute(mem_rsvd) };
                mem_rsvd as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_mem_data_src() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_mem_data_src>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_perf_mem_data_src))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_mem_data_src>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_perf_mem_data_src))
        );
        fn test_field_val() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_mem_data_src>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_mem_data_src),
                    "::",
                    stringify!(val)
                )
            );
        }
        test_field_val();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_perf_branch_entry {
        pub from: __lkl__u64,
        pub to: __lkl__u64,
        pub _bitfield_align_1: [u64; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_perf_branch_entry() {
        assert_eq!(
            ::std::mem::size_of::<lkl_perf_branch_entry>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_perf_branch_entry))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_perf_branch_entry>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_perf_branch_entry))
        );
        fn test_field_from() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_branch_entry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_branch_entry),
                    "::",
                    stringify!(from)
                )
            );
        }
        test_field_from();
        fn test_field_to() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_perf_branch_entry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_perf_branch_entry),
                    "::",
                    stringify!(to)
                )
            );
        }
        test_field_to();
    }
    impl lkl_perf_branch_entry {
        #[inline]
        pub fn mispred(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_mispred(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn predicted(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_predicted(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(1usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn in_tx(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_in_tx(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(2usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn abort(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u64) }
        }
        #[inline]
        pub fn set_abort(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(3usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn cycles(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 16u8) as u64) }
        }
        #[inline]
        pub fn set_cycles(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn type_(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u64) }
        }
        #[inline]
        pub fn set_type(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(20usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn reserved(&self) -> __lkl__u64 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 40u8) as u64) }
        }
        #[inline]
        pub fn set_reserved(&mut self, val: __lkl__u64) {
            unsafe {
                let val: u64 = ::std::mem::transmute(val);
                self._bitfield_1.set(24usize, 40u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            mispred: __lkl__u64,
            predicted: __lkl__u64,
            in_tx: __lkl__u64,
            abort: __lkl__u64,
            cycles: __lkl__u64,
            type_: __lkl__u64,
            reserved: __lkl__u64,
        ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let mispred: u64 = unsafe { ::std::mem::transmute(mispred) };
                mispred as u64
            });
            __bindgen_bitfield_unit.set(1usize, 1u8, {
                let predicted: u64 = unsafe { ::std::mem::transmute(predicted) };
                predicted as u64
            });
            __bindgen_bitfield_unit.set(2usize, 1u8, {
                let in_tx: u64 = unsafe { ::std::mem::transmute(in_tx) };
                in_tx as u64
            });
            __bindgen_bitfield_unit.set(3usize, 1u8, {
                let abort: u64 = unsafe { ::std::mem::transmute(abort) };
                abort as u64
            });
            __bindgen_bitfield_unit.set(4usize, 16u8, {
                let cycles: u64 = unsafe { ::std::mem::transmute(cycles) };
                cycles as u64
            });
            __bindgen_bitfield_unit.set(20usize, 4u8, {
                let type_: u64 = unsafe { ::std::mem::transmute(type_) };
                type_ as u64
            });
            __bindgen_bitfield_unit.set(24usize, 40u8, {
                let reserved: u64 = unsafe { ::std::mem::transmute(reserved) };
                reserved as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_semid_ds {
        pub sem_perm: ipc_perm,
        pub sem_otime: __lkl__kernel_old_time_t,
        pub sem_ctime: __lkl__kernel_old_time_t,
        pub sem_base: *mut sem,
        pub sem_pending: *mut sem_queue,
        pub sem_pending_last: *mut *mut sem_queue,
        pub undo: *mut sem_undo,
        pub sem_nsems: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_lkl_semid_ds() {
        assert_eq!(
            ::std::mem::size_of::<lkl_semid_ds>(),
            88usize,
            concat!("Size of: ", stringify!(lkl_semid_ds))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_semid_ds>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_semid_ds))
        );
        fn test_field_sem_perm() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_perm) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid_ds),
                    "::",
                    stringify!(sem_perm)
                )
            );
        }
        test_field_sem_perm();
        fn test_field_sem_otime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_otime) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid_ds),
                    "::",
                    stringify!(sem_otime)
                )
            );
        }
        test_field_sem_otime();
        fn test_field_sem_ctime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_ctime) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid_ds),
                    "::",
                    stringify!(sem_ctime)
                )
            );
        }
        test_field_sem_ctime();
        fn test_field_sem_base() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_base) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid_ds),
                    "::",
                    stringify!(sem_base)
                )
            );
        }
        test_field_sem_base();
        fn test_field_sem_pending() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_pending) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid_ds),
                    "::",
                    stringify!(sem_pending)
                )
            );
        }
        test_field_sem_pending();
        fn test_field_sem_pending_last() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_pending_last) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid_ds),
                    "::",
                    stringify!(sem_pending_last)
                )
            );
        }
        test_field_sem_pending_last();
        fn test_field_undo() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).undo) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid_ds),
                    "::",
                    stringify!(undo)
                )
            );
        }
        test_field_undo();
        fn test_field_sem_nsems() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_nsems) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid_ds),
                    "::",
                    stringify!(sem_nsems)
                )
            );
        }
        test_field_sem_nsems();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_semid64_ds {
        pub sem_perm: lkl_ipc64_perm,
        pub sem_otime: ::std::os::raw::c_long,
        pub sem_ctime: ::std::os::raw::c_long,
        pub sem_nsems: ::std::os::raw::c_ulong,
        pub __unused3: ::std::os::raw::c_ulong,
        pub __unused4: ::std::os::raw::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_lkl_semid64_ds() {
        assert_eq!(
            ::std::mem::size_of::<lkl_semid64_ds>(),
            88usize,
            concat!("Size of: ", stringify!(lkl_semid64_ds))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_semid64_ds>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_semid64_ds))
        );
        fn test_field_sem_perm() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_perm) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid64_ds),
                    "::",
                    stringify!(sem_perm)
                )
            );
        }
        test_field_sem_perm();
        fn test_field_sem_otime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_otime) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid64_ds),
                    "::",
                    stringify!(sem_otime)
                )
            );
        }
        test_field_sem_otime();
        fn test_field_sem_ctime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_ctime) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid64_ds),
                    "::",
                    stringify!(sem_ctime)
                )
            );
        }
        test_field_sem_ctime();
        fn test_field_sem_nsems() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_nsems) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid64_ds),
                    "::",
                    stringify!(sem_nsems)
                )
            );
        }
        test_field_sem_nsems();
        fn test_field___unused3() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused3) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid64_ds),
                    "::",
                    stringify!(__unused3)
                )
            );
        }
        test_field___unused3();
        fn test_field___unused4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semid64_ds>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused4) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semid64_ds),
                    "::",
                    stringify!(__unused4)
                )
            );
        }
        test_field___unused4();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_sembuf {
        pub sem_num: ::std::os::raw::c_ushort,
        pub sem_op: ::std::os::raw::c_short,
        pub sem_flg: ::std::os::raw::c_short,
    }
    #[test]
    fn bindgen_test_layout_lkl_sembuf() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sembuf>(),
            6usize,
            concat!("Size of: ", stringify!(lkl_sembuf))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sembuf>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_sembuf))
        );
        fn test_field_sem_num() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sembuf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_num) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sembuf),
                    "::",
                    stringify!(sem_num)
                )
            );
        }
        test_field_sem_num();
        fn test_field_sem_op() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sembuf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_op) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sembuf),
                    "::",
                    stringify!(sem_op)
                )
            );
        }
        test_field_sem_op();
        fn test_field_sem_flg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sembuf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sem_flg) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sembuf),
                    "::",
                    stringify!(sem_flg)
                )
            );
        }
        test_field_sem_flg();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_semun {
        pub val: ::std::os::raw::c_int,
        pub buf: *mut lkl_semid_ds,
        pub array: *mut ::std::os::raw::c_ushort,
        pub __buf: *mut lkl_seminfo,
        pub __pad: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout_lkl_semun() {
        assert_eq!(
            ::std::mem::size_of::<lkl_semun>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_semun))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_semun>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_semun))
        );
        fn test_field_val() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semun>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semun),
                    "::",
                    stringify!(val)
                )
            );
        }
        test_field_val();
        fn test_field_buf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semun>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semun),
                    "::",
                    stringify!(buf)
                )
            );
        }
        test_field_buf();
        fn test_field_array() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semun>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semun),
                    "::",
                    stringify!(array)
                )
            );
        }
        test_field_array();
        fn test_field___buf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semun>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__buf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semun),
                    "::",
                    stringify!(__buf)
                )
            );
        }
        test_field___buf();
        fn test_field___pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_semun>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_semun),
                    "::",
                    stringify!(__pad)
                )
            );
        }
        test_field___pad();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_seminfo {
        pub semmap: ::std::os::raw::c_int,
        pub semmni: ::std::os::raw::c_int,
        pub semmns: ::std::os::raw::c_int,
        pub semmnu: ::std::os::raw::c_int,
        pub semmsl: ::std::os::raw::c_int,
        pub semopm: ::std::os::raw::c_int,
        pub semume: ::std::os::raw::c_int,
        pub semusz: ::std::os::raw::c_int,
        pub semvmx: ::std::os::raw::c_int,
        pub semaem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_lkl_seminfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_seminfo>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_seminfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_seminfo>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_seminfo))
        );
        fn test_field_semmap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_seminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).semmap) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_seminfo),
                    "::",
                    stringify!(semmap)
                )
            );
        }
        test_field_semmap();
        fn test_field_semmni() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_seminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).semmni) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_seminfo),
                    "::",
                    stringify!(semmni)
                )
            );
        }
        test_field_semmni();
        fn test_field_semmns() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_seminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).semmns) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_seminfo),
                    "::",
                    stringify!(semmns)
                )
            );
        }
        test_field_semmns();
        fn test_field_semmnu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_seminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).semmnu) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_seminfo),
                    "::",
                    stringify!(semmnu)
                )
            );
        }
        test_field_semmnu();
        fn test_field_semmsl() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_seminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).semmsl) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_seminfo),
                    "::",
                    stringify!(semmsl)
                )
            );
        }
        test_field_semmsl();
        fn test_field_semopm() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_seminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).semopm) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_seminfo),
                    "::",
                    stringify!(semopm)
                )
            );
        }
        test_field_semopm();
        fn test_field_semume() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_seminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).semume) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_seminfo),
                    "::",
                    stringify!(semume)
                )
            );
        }
        test_field_semume();
        fn test_field_semusz() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_seminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).semusz) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_seminfo),
                    "::",
                    stringify!(semusz)
                )
            );
        }
        test_field_semusz();
        fn test_field_semvmx() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_seminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).semvmx) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_seminfo),
                    "::",
                    stringify!(semvmx)
                )
            );
        }
        test_field_semvmx();
        fn test_field_semaem() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_seminfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).semaem) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_seminfo),
                    "::",
                    stringify!(semaem)
                )
            );
        }
        test_field_semaem();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_robust_list {
        pub next: *mut lkl_robust_list,
    }
    #[test]
    fn bindgen_test_layout_lkl_robust_list() {
        assert_eq!(
            ::std::mem::size_of::<lkl_robust_list>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_robust_list))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_robust_list>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_robust_list))
        );
        fn test_field_next() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_robust_list>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_robust_list),
                    "::",
                    stringify!(next)
                )
            );
        }
        test_field_next();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_robust_list_head {
        pub list: lkl_robust_list,
        pub futex_offset: ::std::os::raw::c_long,
        pub list_op_pending: *mut lkl_robust_list,
    }
    #[test]
    fn bindgen_test_layout_lkl_robust_list_head() {
        assert_eq!(
            ::std::mem::size_of::<lkl_robust_list_head>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_robust_list_head))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_robust_list_head>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_robust_list_head))
        );
        fn test_field_list() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_robust_list_head>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_robust_list_head),
                    "::",
                    stringify!(list)
                )
            );
        }
        test_field_list();
        fn test_field_futex_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_robust_list_head>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).futex_offset) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_robust_list_head),
                    "::",
                    stringify!(futex_offset)
                )
            );
        }
        test_field_futex_offset();
        fn test_field_list_op_pending() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_robust_list_head>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).list_op_pending) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_robust_list_head),
                    "::",
                    stringify!(list_op_pending)
                )
            );
        }
        test_field_list_op_pending();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_pollfd {
        pub fd: ::std::os::raw::c_int,
        pub events: ::std::os::raw::c_short,
        pub revents: ::std::os::raw::c_short,
    }
    #[test]
    fn bindgen_test_layout_lkl_pollfd() {
        assert_eq!(
            ::std::mem::size_of::<lkl_pollfd>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_pollfd))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_pollfd>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_pollfd))
        );
        fn test_field_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_pollfd>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_pollfd),
                    "::",
                    stringify!(fd)
                )
            );
        }
        test_field_fd();
        fn test_field_events() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_pollfd>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_pollfd),
                    "::",
                    stringify!(events)
                )
            );
        }
        test_field_events();
        fn test_field_revents() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_pollfd>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).revents) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_pollfd),
                    "::",
                    stringify!(revents)
                )
            );
        }
        test_field_revents();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_mq_attr {
        pub mq_flags: __lkl__kernel_long_t,
        pub mq_maxmsg: __lkl__kernel_long_t,
        pub mq_msgsize: __lkl__kernel_long_t,
        pub mq_curmsgs: __lkl__kernel_long_t,
        pub __reserved: [__lkl__kernel_long_t; 4usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_mq_attr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_mq_attr>(),
            64usize,
            concat!("Size of: ", stringify!(lkl_mq_attr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_mq_attr>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_mq_attr))
        );
        fn test_field_mq_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_mq_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mq_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_mq_attr),
                    "::",
                    stringify!(mq_flags)
                )
            );
        }
        test_field_mq_flags();
        fn test_field_mq_maxmsg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_mq_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mq_maxmsg) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_mq_attr),
                    "::",
                    stringify!(mq_maxmsg)
                )
            );
        }
        test_field_mq_maxmsg();
        fn test_field_mq_msgsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_mq_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mq_msgsize) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_mq_attr),
                    "::",
                    stringify!(mq_msgsize)
                )
            );
        }
        test_field_mq_msgsize();
        fn test_field_mq_curmsgs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_mq_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mq_curmsgs) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_mq_attr),
                    "::",
                    stringify!(mq_curmsgs)
                )
            );
        }
        test_field_mq_curmsgs();
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_mq_attr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_mq_attr),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_epoll_event {
        pub events: __lkl__poll_t,
        pub data: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_epoll_event() {
        assert_eq!(
            ::std::mem::size_of::<lkl_epoll_event>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_epoll_event))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_epoll_event>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_epoll_event))
        );
        fn test_field_events() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_epoll_event>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_epoll_event),
                    "::",
                    stringify!(events)
                )
            );
        }
        test_field_events();
        fn test_field_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_epoll_event>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_epoll_event),
                    "::",
                    stringify!(data)
                )
            );
        }
        test_field_data();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_iovec {
        pub iov_base: *mut ::std::os::raw::c_void,
        pub iov_len: __lkl__kernel_size_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_iovec() {
        assert_eq!(
            ::std::mem::size_of::<lkl_iovec>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_iovec))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_iovec>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_iovec))
        );
        fn test_field_iov_base() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iovec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iovec),
                    "::",
                    stringify!(iov_base)
                )
            );
        }
        test_field_iov_base();
        fn test_field_iov_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iovec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iovec),
                    "::",
                    stringify!(iov_len)
                )
            );
        }
        test_field_iov_len();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_sigset_t {
        pub sig: [::std::os::raw::c_ulong; 1usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_sigset_t() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sigset_t>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_sigset_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sigset_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sigset_t))
        );
        fn test_field_sig() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigset_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigset_t),
                    "::",
                    stringify!(sig)
                )
            );
        }
        test_field_sig();
    }
    pub type lkl_old_sigset_t = ::std::os::raw::c_ulong;
    pub type __lkl__signalfn_t =
        ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
    pub type __lkl__sighandler_t = __lkl__signalfn_t;
    pub type __lkl__restorefn_t = ::std::option::Option<unsafe extern "C" fn()>;
    pub type __lkl__sigrestore_t = __lkl__restorefn_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_sigaction {
        pub lkl_sa_handler: __lkl__sighandler_t,
        pub sa_flags: ::std::os::raw::c_ulong,
        pub sa_mask: lkl_sigset_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_sigaction() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sigaction>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_sigaction))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sigaction>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sigaction))
        );
        fn test_field_lkl_sa_handler() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigaction>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lkl_sa_handler) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigaction),
                    "::",
                    stringify!(lkl_sa_handler)
                )
            );
        }
        test_field_lkl_sa_handler();
        fn test_field_sa_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigaction>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigaction),
                    "::",
                    stringify!(sa_flags)
                )
            );
        }
        test_field_sa_flags();
        fn test_field_sa_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigaction>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigaction),
                    "::",
                    stringify!(sa_mask)
                )
            );
        }
        test_field_sa_mask();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_sigaltstack {
        pub ss_sp: *mut ::std::os::raw::c_void,
        pub ss_flags: ::std::os::raw::c_int,
        pub ss_size: lkl_size_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_sigaltstack() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sigaltstack>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_sigaltstack))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sigaltstack>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sigaltstack))
        );
        fn test_field_ss_sp() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigaltstack>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigaltstack),
                    "::",
                    stringify!(ss_sp)
                )
            );
        }
        test_field_ss_sp();
        fn test_field_ss_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigaltstack>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigaltstack),
                    "::",
                    stringify!(ss_flags)
                )
            );
        }
        test_field_ss_flags();
        fn test_field_ss_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigaltstack>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigaltstack),
                    "::",
                    stringify!(ss_size)
                )
            );
        }
        test_field_ss_size();
    }
    pub type lkl_stack_t = lkl_sigaltstack;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_sigval {
        pub sival_int: ::std::os::raw::c_int,
        pub sival_ptr: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout_lkl_sigval() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sigval>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_sigval))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sigval>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sigval))
        );
        fn test_field_sival_int() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigval),
                    "::",
                    stringify!(sival_int)
                )
            );
        }
        test_field_sival_int();
        fn test_field_sival_ptr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigval),
                    "::",
                    stringify!(sival_ptr)
                )
            );
        }
        test_field_sival_ptr();
    }
    pub type lkl_sigval_t = lkl_sigval;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __lkl__sifields {
        pub _kill: __lkl__sifields__bindgen_ty_1,
        pub _timer: __lkl__sifields__bindgen_ty_2,
        pub _rt: __lkl__sifields__bindgen_ty_3,
        pub _sigchld: __lkl__sifields__bindgen_ty_4,
        pub _sigfault: __lkl__sifields__bindgen_ty_5,
        pub _sigpoll: __lkl__sifields__bindgen_ty_6,
        pub _sigsys: __lkl__sifields__bindgen_ty_7,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__sifields__bindgen_ty_1 {
        pub _pid: __lkl__kernel_pid_t,
        pub _uid: __lkl__kernel_uid32_t,
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(__lkl__sifields__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(__lkl__sifields__bindgen_ty_1))
        );
        fn test_field__pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._pid) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_1),
                    "::",
                    stringify!(_pid)
                )
            );
        }
        test_field__pid();
        fn test_field__uid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._uid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_1),
                    "::",
                    stringify!(_uid)
                )
            );
        }
        test_field__uid();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __lkl__sifields__bindgen_ty_2 {
        pub _tid: __lkl__kernel_timer_t,
        pub _overrun: ::std::os::raw::c_int,
        pub _sigval: lkl_sigval_t,
        pub _sys_private: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields__bindgen_ty_2>(),
            24usize,
            concat!("Size of: ", stringify!(__lkl__sifields__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__sifields__bindgen_ty_2))
        );
        fn test_field__tid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._tid) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_2),
                    "::",
                    stringify!(_tid)
                )
            );
        }
        test_field__tid();
        fn test_field__overrun() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._overrun) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_2),
                    "::",
                    stringify!(_overrun)
                )
            );
        }
        test_field__overrun();
        fn test_field__sigval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._sigval) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_2),
                    "::",
                    stringify!(_sigval)
                )
            );
        }
        test_field__sigval();
        fn test_field__sys_private() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._sys_private) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_2),
                    "::",
                    stringify!(_sys_private)
                )
            );
        }
        test_field__sys_private();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __lkl__sifields__bindgen_ty_3 {
        pub _pid: __lkl__kernel_pid_t,
        pub _uid: __lkl__kernel_uid32_t,
        pub _sigval: lkl_sigval_t,
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields__bindgen_ty_3() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields__bindgen_ty_3>(),
            16usize,
            concat!("Size of: ", stringify!(__lkl__sifields__bindgen_ty_3))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields__bindgen_ty_3>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__sifields__bindgen_ty_3))
        );
        fn test_field__pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._pid) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_3),
                    "::",
                    stringify!(_pid)
                )
            );
        }
        test_field__pid();
        fn test_field__uid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._uid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_3),
                    "::",
                    stringify!(_uid)
                )
            );
        }
        test_field__uid();
        fn test_field__sigval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._sigval) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_3),
                    "::",
                    stringify!(_sigval)
                )
            );
        }
        test_field__sigval();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__sifields__bindgen_ty_4 {
        pub _pid: __lkl__kernel_pid_t,
        pub _uid: __lkl__kernel_uid32_t,
        pub _status: ::std::os::raw::c_int,
        pub _utime: __lkl__kernel_clock_t,
        pub _stime: __lkl__kernel_clock_t,
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields__bindgen_ty_4() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields__bindgen_ty_4>(),
            32usize,
            concat!("Size of: ", stringify!(__lkl__sifields__bindgen_ty_4))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields__bindgen_ty_4>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__sifields__bindgen_ty_4))
        );
        fn test_field__pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._pid) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_4),
                    "::",
                    stringify!(_pid)
                )
            );
        }
        test_field__pid();
        fn test_field__uid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._uid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_4),
                    "::",
                    stringify!(_uid)
                )
            );
        }
        test_field__uid();
        fn test_field__status() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._status) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_4),
                    "::",
                    stringify!(_status)
                )
            );
        }
        test_field__status();
        fn test_field__utime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._utime) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_4),
                    "::",
                    stringify!(_utime)
                )
            );
        }
        test_field__utime();
        fn test_field__stime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._stime) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_4),
                    "::",
                    stringify!(_stime)
                )
            );
        }
        test_field__stime();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __lkl__sifields__bindgen_ty_5 {
        pub _addr: *mut ::std::os::raw::c_void,
        pub __bindgen_anon_1: __lkl__sifields__bindgen_ty_5__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __lkl__sifields__bindgen_ty_5__bindgen_ty_1 {
        pub _addr_lsb: ::std::os::raw::c_short,
        pub _addr_bnd: __lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        pub _addr_pkey: __lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
        pub _dummy_bnd: [::std::os::raw::c_char; 8usize],
        pub _lower: *mut ::std::os::raw::c_void,
        pub _upper: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
            24usize,
            concat!(
                "Size of: ",
                stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field__dummy_bnd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        __lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._dummy_bnd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(_dummy_bnd)
                )
            );
        }
        test_field__dummy_bnd();
        fn test_field__lower() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        __lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._lower) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(_lower)
                )
            );
        }
        test_field__lower();
        fn test_field__upper() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        __lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._upper) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(_upper)
                )
            );
        }
        test_field__upper();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
        pub _dummy_pkey: [::std::os::raw::c_char; 8usize],
        pub _pkey: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>(),
            12usize,
            concat!(
                "Size of: ",
                stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2)
            )
        );
        fn test_field__dummy_pkey() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        __lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._dummy_pkey) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(_dummy_pkey)
                )
            );
        }
        test_field__dummy_pkey();
        fn test_field__pkey() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        __lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._pkey) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(_pkey)
                )
            );
        }
        test_field__pkey();
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields__bindgen_ty_5__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields__bindgen_ty_5__bindgen_ty_1>(),
            24usize,
            concat!(
                "Size of: ",
                stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields__bindgen_ty_5__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1)
            )
        );
        fn test_field__addr_lsb() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_5__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._addr_lsb) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1),
                    "::",
                    stringify!(_addr_lsb)
                )
            );
        }
        test_field__addr_lsb();
        fn test_field__addr_bnd() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_5__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._addr_bnd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1),
                    "::",
                    stringify!(_addr_bnd)
                )
            );
        }
        test_field__addr_bnd();
        fn test_field__addr_pkey() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_5__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._addr_pkey) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_5__bindgen_ty_1),
                    "::",
                    stringify!(_addr_pkey)
                )
            );
        }
        test_field__addr_pkey();
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields__bindgen_ty_5() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields__bindgen_ty_5>(),
            32usize,
            concat!("Size of: ", stringify!(__lkl__sifields__bindgen_ty_5))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields__bindgen_ty_5>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__sifields__bindgen_ty_5))
        );
        fn test_field__addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_5>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._addr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_5),
                    "::",
                    stringify!(_addr)
                )
            );
        }
        test_field__addr();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__sifields__bindgen_ty_6 {
        pub _band: ::std::os::raw::c_long,
        pub _fd: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields__bindgen_ty_6() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields__bindgen_ty_6>(),
            16usize,
            concat!("Size of: ", stringify!(__lkl__sifields__bindgen_ty_6))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields__bindgen_ty_6>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__sifields__bindgen_ty_6))
        );
        fn test_field__band() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_6>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._band) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_6),
                    "::",
                    stringify!(_band)
                )
            );
        }
        test_field__band();
        fn test_field__fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_6>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._fd) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_6),
                    "::",
                    stringify!(_fd)
                )
            );
        }
        test_field__fd();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lkl__sifields__bindgen_ty_7 {
        pub _call_addr: *mut ::std::os::raw::c_void,
        pub _syscall: ::std::os::raw::c_int,
        pub _arch: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields__bindgen_ty_7() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields__bindgen_ty_7>(),
            16usize,
            concat!("Size of: ", stringify!(__lkl__sifields__bindgen_ty_7))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields__bindgen_ty_7>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__sifields__bindgen_ty_7))
        );
        fn test_field__call_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._call_addr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_7),
                    "::",
                    stringify!(_call_addr)
                )
            );
        }
        test_field__call_addr();
        fn test_field__syscall() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._syscall) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_7),
                    "::",
                    stringify!(_syscall)
                )
            );
        }
        test_field__syscall();
        fn test_field__arch() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields__bindgen_ty_7>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._arch) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields__bindgen_ty_7),
                    "::",
                    stringify!(_arch)
                )
            );
        }
        test_field__arch();
    }
    #[test]
    fn bindgen_test_layout___lkl__sifields() {
        assert_eq!(
            ::std::mem::size_of::<__lkl__sifields>(),
            32usize,
            concat!("Size of: ", stringify!(__lkl__sifields))
        );
        assert_eq!(
            ::std::mem::align_of::<__lkl__sifields>(),
            8usize,
            concat!("Alignment of ", stringify!(__lkl__sifields))
        );
        fn test_field__kill() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._kill) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields),
                    "::",
                    stringify!(_kill)
                )
            );
        }
        test_field__kill();
        fn test_field__timer() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._timer) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields),
                    "::",
                    stringify!(_timer)
                )
            );
        }
        test_field__timer();
        fn test_field__rt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._rt) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields),
                    "::",
                    stringify!(_rt)
                )
            );
        }
        test_field__rt();
        fn test_field__sigchld() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._sigchld) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields),
                    "::",
                    stringify!(_sigchld)
                )
            );
        }
        test_field__sigchld();
        fn test_field__sigfault() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._sigfault) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields),
                    "::",
                    stringify!(_sigfault)
                )
            );
        }
        test_field__sigfault();
        fn test_field__sigpoll() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._sigpoll) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields),
                    "::",
                    stringify!(_sigpoll)
                )
            );
        }
        test_field__sigpoll();
        fn test_field__sigsys() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__lkl__sifields>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._sigsys) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__lkl__sifields),
                    "::",
                    stringify!(_sigsys)
                )
            );
        }
        test_field__sigsys();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_siginfo {
        pub __bindgen_anon_1: lkl_siginfo__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_siginfo__bindgen_ty_1 {
        pub __bindgen_anon_1: lkl_siginfo__bindgen_ty_1__bindgen_ty_1,
        pub _si_pad: [::std::os::raw::c_int; 32usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_siginfo__bindgen_ty_1__bindgen_ty_1 {
        pub si_signo: ::std::os::raw::c_int,
        pub si_errno: ::std::os::raw::c_int,
        pub si_code: ::std::os::raw::c_int,
        pub _sifields: __lkl__sifields,
    }
    #[test]
    fn bindgen_test_layout_lkl_siginfo__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_siginfo__bindgen_ty_1__bindgen_ty_1>(),
            48usize,
            concat!(
                "Size of: ",
                stringify!(lkl_siginfo__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_siginfo__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_siginfo__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field_si_signo() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_siginfo__bindgen_ty_1__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_siginfo__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(si_signo)
                )
            );
        }
        test_field_si_signo();
        fn test_field_si_errno() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_siginfo__bindgen_ty_1__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_siginfo__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(si_errno)
                )
            );
        }
        test_field_si_errno();
        fn test_field_si_code() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_siginfo__bindgen_ty_1__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_siginfo__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(si_code)
                )
            );
        }
        test_field_si_code();
        fn test_field__sifields() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_siginfo__bindgen_ty_1__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._sifields) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_siginfo__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(_sifields)
                )
            );
        }
        test_field__sifields();
    }
    #[test]
    fn bindgen_test_layout_lkl_siginfo__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_siginfo__bindgen_ty_1>(),
            128usize,
            concat!("Size of: ", stringify!(lkl_siginfo__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_siginfo__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_siginfo__bindgen_ty_1))
        );
        fn test_field__si_pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_siginfo__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._si_pad) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_siginfo__bindgen_ty_1),
                    "::",
                    stringify!(_si_pad)
                )
            );
        }
        test_field__si_pad();
    }
    #[test]
    fn bindgen_test_layout_lkl_siginfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_siginfo>(),
            128usize,
            concat!("Size of: ", stringify!(lkl_siginfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_siginfo>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_siginfo))
        );
    }
    pub type lkl_siginfo_t = lkl_siginfo;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_sigevent {
        pub sigev_value: lkl_sigval_t,
        pub sigev_signo: ::std::os::raw::c_int,
        pub sigev_notify: ::std::os::raw::c_int,
        pub _sigev_un: lkl_sigevent__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_sigevent__bindgen_ty_1 {
        pub _pad: [::std::os::raw::c_int; 12usize],
        pub _tid: ::std::os::raw::c_int,
        pub _sigev_thread: lkl_sigevent__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_sigevent__bindgen_ty_1__bindgen_ty_1 {
        pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: lkl_sigval_t)>,
        pub _attribute: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout_lkl_sigevent__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sigevent__bindgen_ty_1__bindgen_ty_1>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(lkl_sigevent__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sigevent__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_sigevent__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field__function() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_sigevent__bindgen_ty_1__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._function) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigevent__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(_function)
                )
            );
        }
        test_field__function();
        fn test_field__attribute() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_sigevent__bindgen_ty_1__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._attribute) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigevent__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(_attribute)
                )
            );
        }
        test_field__attribute();
    }
    #[test]
    fn bindgen_test_layout_lkl_sigevent__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sigevent__bindgen_ty_1>(),
            48usize,
            concat!("Size of: ", stringify!(lkl_sigevent__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sigevent__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sigevent__bindgen_ty_1))
        );
        fn test_field__pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigevent__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigevent__bindgen_ty_1),
                    "::",
                    stringify!(_pad)
                )
            );
        }
        test_field__pad();
        fn test_field__tid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigevent__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._tid) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigevent__bindgen_ty_1),
                    "::",
                    stringify!(_tid)
                )
            );
        }
        test_field__tid();
        fn test_field__sigev_thread() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigevent__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._sigev_thread) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigevent__bindgen_ty_1),
                    "::",
                    stringify!(_sigev_thread)
                )
            );
        }
        test_field__sigev_thread();
    }
    #[test]
    fn bindgen_test_layout_lkl_sigevent() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sigevent>(),
            64usize,
            concat!("Size of: ", stringify!(lkl_sigevent))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sigevent>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_sigevent))
        );
        fn test_field_sigev_value() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigevent>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigevent),
                    "::",
                    stringify!(sigev_value)
                )
            );
        }
        test_field_sigev_value();
        fn test_field_sigev_signo() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigevent>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigevent),
                    "::",
                    stringify!(sigev_signo)
                )
            );
        }
        test_field_sigev_signo();
        fn test_field_sigev_notify() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigevent>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigevent),
                    "::",
                    stringify!(sigev_notify)
                )
            );
        }
        test_field_sigev_notify();
        fn test_field__sigev_un() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sigevent>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._sigev_un) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sigevent),
                    "::",
                    stringify!(_sigev_un)
                )
            );
        }
        test_field__sigev_un();
    }
    pub type lkl_sigevent_t = lkl_sigevent;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_utimbuf {
        pub actime: __lkl__kernel_old_time_t,
        pub modtime: __lkl__kernel_old_time_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_utimbuf() {
        assert_eq!(
            ::std::mem::size_of::<lkl_utimbuf>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_utimbuf))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_utimbuf>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_utimbuf))
        );
        fn test_field_actime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_utimbuf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).actime) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_utimbuf),
                    "::",
                    stringify!(actime)
                )
            );
        }
        test_field_actime();
        fn test_field_modtime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_utimbuf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).modtime) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_utimbuf),
                    "::",
                    stringify!(modtime)
                )
            );
        }
        test_field_modtime();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_icmphdr {
        pub type_: __lkl__u8,
        pub code: __lkl__u8,
        pub checksum: __lkl__sum16,
        pub un: lkl_icmphdr__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_icmphdr__bindgen_ty_1 {
        pub echo: lkl_icmphdr__bindgen_ty_1__bindgen_ty_1,
        pub gateway: __lkl__be32,
        pub frag: lkl_icmphdr__bindgen_ty_1__bindgen_ty_2,
        pub reserved: [__lkl__u8; 4usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_icmphdr__bindgen_ty_1__bindgen_ty_1 {
        pub id: __lkl__be16,
        pub sequence: __lkl__be16,
    }
    #[test]
    fn bindgen_test_layout_lkl_icmphdr__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_icmphdr__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_icmphdr__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_icmphdr__bindgen_ty_1__bindgen_ty_1>(),
            2usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_icmphdr__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field_id() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_icmphdr__bindgen_ty_1__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(id)
                )
            );
        }
        test_field_id();
        fn test_field_sequence() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_icmphdr__bindgen_ty_1__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(sequence)
                )
            );
        }
        test_field_sequence();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_icmphdr__bindgen_ty_1__bindgen_ty_2 {
        pub __unused: __lkl__be16,
        pub mtu: __lkl__be16,
    }
    #[test]
    fn bindgen_test_layout_lkl_icmphdr__bindgen_ty_1__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_icmphdr__bindgen_ty_1__bindgen_ty_2>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_icmphdr__bindgen_ty_1__bindgen_ty_2)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_icmphdr__bindgen_ty_1__bindgen_ty_2>(),
            2usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_icmphdr__bindgen_ty_1__bindgen_ty_2)
            )
        );
        fn test_field___unused() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_icmphdr__bindgen_ty_1__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__unused) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(__unused)
                )
            );
        }
        test_field___unused();
        fn test_field_mtu() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_icmphdr__bindgen_ty_1__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(mtu)
                )
            );
        }
        test_field_mtu();
    }
    #[test]
    fn bindgen_test_layout_lkl_icmphdr__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_icmphdr__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_icmphdr__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_icmphdr__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_icmphdr__bindgen_ty_1))
        );
        fn test_field_echo() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmphdr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).echo) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr__bindgen_ty_1),
                    "::",
                    stringify!(echo)
                )
            );
        }
        test_field_echo();
        fn test_field_gateway() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmphdr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gateway) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr__bindgen_ty_1),
                    "::",
                    stringify!(gateway)
                )
            );
        }
        test_field_gateway();
        fn test_field_frag() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmphdr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).frag) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr__bindgen_ty_1),
                    "::",
                    stringify!(frag)
                )
            );
        }
        test_field_frag();
        fn test_field_reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmphdr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr__bindgen_ty_1),
                    "::",
                    stringify!(reserved)
                )
            );
        }
        test_field_reserved();
    }
    #[test]
    fn bindgen_test_layout_lkl_icmphdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_icmphdr>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_icmphdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_icmphdr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_icmphdr))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_code() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr),
                    "::",
                    stringify!(code)
                )
            );
        }
        test_field_code();
        fn test_field_checksum() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr),
                    "::",
                    stringify!(checksum)
                )
            );
        }
        test_field_checksum();
        fn test_field_un() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).un) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmphdr),
                    "::",
                    stringify!(un)
                )
            );
        }
        test_field_un();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_icmp_filter {
        pub data: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_icmp_filter() {
        assert_eq!(
            ::std::mem::size_of::<lkl_icmp_filter>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_icmp_filter))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_icmp_filter>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_icmp_filter))
        );
        fn test_field_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmp_filter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmp_filter),
                    "::",
                    stringify!(data)
                )
            );
        }
        test_field_data();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_icmp_ext_hdr {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
        pub reserved2: __lkl__u8,
        pub checksum: __lkl__sum16,
    }
    #[test]
    fn bindgen_test_layout_lkl_icmp_ext_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_icmp_ext_hdr>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_icmp_ext_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_icmp_ext_hdr>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_icmp_ext_hdr))
        );
        fn test_field_reserved2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmp_ext_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmp_ext_hdr),
                    "::",
                    stringify!(reserved2)
                )
            );
        }
        test_field_reserved2();
        fn test_field_checksum() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmp_ext_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmp_ext_hdr),
                    "::",
                    stringify!(checksum)
                )
            );
        }
        test_field_checksum();
    }
    impl lkl_icmp_ext_hdr {
        #[inline]
        pub fn reserved1(&self) -> __lkl__u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_reserved1(&mut self, val: __lkl__u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn version(&self) -> __lkl__u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_version(&mut self, val: __lkl__u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            reserved1: __lkl__u8,
            version: __lkl__u8,
        ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
            __bindgen_bitfield_unit.set(0usize, 4u8, {
                let reserved1: u8 = unsafe { ::std::mem::transmute(reserved1) };
                reserved1 as u64
            });
            __bindgen_bitfield_unit.set(4usize, 4u8, {
                let version: u8 = unsafe { ::std::mem::transmute(version) };
                version as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_icmp_extobj_hdr {
        pub length: __lkl__be16,
        pub class_num: __lkl__u8,
        pub class_type: __lkl__u8,
    }
    #[test]
    fn bindgen_test_layout_lkl_icmp_extobj_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_icmp_extobj_hdr>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_icmp_extobj_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_icmp_extobj_hdr>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_icmp_extobj_hdr))
        );
        fn test_field_length() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmp_extobj_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmp_extobj_hdr),
                    "::",
                    stringify!(length)
                )
            );
        }
        test_field_length();
        fn test_field_class_num() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmp_extobj_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).class_num) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmp_extobj_hdr),
                    "::",
                    stringify!(class_num)
                )
            );
        }
        test_field_class_num();
        fn test_field_class_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_icmp_extobj_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).class_type) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_icmp_extobj_hdr),
                    "::",
                    stringify!(class_type)
                )
            );
        }
        test_field_class_type();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_iphdr {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
        pub tos: __lkl__u8,
        pub tot_len: __lkl__be16,
        pub id: __lkl__be16,
        pub frag_off: __lkl__be16,
        pub ttl: __lkl__u8,
        pub protocol: __lkl__u8,
        pub check: __lkl__sum16,
        pub saddr: __lkl__be32,
        pub daddr: __lkl__be32,
    }
    #[test]
    fn bindgen_test_layout_lkl_iphdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_iphdr>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_iphdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_iphdr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_iphdr))
        );
        fn test_field_tos() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tos) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iphdr),
                    "::",
                    stringify!(tos)
                )
            );
        }
        test_field_tos();
        fn test_field_tot_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tot_len) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iphdr),
                    "::",
                    stringify!(tot_len)
                )
            );
        }
        test_field_tot_len();
        fn test_field_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iphdr),
                    "::",
                    stringify!(id)
                )
            );
        }
        test_field_id();
        fn test_field_frag_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).frag_off) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iphdr),
                    "::",
                    stringify!(frag_off)
                )
            );
        }
        test_field_frag_off();
        fn test_field_ttl() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ttl) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iphdr),
                    "::",
                    stringify!(ttl)
                )
            );
        }
        test_field_ttl();
        fn test_field_protocol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize
                },
                9usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iphdr),
                    "::",
                    stringify!(protocol)
                )
            );
        }
        test_field_protocol();
        fn test_field_check() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).check) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iphdr),
                    "::",
                    stringify!(check)
                )
            );
        }
        test_field_check();
        fn test_field_saddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).saddr) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iphdr),
                    "::",
                    stringify!(saddr)
                )
            );
        }
        test_field_saddr();
        fn test_field_daddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_iphdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).daddr) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_iphdr),
                    "::",
                    stringify!(daddr)
                )
            );
        }
        test_field_daddr();
    }
    impl lkl_iphdr {
        #[inline]
        pub fn ihl(&self) -> __lkl__u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_ihl(&mut self, val: __lkl__u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn version(&self) -> __lkl__u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_version(&mut self, val: __lkl__u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            ihl: __lkl__u8,
            version: __lkl__u8,
        ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
            __bindgen_bitfield_unit.set(0usize, 4u8, {
                let ihl: u8 = unsafe { ::std::mem::transmute(ihl) };
                ihl as u64
            });
            __bindgen_bitfield_unit.set(4usize, 4u8, {
                let version: u8 = unsafe { ::std::mem::transmute(version) };
                version as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_ip_auth_hdr {
        pub nexthdr: __lkl__u8,
        pub hdrlen: __lkl__u8,
        pub reserved: __lkl__be16,
        pub spi: __lkl__be32,
        pub seq_no: __lkl__be32,
        pub auth_data: __IncompleteArrayField<__lkl__u8>,
    }
    #[test]
    fn bindgen_test_layout_lkl_ip_auth_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ip_auth_hdr>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_ip_auth_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ip_auth_hdr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ip_auth_hdr))
        );
        fn test_field_nexthdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_auth_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nexthdr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_auth_hdr),
                    "::",
                    stringify!(nexthdr)
                )
            );
        }
        test_field_nexthdr();
        fn test_field_hdrlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_auth_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hdrlen) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_auth_hdr),
                    "::",
                    stringify!(hdrlen)
                )
            );
        }
        test_field_hdrlen();
        fn test_field_reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_auth_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_auth_hdr),
                    "::",
                    stringify!(reserved)
                )
            );
        }
        test_field_reserved();
        fn test_field_spi() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_auth_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).spi) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_auth_hdr),
                    "::",
                    stringify!(spi)
                )
            );
        }
        test_field_spi();
        fn test_field_seq_no() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_auth_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).seq_no) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_auth_hdr),
                    "::",
                    stringify!(seq_no)
                )
            );
        }
        test_field_seq_no();
        fn test_field_auth_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_auth_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).auth_data) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_auth_hdr),
                    "::",
                    stringify!(auth_data)
                )
            );
        }
        test_field_auth_data();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_ip_esp_hdr {
        pub spi: __lkl__be32,
        pub seq_no: __lkl__be32,
        pub enc_data: __IncompleteArrayField<__lkl__u8>,
    }
    #[test]
    fn bindgen_test_layout_lkl_ip_esp_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ip_esp_hdr>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ip_esp_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ip_esp_hdr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ip_esp_hdr))
        );
        fn test_field_spi() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_esp_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).spi) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_esp_hdr),
                    "::",
                    stringify!(spi)
                )
            );
        }
        test_field_spi();
        fn test_field_seq_no() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_esp_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).seq_no) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_esp_hdr),
                    "::",
                    stringify!(seq_no)
                )
            );
        }
        test_field_seq_no();
        fn test_field_enc_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_esp_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).enc_data) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_esp_hdr),
                    "::",
                    stringify!(enc_data)
                )
            );
        }
        test_field_enc_data();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ip_comp_hdr {
        pub nexthdr: __lkl__u8,
        pub flags: __lkl__u8,
        pub cpi: __lkl__be16,
    }
    #[test]
    fn bindgen_test_layout_lkl_ip_comp_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ip_comp_hdr>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_ip_comp_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ip_comp_hdr>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_ip_comp_hdr))
        );
        fn test_field_nexthdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_comp_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nexthdr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_comp_hdr),
                    "::",
                    stringify!(nexthdr)
                )
            );
        }
        test_field_nexthdr();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_comp_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_comp_hdr),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_cpi() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_comp_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cpi) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_comp_hdr),
                    "::",
                    stringify!(cpi)
                )
            );
        }
        test_field_cpi();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ip_beet_phdr {
        pub nexthdr: __lkl__u8,
        pub hdrlen: __lkl__u8,
        pub padlen: __lkl__u8,
        pub reserved: __lkl__u8,
    }
    #[test]
    fn bindgen_test_layout_lkl_ip_beet_phdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ip_beet_phdr>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_ip_beet_phdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ip_beet_phdr>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_ip_beet_phdr))
        );
        fn test_field_nexthdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_beet_phdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nexthdr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_beet_phdr),
                    "::",
                    stringify!(nexthdr)
                )
            );
        }
        test_field_nexthdr();
        fn test_field_hdrlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_beet_phdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hdrlen) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_beet_phdr),
                    "::",
                    stringify!(hdrlen)
                )
            );
        }
        test_field_hdrlen();
        fn test_field_padlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_beet_phdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).padlen) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_beet_phdr),
                    "::",
                    stringify!(padlen)
                )
            );
        }
        test_field_padlen();
        fn test_field_reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_beet_phdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_beet_phdr),
                    "::",
                    stringify!(reserved)
                )
            );
        }
        test_field_reserved();
    }
    pub const LKL_IPV4_DEVCONF_FORWARDING: _bindgen_ty_42 = 1;
    pub const LKL_IPV4_DEVCONF_MC_FORWARDING: _bindgen_ty_42 = 2;
    pub const LKL_IPV4_DEVCONF_PROXY_ARP: _bindgen_ty_42 = 3;
    pub const LKL_IPV4_DEVCONF_ACCEPT_REDIRECTS: _bindgen_ty_42 = 4;
    pub const LKL_IPV4_DEVCONF_SECURE_REDIRECTS: _bindgen_ty_42 = 5;
    pub const LKL_IPV4_DEVCONF_SEND_REDIRECTS: _bindgen_ty_42 = 6;
    pub const LKL_IPV4_DEVCONF_SHARED_MEDIA: _bindgen_ty_42 = 7;
    pub const LKL_IPV4_DEVCONF_RP_FILTER: _bindgen_ty_42 = 8;
    pub const LKL_IPV4_DEVCONF_ACCEPT_SOURCE_ROUTE: _bindgen_ty_42 = 9;
    pub const LKL_IPV4_DEVCONF_BOOTP_RELAY: _bindgen_ty_42 = 10;
    pub const LKL_IPV4_DEVCONF_LOG_MARTIANS: _bindgen_ty_42 = 11;
    pub const LKL_IPV4_DEVCONF_TAG: _bindgen_ty_42 = 12;
    pub const LKL_IPV4_DEVCONF_ARPFILTER: _bindgen_ty_42 = 13;
    pub const LKL_IPV4_DEVCONF_MEDIUM_ID: _bindgen_ty_42 = 14;
    pub const LKL_IPV4_DEVCONF_NOXFRM: _bindgen_ty_42 = 15;
    pub const LKL_IPV4_DEVCONF_NOPOLICY: _bindgen_ty_42 = 16;
    pub const LKL_IPV4_DEVCONF_FORCE_IGMP_VERSION: _bindgen_ty_42 = 17;
    pub const LKL_IPV4_DEVCONF_ARP_ANNOUNCE: _bindgen_ty_42 = 18;
    pub const LKL_IPV4_DEVCONF_ARP_IGNORE: _bindgen_ty_42 = 19;
    pub const LKL_IPV4_DEVCONF_PROMOTE_SECONDARIES: _bindgen_ty_42 = 20;
    pub const LKL_IPV4_DEVCONF_ARP_ACCEPT: _bindgen_ty_42 = 21;
    pub const LKL_IPV4_DEVCONF_ARP_NOTIFY: _bindgen_ty_42 = 22;
    pub const LKL_IPV4_DEVCONF_ACCEPT_LOCAL: _bindgen_ty_42 = 23;
    pub const LKL_IPV4_DEVCONF_SRC_VMARK: _bindgen_ty_42 = 24;
    pub const LKL_IPV4_DEVCONF_PROXY_ARP_PVLAN: _bindgen_ty_42 = 25;
    pub const LKL_IPV4_DEVCONF_ROUTE_LOCALNET: _bindgen_ty_42 = 26;
    pub const LKL_IPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL: _bindgen_ty_42 = 27;
    pub const LKL_IPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL: _bindgen_ty_42 = 28;
    pub const LKL_IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN: _bindgen_ty_42 = 29;
    pub const LKL_IPV4_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST: _bindgen_ty_42 = 30;
    pub const LKL_IPV4_DEVCONF_DROP_GRATUITOUS_ARP: _bindgen_ty_42 = 31;
    pub const LKL_IPV4_DEVCONF_BC_FORWARDING: _bindgen_ty_42 = 32;
    pub const __LKL__IPV4_DEVCONF_MAX: _bindgen_ty_42 = 33;
    pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_sockaddr {
        pub sa_family: ::std::os::raw::c_ushort,
        pub sa_data: [::std::os::raw::c_char; 14usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_sockaddr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sockaddr>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_sockaddr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sockaddr>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_sockaddr))
        );
        fn test_field_sa_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sockaddr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sockaddr),
                    "::",
                    stringify!(sa_family)
                )
            );
        }
        test_field_sa_family();
        fn test_field_sa_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sockaddr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sockaddr),
                    "::",
                    stringify!(sa_data)
                )
            );
        }
        test_field_sa_data();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct iovec {
        pub iov_base: *mut ::std::os::raw::c_void,
        pub iov_len: size_t,
    }
    #[test]
    fn bindgen_test_layout_iovec() {
        assert_eq!(
            ::std::mem::size_of::<iovec>(),
            16usize,
            concat!("Size of: ", stringify!(iovec))
        );
        assert_eq!(
            ::std::mem::align_of::<iovec>(),
            8usize,
            concat!("Alignment of ", stringify!(iovec))
        );
        fn test_field_iov_base() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<iovec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(iovec),
                    "::",
                    stringify!(iov_base)
                )
            );
        }
        test_field_iov_base();
        fn test_field_iov_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<iovec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(iovec),
                    "::",
                    stringify!(iov_len)
                )
            );
        }
        test_field_iov_len();
    }
    pub type u_char = __u_char;
    pub type u_short = __u_short;
    pub type u_int = __u_int;
    pub type u_long = __u_long;
    pub type quad_t = __quad_t;
    pub type u_quad_t = __u_quad_t;
    pub type fsid_t = __fsid_t;
    pub type loff_t = __loff_t;
    pub type ino_t = __ino_t;
    pub type dev_t = __dev_t;
    pub type mode_t = __mode_t;
    pub type nlink_t = __nlink_t;
    pub type id_t = __id_t;
    pub type daddr_t = __daddr_t;
    pub type caddr_t = __caddr_t;
    pub type key_t = __key_t;
    pub type clock_t = __clock_t;
    pub type clockid_t = __clockid_t;
    pub type time_t = __time_t;
    pub type timer_t = __timer_t;
    pub type ulong = ::std::os::raw::c_ulong;
    pub type ushort = ::std::os::raw::c_ushort;
    pub type uint = ::std::os::raw::c_uint;
    pub type u_int8_t = __uint8_t;
    pub type u_int16_t = __uint16_t;
    pub type u_int32_t = __uint32_t;
    pub type u_int64_t = __uint64_t;
    pub type register_t = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::std::os::raw::c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___sigset_t() {
        assert_eq!(
            ::std::mem::size_of::<__sigset_t>(),
            128usize,
            concat!("Size of: ", stringify!(__sigset_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__sigset_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__sigset_t))
        );
        fn test_field___val() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__sigset_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__sigset_t),
                    "::",
                    stringify!(__val)
                )
            );
        }
        test_field___val();
    }
    pub type sigset_t = __sigset_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: __time_t,
        pub tv_usec: __suseconds_t,
    }
    #[test]
    fn bindgen_test_layout_timeval() {
        assert_eq!(
            ::std::mem::size_of::<timeval>(),
            16usize,
            concat!("Size of: ", stringify!(timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(timeval))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timeval),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_usec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timeval),
                    "::",
                    stringify!(tv_usec)
                )
            );
        }
        test_field_tv_usec();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: __time_t,
        pub tv_nsec: __syscall_slong_t,
    }
    #[test]
    fn bindgen_test_layout_timespec() {
        assert_eq!(
            ::std::mem::size_of::<timespec>(),
            16usize,
            concat!("Size of: ", stringify!(timespec))
        );
        assert_eq!(
            ::std::mem::align_of::<timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(timespec))
        );
        fn test_field_tv_sec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timespec),
                    "::",
                    stringify!(tv_sec)
                )
            );
        }
        test_field_tv_sec();
        fn test_field_tv_nsec() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(timespec),
                    "::",
                    stringify!(tv_nsec)
                )
            );
        }
        test_field_tv_nsec();
    }
    pub type suseconds_t = __suseconds_t;
    pub type __fd_mask = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub __fds_bits: [__fd_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_fd_set() {
        assert_eq!(
            ::std::mem::size_of::<fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(fd_set))
        );
        assert_eq!(
            ::std::mem::align_of::<fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(fd_set))
        );
        fn test_field___fds_bits() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<fd_set>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(fd_set),
                    "::",
                    stringify!(__fds_bits)
                )
            );
        }
        test_field___fds_bits();
    }
    pub type fd_mask = __fd_mask;
    extern "C" {
        pub fn select(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut fd_set,
            __writefds: *mut fd_set,
            __exceptfds: *mut fd_set,
            __timeout: *mut timeval,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pselect(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut fd_set,
            __writefds: *mut fd_set,
            __exceptfds: *mut fd_set,
            __timeout: *const timespec,
            __sigmask: *const __sigset_t,
        ) -> ::std::os::raw::c_int;
    }
    pub type blksize_t = __blksize_t;
    pub type blkcnt_t = __blkcnt_t;
    pub type fsblkcnt_t = __fsblkcnt_t;
    pub type fsfilcnt_t = __fsfilcnt_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut __pthread_internal_list,
        pub __next: *mut __pthread_internal_list,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_list() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_internal_list>(),
            16usize,
            concat!("Size of: ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_internal_list>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_list))
        );
        fn test_field___prev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_internal_list),
                    "::",
                    stringify!(__prev)
                )
            );
        }
        test_field___prev();
        fn test_field___next() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_internal_list),
                    "::",
                    stringify!(__next)
                )
            );
        }
        test_field___next();
    }
    pub type __pthread_list_t = __pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_slist {
        pub __next: *mut __pthread_internal_slist,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_slist() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_internal_slist>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_internal_slist))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_internal_slist>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_slist))
        );
        fn test_field___next() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_internal_slist>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_internal_slist),
                    "::",
                    stringify!(__next)
                )
            );
        }
        test_field___next();
    }
    pub type __pthread_slist_t = __pthread_internal_slist;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::std::os::raw::c_int,
        pub __count: ::std::os::raw::c_uint,
        pub __owner: ::std::os::raw::c_int,
        pub __nusers: ::std::os::raw::c_uint,
        pub __kind: ::std::os::raw::c_int,
        pub __spins: ::std::os::raw::c_short,
        pub __elision: ::std::os::raw::c_short,
        pub __list: __pthread_list_t,
    }
    #[test]
    fn bindgen_test_layout___pthread_mutex_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_mutex_s>(),
            40usize,
            concat!("Size of: ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_mutex_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_mutex_s))
        );
        fn test_field___lock() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__lock)
                )
            );
        }
        test_field___lock();
        fn test_field___count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__count)
                )
            );
        }
        test_field___count();
        fn test_field___owner() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__owner)
                )
            );
        }
        test_field___owner();
        fn test_field___nusers() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__nusers)
                )
            );
        }
        test_field___nusers();
        fn test_field___kind() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__kind)
                )
            );
        }
        test_field___kind();
        fn test_field___spins() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__spins)
                )
            );
        }
        test_field___spins();
        fn test_field___elision() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize
                },
                22usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__elision)
                )
            );
        }
        test_field___elision();
        fn test_field___list() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_mutex_s),
                    "::",
                    stringify!(__list)
                )
            );
        }
        test_field___list();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::std::os::raw::c_uint,
        pub __writers: ::std::os::raw::c_uint,
        pub __wrphase_futex: ::std::os::raw::c_uint,
        pub __writers_futex: ::std::os::raw::c_uint,
        pub __pad3: ::std::os::raw::c_uint,
        pub __pad4: ::std::os::raw::c_uint,
        pub __cur_writer: ::std::os::raw::c_int,
        pub __shared: ::std::os::raw::c_int,
        pub __rwelision: ::std::os::raw::c_schar,
        pub __pad1: [::std::os::raw::c_uchar; 7usize],
        pub __pad2: ::std::os::raw::c_ulong,
        pub __flags: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_rwlock_arch_t() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
            56usize,
            concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
        );
        fn test_field___readers() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__readers)
                )
            );
        }
        test_field___readers();
        fn test_field___writers() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__writers)
                )
            );
        }
        test_field___writers();
        fn test_field___wrphase_futex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__wrphase_futex)
                )
            );
        }
        test_field___wrphase_futex();
        fn test_field___writers_futex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__writers_futex)
                )
            );
        }
        test_field___writers_futex();
        fn test_field___pad3() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__pad3)
                )
            );
        }
        test_field___pad3();
        fn test_field___pad4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__pad4)
                )
            );
        }
        test_field___pad4();
        fn test_field___cur_writer() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__cur_writer)
                )
            );
        }
        test_field___cur_writer();
        fn test_field___shared() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__shared)
                )
            );
        }
        test_field___shared();
        fn test_field___rwelision() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__rwelision)
                )
            );
        }
        test_field___rwelision();
        fn test_field___pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize
                },
                33usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__pad1)
                )
            );
        }
        test_field___pad1();
        fn test_field___pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__pad2)
                )
            );
        }
        test_field___pad2();
        fn test_field___flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_rwlock_arch_t),
                    "::",
                    stringify!(__flags)
                )
            );
        }
        test_field___flags();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
        pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
        pub __g_refs: [::std::os::raw::c_uint; 2usize],
        pub __g_size: [::std::os::raw::c_uint; 2usize],
        pub __g1_orig_size: ::std::os::raw::c_uint,
        pub __wrefs: ::std::os::raw::c_uint,
        pub __g_signals: [::std::os::raw::c_uint; 2usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_1 {
        pub __wseq: ::std::os::raw::c_ulonglong,
        pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field___low() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(__low)
                )
            );
        }
        test_field___low();
        fn test_field___high() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(__high)
                )
            );
        }
        test_field___high();
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        fn test_field___wseq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s__bindgen_ty_1),
                    "::",
                    stringify!(__wseq)
                )
            );
        }
        test_field___wseq();
        fn test_field___wseq32() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__wseq32) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s__bindgen_ty_1),
                    "::",
                    stringify!(__wseq32)
                )
            );
        }
        test_field___wseq32();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_2 {
        pub __g1_start: ::std::os::raw::c_ulonglong,
        pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        fn test_field___low() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                    "::",
                    stringify!(__low)
                )
            );
        }
        test_field___low();
        fn test_field___high() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                    "::",
                    stringify!(__high)
                )
            );
        }
        test_field___high();
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        fn test_field___g1_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s__bindgen_ty_2),
                    "::",
                    stringify!(__g1_start)
                )
            );
        }
        test_field___g1_start();
        fn test_field___g1_start32() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g1_start32) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s__bindgen_ty_2),
                    "::",
                    stringify!(__g1_start32)
                )
            );
        }
        test_field___g1_start32();
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s>(),
            48usize,
            concat!("Size of: ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s))
        );
        fn test_field___g_refs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__g_refs)
                )
            );
        }
        test_field___g_refs();
        fn test_field___g_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__g_size)
                )
            );
        }
        test_field___g_size();
        fn test_field___g1_orig_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__g1_orig_size)
                )
            );
        }
        test_field___g1_orig_size();
        fn test_field___wrefs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__wrefs)
                )
            );
        }
        test_field___wrefs();
        fn test_field___g_signals() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__pthread_cond_s),
                    "::",
                    stringify!(__g_signals)
                )
            );
        }
        test_field___g_signals();
    }
    pub type pthread_t = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutexattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_mutexattr_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_mutexattr_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_mutexattr_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_pthread_condattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_condattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_condattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_condattr_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_condattr_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_condattr_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    pub type pthread_key_t = ::std::os::raw::c_uint;
    pub type pthread_once_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_attr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_attr_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_attr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_attr_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_attr_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_attr_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: __pthread_mutex_s,
        pub __size: [::std::os::raw::c_char; 40usize],
        pub __align: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutex_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutex_t>(),
            40usize,
            concat!("Size of: ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutex_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_mutex_t))
        );
        fn test_field___data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_mutex_t),
                    "::",
                    stringify!(__data)
                )
            );
        }
        test_field___data();
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_mutex_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_mutex_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: __pthread_cond_s,
        pub __size: [::std::os::raw::c_char; 48usize],
        pub __align: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_pthread_cond_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_cond_t>(),
            48usize,
            concat!("Size of: ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_cond_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_cond_t))
        );
        fn test_field___data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_cond_t),
                    "::",
                    stringify!(__data)
                )
            );
        }
        test_field___data();
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_cond_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_cond_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: __pthread_rwlock_arch_t,
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlock_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlock_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlock_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlock_t))
        );
        fn test_field___data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_rwlock_t),
                    "::",
                    stringify!(__data)
                )
            );
        }
        test_field___data();
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_rwlock_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_rwlock_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::std::os::raw::c_char; 8usize],
        pub __align: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlockattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Size of: ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_rwlockattr_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_rwlockattr_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    pub type pthread_spinlock_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::std::os::raw::c_char; 32usize],
        pub __align: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrier_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrier_t>(),
            32usize,
            concat!("Size of: ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrier_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_barrier_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_barrier_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_barrier_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrierattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_barrierattr_t))
        );
        fn test_field___size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_barrierattr_t),
                    "::",
                    stringify!(__size)
                )
            );
        }
        test_field___size();
        fn test_field___align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(pthread_barrierattr_t),
                    "::",
                    stringify!(__align)
                )
            );
        }
        test_field___align();
    }
    pub const __socket_type_SOCK_STREAM: __socket_type = 1;
    pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
    pub const __socket_type_SOCK_RAW: __socket_type = 3;
    pub const __socket_type_SOCK_RDM: __socket_type = 4;
    pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
    pub const __socket_type_SOCK_DCCP: __socket_type = 6;
    pub const __socket_type_SOCK_PACKET: __socket_type = 10;
    pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
    pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
    pub type __socket_type = ::std::os::raw::c_uint;
    pub type sa_family_t = ::std::os::raw::c_ushort;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sockaddr {
        pub sa_family: sa_family_t,
        pub sa_data: [::std::os::raw::c_char; 14usize],
    }
    #[test]
    fn bindgen_test_layout_sockaddr() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr>(),
            16usize,
            concat!("Size of: ", stringify!(sockaddr))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr>(),
            2usize,
            concat!("Alignment of ", stringify!(sockaddr))
        );
        fn test_field_sa_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<sockaddr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sockaddr),
                    "::",
                    stringify!(sa_family)
                )
            );
        }
        test_field_sa_family();
        fn test_field_sa_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<sockaddr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sockaddr),
                    "::",
                    stringify!(sa_data)
                )
            );
        }
        test_field_sa_data();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sockaddr_storage {
        pub ss_family: sa_family_t,
        pub __ss_padding: [::std::os::raw::c_char; 118usize],
        pub __ss_align: ::std::os::raw::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_sockaddr_storage() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr_storage>(),
            128usize,
            concat!("Size of: ", stringify!(sockaddr_storage))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr_storage>(),
            8usize,
            concat!("Alignment of ", stringify!(sockaddr_storage))
        );
        fn test_field_ss_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<sockaddr_storage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sockaddr_storage),
                    "::",
                    stringify!(ss_family)
                )
            );
        }
        test_field_ss_family();
        fn test_field___ss_padding() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<sockaddr_storage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__ss_padding) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sockaddr_storage),
                    "::",
                    stringify!(__ss_padding)
                )
            );
        }
        test_field___ss_padding();
        fn test_field___ss_align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<sockaddr_storage>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(sockaddr_storage),
                    "::",
                    stringify!(__ss_align)
                )
            );
        }
        test_field___ss_align();
    }
    pub const MSG_OOB: _bindgen_ty_43 = 1;
    pub const MSG_PEEK: _bindgen_ty_43 = 2;
    pub const MSG_DONTROUTE: _bindgen_ty_43 = 4;
    pub const MSG_CTRUNC: _bindgen_ty_43 = 8;
    pub const MSG_PROXY: _bindgen_ty_43 = 16;
    pub const MSG_TRUNC: _bindgen_ty_43 = 32;
    pub const MSG_DONTWAIT: _bindgen_ty_43 = 64;
    pub const MSG_EOR: _bindgen_ty_43 = 128;
    pub const MSG_WAITALL: _bindgen_ty_43 = 256;
    pub const MSG_FIN: _bindgen_ty_43 = 512;
    pub const MSG_SYN: _bindgen_ty_43 = 1024;
    pub const MSG_CONFIRM: _bindgen_ty_43 = 2048;
    pub const MSG_RST: _bindgen_ty_43 = 4096;
    pub const MSG_ERRQUEUE: _bindgen_ty_43 = 8192;
    pub const MSG_NOSIGNAL: _bindgen_ty_43 = 16384;
    pub const MSG_MORE: _bindgen_ty_43 = 32768;
    pub const MSG_WAITFORONE: _bindgen_ty_43 = 65536;
    pub const MSG_BATCH: _bindgen_ty_43 = 262144;
    pub const MSG_ZEROCOPY: _bindgen_ty_43 = 67108864;
    pub const MSG_FASTOPEN: _bindgen_ty_43 = 536870912;
    pub const MSG_CMSG_CLOEXEC: _bindgen_ty_43 = 1073741824;
    pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct msghdr {
        pub msg_name: *mut ::std::os::raw::c_void,
        pub msg_namelen: socklen_t,
        pub msg_iov: *mut iovec,
        pub msg_iovlen: size_t,
        pub msg_control: *mut ::std::os::raw::c_void,
        pub msg_controllen: size_t,
        pub msg_flags: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_msghdr() {
        assert_eq!(
            ::std::mem::size_of::<msghdr>(),
            56usize,
            concat!("Size of: ", stringify!(msghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<msghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(msghdr))
        );
        fn test_field_msg_name() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(msghdr),
                    "::",
                    stringify!(msg_name)
                )
            );
        }
        test_field_msg_name();
        fn test_field_msg_namelen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(msghdr),
                    "::",
                    stringify!(msg_namelen)
                )
            );
        }
        test_field_msg_namelen();
        fn test_field_msg_iov() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(msghdr),
                    "::",
                    stringify!(msg_iov)
                )
            );
        }
        test_field_msg_iov();
        fn test_field_msg_iovlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(msghdr),
                    "::",
                    stringify!(msg_iovlen)
                )
            );
        }
        test_field_msg_iovlen();
        fn test_field_msg_control() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(msghdr),
                    "::",
                    stringify!(msg_control)
                )
            );
        }
        test_field_msg_control();
        fn test_field_msg_controllen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(msghdr),
                    "::",
                    stringify!(msg_controllen)
                )
            );
        }
        test_field_msg_controllen();
        fn test_field_msg_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(msghdr),
                    "::",
                    stringify!(msg_flags)
                )
            );
        }
        test_field_msg_flags();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct cmsghdr {
        pub cmsg_len: size_t,
        pub cmsg_level: ::std::os::raw::c_int,
        pub cmsg_type: ::std::os::raw::c_int,
        pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
    }
    #[test]
    fn bindgen_test_layout_cmsghdr() {
        assert_eq!(
            ::std::mem::size_of::<cmsghdr>(),
            16usize,
            concat!("Size of: ", stringify!(cmsghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<cmsghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(cmsghdr))
        );
        fn test_field_cmsg_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<cmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(cmsghdr),
                    "::",
                    stringify!(cmsg_len)
                )
            );
        }
        test_field_cmsg_len();
        fn test_field_cmsg_level() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<cmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(cmsghdr),
                    "::",
                    stringify!(cmsg_level)
                )
            );
        }
        test_field_cmsg_level();
        fn test_field_cmsg_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<cmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(cmsghdr),
                    "::",
                    stringify!(cmsg_type)
                )
            );
        }
        test_field_cmsg_type();
        fn test_field___cmsg_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<cmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__cmsg_data) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(cmsghdr),
                    "::",
                    stringify!(__cmsg_data)
                )
            );
        }
        test_field___cmsg_data();
    }
    extern "C" {
        pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
    }
    pub const SCM_RIGHTS: _bindgen_ty_44 = 1;
    pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __kernel_fd_set {
        pub fds_bits: [::std::os::raw::c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___kernel_fd_set() {
        assert_eq!(
            ::std::mem::size_of::<__kernel_fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(__kernel_fd_set))
        );
        assert_eq!(
            ::std::mem::align_of::<__kernel_fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(__kernel_fd_set))
        );
        fn test_field_fds_bits() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__kernel_fd_set>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__kernel_fd_set),
                    "::",
                    stringify!(fds_bits)
                )
            );
        }
        test_field_fds_bits();
    }
    pub type __kernel_sighandler_t =
        ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
    pub type __kernel_key_t = ::std::os::raw::c_int;
    pub type __kernel_mqd_t = ::std::os::raw::c_int;
    pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
    pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
    pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
    pub type __kernel_long_t = ::std::os::raw::c_long;
    pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
    pub type __kernel_ino_t = __kernel_ulong_t;
    pub type __kernel_mode_t = ::std::os::raw::c_uint;
    pub type __kernel_pid_t = ::std::os::raw::c_int;
    pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
    pub type __kernel_uid_t = ::std::os::raw::c_uint;
    pub type __kernel_gid_t = ::std::os::raw::c_uint;
    pub type __kernel_suseconds_t = __kernel_long_t;
    pub type __kernel_daddr_t = ::std::os::raw::c_int;
    pub type __kernel_uid32_t = ::std::os::raw::c_uint;
    pub type __kernel_gid32_t = ::std::os::raw::c_uint;
    pub type __kernel_size_t = __kernel_ulong_t;
    pub type __kernel_ssize_t = __kernel_long_t;
    pub type __kernel_ptrdiff_t = __kernel_long_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __kernel_fsid_t {
        pub val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___kernel_fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__kernel_fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__kernel_fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__kernel_fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__kernel_fsid_t))
        );
        fn test_field_val() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<__kernel_fsid_t>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__kernel_fsid_t),
                    "::",
                    stringify!(val)
                )
            );
        }
        test_field_val();
    }
    pub type __kernel_off_t = __kernel_long_t;
    pub type __kernel_loff_t = ::std::os::raw::c_longlong;
    pub type __kernel_time_t = __kernel_long_t;
    pub type __kernel_time64_t = ::std::os::raw::c_longlong;
    pub type __kernel_clock_t = __kernel_long_t;
    pub type __kernel_timer_t = ::std::os::raw::c_int;
    pub type __kernel_clockid_t = ::std::os::raw::c_int;
    pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
    pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
    pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct linger {
        pub l_onoff: ::std::os::raw::c_int,
        pub l_linger: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_linger() {
        assert_eq!(
            ::std::mem::size_of::<linger>(),
            8usize,
            concat!("Size of: ", stringify!(linger))
        );
        assert_eq!(
            ::std::mem::align_of::<linger>(),
            4usize,
            concat!("Alignment of ", stringify!(linger))
        );
        fn test_field_l_onoff() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<linger>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_onoff) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(linger),
                    "::",
                    stringify!(l_onoff)
                )
            );
        }
        test_field_l_onoff();
        fn test_field_l_linger() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<linger>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).l_linger) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(linger),
                    "::",
                    stringify!(l_linger)
                )
            );
        }
        test_field_l_linger();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct osockaddr {
        pub sa_family: ::std::os::raw::c_ushort,
        pub sa_data: [::std::os::raw::c_uchar; 14usize],
    }
    #[test]
    fn bindgen_test_layout_osockaddr() {
        assert_eq!(
            ::std::mem::size_of::<osockaddr>(),
            16usize,
            concat!("Size of: ", stringify!(osockaddr))
        );
        assert_eq!(
            ::std::mem::align_of::<osockaddr>(),
            2usize,
            concat!("Alignment of ", stringify!(osockaddr))
        );
        fn test_field_sa_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<osockaddr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(osockaddr),
                    "::",
                    stringify!(sa_family)
                )
            );
        }
        test_field_sa_family();
        fn test_field_sa_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<osockaddr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(osockaddr),
                    "::",
                    stringify!(sa_data)
                )
            );
        }
        test_field_sa_data();
    }
    pub const SHUT_RD: _bindgen_ty_45 = 0;
    pub const SHUT_WR: _bindgen_ty_45 = 1;
    pub const SHUT_RDWR: _bindgen_ty_45 = 2;
    pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
    extern "C" {
        pub fn socket(
            __domain: ::std::os::raw::c_int,
            __type: ::std::os::raw::c_int,
            __protocol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn socketpair(
            __domain: ::std::os::raw::c_int,
            __type: ::std::os::raw::c_int,
            __protocol: ::std::os::raw::c_int,
            __fds: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn bind(
            __fd: ::std::os::raw::c_int,
            __addr: *const sockaddr,
            __len: socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getsockname(
            __fd: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __len: *mut socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn connect(
            __fd: ::std::os::raw::c_int,
            __addr: *const sockaddr,
            __len: socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getpeername(
            __fd: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __len: *mut socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn send(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: size_t,
            __flags: ::std::os::raw::c_int,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn recv(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __n: size_t,
            __flags: ::std::os::raw::c_int,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn sendto(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: size_t,
            __flags: ::std::os::raw::c_int,
            __addr: *const sockaddr,
            __addr_len: socklen_t,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn recvfrom(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __n: size_t,
            __flags: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __addr_len: *mut socklen_t,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn sendmsg(
            __fd: ::std::os::raw::c_int,
            __message: *const msghdr,
            __flags: ::std::os::raw::c_int,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn recvmsg(
            __fd: ::std::os::raw::c_int,
            __message: *mut msghdr,
            __flags: ::std::os::raw::c_int,
        ) -> ssize_t;
    }
    extern "C" {
        pub fn getsockopt(
            __fd: ::std::os::raw::c_int,
            __level: ::std::os::raw::c_int,
            __optname: ::std::os::raw::c_int,
            __optval: *mut ::std::os::raw::c_void,
            __optlen: *mut socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setsockopt(
            __fd: ::std::os::raw::c_int,
            __level: ::std::os::raw::c_int,
            __optname: ::std::os::raw::c_int,
            __optval: *const ::std::os::raw::c_void,
            __optlen: socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn accept(
            __fd: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __addr_len: *mut socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn shutdown(
            __fd: ::std::os::raw::c_int,
            __how: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isfdtype(
            __fd: ::std::os::raw::c_int,
            __fdtype: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_sync_serial_settings {
        pub clock_rate: ::std::os::raw::c_uint,
        pub clock_type: ::std::os::raw::c_uint,
        pub loopback: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_lkl_sync_serial_settings() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sync_serial_settings>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_sync_serial_settings))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sync_serial_settings>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_sync_serial_settings))
        );
        fn test_field_clock_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sync_serial_settings>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).clock_rate) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sync_serial_settings),
                    "::",
                    stringify!(clock_rate)
                )
            );
        }
        test_field_clock_rate();
        fn test_field_clock_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sync_serial_settings>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).clock_type) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sync_serial_settings),
                    "::",
                    stringify!(clock_type)
                )
            );
        }
        test_field_clock_type();
        fn test_field_loopback() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sync_serial_settings>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).loopback) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sync_serial_settings),
                    "::",
                    stringify!(loopback)
                )
            );
        }
        test_field_loopback();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_te1_settings {
        pub clock_rate: ::std::os::raw::c_uint,
        pub clock_type: ::std::os::raw::c_uint,
        pub loopback: ::std::os::raw::c_ushort,
        pub slot_map: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_te1_settings() {
        assert_eq!(
            ::std::mem::size_of::<lkl_te1_settings>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_te1_settings))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_te1_settings>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_te1_settings))
        );
        fn test_field_clock_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_te1_settings>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).clock_rate) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_te1_settings),
                    "::",
                    stringify!(clock_rate)
                )
            );
        }
        test_field_clock_rate();
        fn test_field_clock_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_te1_settings>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).clock_type) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_te1_settings),
                    "::",
                    stringify!(clock_type)
                )
            );
        }
        test_field_clock_type();
        fn test_field_loopback() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_te1_settings>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).loopback) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_te1_settings),
                    "::",
                    stringify!(loopback)
                )
            );
        }
        test_field_loopback();
        fn test_field_slot_map() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_te1_settings>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).slot_map) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_te1_settings),
                    "::",
                    stringify!(slot_map)
                )
            );
        }
        test_field_slot_map();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_raw_hdlc_proto {
        pub encoding: ::std::os::raw::c_ushort,
        pub parity: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_lkl_raw_hdlc_proto() {
        assert_eq!(
            ::std::mem::size_of::<lkl_raw_hdlc_proto>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_raw_hdlc_proto))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_raw_hdlc_proto>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_raw_hdlc_proto))
        );
        fn test_field_encoding() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_raw_hdlc_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).encoding) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_raw_hdlc_proto),
                    "::",
                    stringify!(encoding)
                )
            );
        }
        test_field_encoding();
        fn test_field_parity() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_raw_hdlc_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).parity) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_raw_hdlc_proto),
                    "::",
                    stringify!(parity)
                )
            );
        }
        test_field_parity();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fr_proto {
        pub t391: ::std::os::raw::c_uint,
        pub t392: ::std::os::raw::c_uint,
        pub n391: ::std::os::raw::c_uint,
        pub n392: ::std::os::raw::c_uint,
        pub n393: ::std::os::raw::c_uint,
        pub lmi: ::std::os::raw::c_ushort,
        pub dce: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_lkl_fr_proto() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fr_proto>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_fr_proto))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fr_proto>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fr_proto))
        );
        fn test_field_t391() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fr_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).t391) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fr_proto),
                    "::",
                    stringify!(t391)
                )
            );
        }
        test_field_t391();
        fn test_field_t392() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fr_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).t392) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fr_proto),
                    "::",
                    stringify!(t392)
                )
            );
        }
        test_field_t392();
        fn test_field_n391() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fr_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).n391) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fr_proto),
                    "::",
                    stringify!(n391)
                )
            );
        }
        test_field_n391();
        fn test_field_n392() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fr_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).n392) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fr_proto),
                    "::",
                    stringify!(n392)
                )
            );
        }
        test_field_n392();
        fn test_field_n393() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fr_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).n393) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fr_proto),
                    "::",
                    stringify!(n393)
                )
            );
        }
        test_field_n393();
        fn test_field_lmi() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fr_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lmi) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fr_proto),
                    "::",
                    stringify!(lmi)
                )
            );
        }
        test_field_lmi();
        fn test_field_dce() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fr_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dce) as usize - ptr as usize
                },
                22usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fr_proto),
                    "::",
                    stringify!(dce)
                )
            );
        }
        test_field_dce();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fr_proto_pvc {
        pub dlci: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_fr_proto_pvc() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fr_proto_pvc>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_fr_proto_pvc))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fr_proto_pvc>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fr_proto_pvc))
        );
        fn test_field_dlci() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fr_proto_pvc>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dlci) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fr_proto_pvc),
                    "::",
                    stringify!(dlci)
                )
            );
        }
        test_field_dlci();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fr_proto_pvc_info {
        pub dlci: ::std::os::raw::c_uint,
        pub master: [::std::os::raw::c_char; 16usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_fr_proto_pvc_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fr_proto_pvc_info>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_fr_proto_pvc_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fr_proto_pvc_info>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fr_proto_pvc_info))
        );
        fn test_field_dlci() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fr_proto_pvc_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dlci) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fr_proto_pvc_info),
                    "::",
                    stringify!(dlci)
                )
            );
        }
        test_field_dlci();
        fn test_field_master() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fr_proto_pvc_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).master) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fr_proto_pvc_info),
                    "::",
                    stringify!(master)
                )
            );
        }
        test_field_master();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_cisco_proto {
        pub interval: ::std::os::raw::c_uint,
        pub timeout: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_cisco_proto() {
        assert_eq!(
            ::std::mem::size_of::<lkl_cisco_proto>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_cisco_proto))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_cisco_proto>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_cisco_proto))
        );
        fn test_field_interval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_cisco_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_cisco_proto),
                    "::",
                    stringify!(interval)
                )
            );
        }
        test_field_interval();
        fn test_field_timeout() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_cisco_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_cisco_proto),
                    "::",
                    stringify!(timeout)
                )
            );
        }
        test_field_timeout();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_x25_hdlc_proto {
        pub dce: ::std::os::raw::c_ushort,
        pub modulo: ::std::os::raw::c_uint,
        pub window: ::std::os::raw::c_uint,
        pub t1: ::std::os::raw::c_uint,
        pub t2: ::std::os::raw::c_uint,
        pub n2: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_x25_hdlc_proto() {
        assert_eq!(
            ::std::mem::size_of::<lkl_x25_hdlc_proto>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_x25_hdlc_proto))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_x25_hdlc_proto>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_x25_hdlc_proto))
        );
        fn test_field_dce() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_x25_hdlc_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dce) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_x25_hdlc_proto),
                    "::",
                    stringify!(dce)
                )
            );
        }
        test_field_dce();
        fn test_field_modulo() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_x25_hdlc_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).modulo) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_x25_hdlc_proto),
                    "::",
                    stringify!(modulo)
                )
            );
        }
        test_field_modulo();
        fn test_field_window() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_x25_hdlc_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).window) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_x25_hdlc_proto),
                    "::",
                    stringify!(window)
                )
            );
        }
        test_field_window();
        fn test_field_t1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_x25_hdlc_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).t1) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_x25_hdlc_proto),
                    "::",
                    stringify!(t1)
                )
            );
        }
        test_field_t1();
        fn test_field_t2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_x25_hdlc_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).t2) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_x25_hdlc_proto),
                    "::",
                    stringify!(t2)
                )
            );
        }
        test_field_t2();
        fn test_field_n2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_x25_hdlc_proto>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).n2) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_x25_hdlc_proto),
                    "::",
                    stringify!(n2)
                )
            );
        }
        test_field_n2();
    }
    pub const lkl_net_device_flags_LKL_IFF_UP: lkl_net_device_flags = 1;
    pub const lkl_net_device_flags_LKL_IFF_BROADCAST: lkl_net_device_flags = 2;
    pub const lkl_net_device_flags_LKL_IFF_DEBUG: lkl_net_device_flags = 4;
    pub const lkl_net_device_flags_LKL_IFF_LOOPBACK: lkl_net_device_flags = 8;
    pub const lkl_net_device_flags_LKL_IFF_POINTOPOINT: lkl_net_device_flags = 16;
    pub const lkl_net_device_flags_LKL_IFF_NOTRAILERS: lkl_net_device_flags = 32;
    pub const lkl_net_device_flags_LKL_IFF_RUNNING: lkl_net_device_flags = 64;
    pub const lkl_net_device_flags_LKL_IFF_NOARP: lkl_net_device_flags = 128;
    pub const lkl_net_device_flags_LKL_IFF_PROMISC: lkl_net_device_flags = 256;
    pub const lkl_net_device_flags_LKL_IFF_ALLMULTI: lkl_net_device_flags = 512;
    pub const lkl_net_device_flags_LKL_IFF_MASTER: lkl_net_device_flags = 1024;
    pub const lkl_net_device_flags_LKL_IFF_SLAVE: lkl_net_device_flags = 2048;
    pub const lkl_net_device_flags_LKL_IFF_MULTICAST: lkl_net_device_flags = 4096;
    pub const lkl_net_device_flags_LKL_IFF_PORTSEL: lkl_net_device_flags = 8192;
    pub const lkl_net_device_flags_LKL_IFF_AUTOMEDIA: lkl_net_device_flags = 16384;
    pub const lkl_net_device_flags_LKL_IFF_DYNAMIC: lkl_net_device_flags = 32768;
    pub const lkl_net_device_flags_LKL_IFF_LOWER_UP: lkl_net_device_flags = 65536;
    pub const lkl_net_device_flags_LKL_IFF_DORMANT: lkl_net_device_flags = 131072;
    pub const lkl_net_device_flags_LKL_IFF_ECHO: lkl_net_device_flags = 262144;
    pub type lkl_net_device_flags = ::std::os::raw::c_uint;
    pub const LKL_IF_OPER_UNKNOWN: _bindgen_ty_46 = 0;
    pub const LKL_IF_OPER_NOTPRESENT: _bindgen_ty_46 = 1;
    pub const LKL_IF_OPER_DOWN: _bindgen_ty_46 = 2;
    pub const LKL_IF_OPER_LOWERLAYERDOWN: _bindgen_ty_46 = 3;
    pub const LKL_IF_OPER_TESTING: _bindgen_ty_46 = 4;
    pub const LKL_IF_OPER_DORMANT: _bindgen_ty_46 = 5;
    pub const LKL_IF_OPER_UP: _bindgen_ty_46 = 6;
    pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
    pub const LKL_IF_LINK_MODE_DEFAULT: _bindgen_ty_47 = 0;
    pub const LKL_IF_LINK_MODE_DORMANT: _bindgen_ty_47 = 1;
    pub const LKL_IF_LINK_MODE_TESTING: _bindgen_ty_47 = 2;
    pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifmap {
        pub mem_start: ::std::os::raw::c_ulong,
        pub mem_end: ::std::os::raw::c_ulong,
        pub base_addr: ::std::os::raw::c_ushort,
        pub irq: ::std::os::raw::c_uchar,
        pub dma: ::std::os::raw::c_uchar,
        pub port: ::std::os::raw::c_uchar,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifmap() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifmap>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_ifmap))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifmap>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_ifmap))
        );
        fn test_field_mem_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mem_start) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifmap),
                    "::",
                    stringify!(mem_start)
                )
            );
        }
        test_field_mem_start();
        fn test_field_mem_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mem_end) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifmap),
                    "::",
                    stringify!(mem_end)
                )
            );
        }
        test_field_mem_end();
        fn test_field_base_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).base_addr) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifmap),
                    "::",
                    stringify!(base_addr)
                )
            );
        }
        test_field_base_addr();
        fn test_field_irq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).irq) as usize - ptr as usize
                },
                18usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifmap),
                    "::",
                    stringify!(irq)
                )
            );
        }
        test_field_irq();
        fn test_field_dma() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dma) as usize - ptr as usize
                },
                19usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifmap),
                    "::",
                    stringify!(dma)
                )
            );
        }
        test_field_dma();
        fn test_field_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifmap),
                    "::",
                    stringify!(port)
                )
            );
        }
        test_field_port();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_if_settings {
        pub type_: ::std::os::raw::c_uint,
        pub size: ::std::os::raw::c_uint,
        pub ifs_ifsu: lkl_if_settings__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_if_settings__bindgen_ty_1 {
        pub raw_hdlc: *mut lkl_raw_hdlc_proto,
        pub cisco: *mut lkl_cisco_proto,
        pub fr: *mut lkl_fr_proto,
        pub fr_pvc: *mut lkl_fr_proto_pvc,
        pub fr_pvc_info: *mut lkl_fr_proto_pvc_info,
        pub x25: *mut lkl_x25_hdlc_proto,
        pub sync: *mut lkl_sync_serial_settings,
        pub te1: *mut lkl_te1_settings,
    }
    #[test]
    fn bindgen_test_layout_lkl_if_settings__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_if_settings__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_if_settings__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_if_settings__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_if_settings__bindgen_ty_1))
        );
        fn test_field_raw_hdlc() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).raw_hdlc) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings__bindgen_ty_1),
                    "::",
                    stringify!(raw_hdlc)
                )
            );
        }
        test_field_raw_hdlc();
        fn test_field_cisco() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cisco) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings__bindgen_ty_1),
                    "::",
                    stringify!(cisco)
                )
            );
        }
        test_field_cisco();
        fn test_field_fr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings__bindgen_ty_1),
                    "::",
                    stringify!(fr)
                )
            );
        }
        test_field_fr();
        fn test_field_fr_pvc() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fr_pvc) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings__bindgen_ty_1),
                    "::",
                    stringify!(fr_pvc)
                )
            );
        }
        test_field_fr_pvc();
        fn test_field_fr_pvc_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fr_pvc_info) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings__bindgen_ty_1),
                    "::",
                    stringify!(fr_pvc_info)
                )
            );
        }
        test_field_fr_pvc_info();
        fn test_field_x25() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).x25) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings__bindgen_ty_1),
                    "::",
                    stringify!(x25)
                )
            );
        }
        test_field_x25();
        fn test_field_sync() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings__bindgen_ty_1),
                    "::",
                    stringify!(sync)
                )
            );
        }
        test_field_sync();
        fn test_field_te1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).te1) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings__bindgen_ty_1),
                    "::",
                    stringify!(te1)
                )
            );
        }
        test_field_te1();
    }
    #[test]
    fn bindgen_test_layout_lkl_if_settings() {
        assert_eq!(
            ::std::mem::size_of::<lkl_if_settings>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_if_settings))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_if_settings>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_if_settings))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings),
                    "::",
                    stringify!(size)
                )
            );
        }
        test_field_size();
        fn test_field_ifs_ifsu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_settings>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifs_ifsu) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_settings),
                    "::",
                    stringify!(ifs_ifsu)
                )
            );
        }
        test_field_ifs_ifsu();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_ifreq {
        pub ifr_ifrn: lkl_ifreq__bindgen_ty_1,
        pub ifr_ifru: lkl_ifreq__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_ifreq__bindgen_ty_1 {
        pub ifrn_name: [::std::os::raw::c_char; 16usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_ifreq__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifreq__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_ifreq__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifreq__bindgen_ty_1>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_ifreq__bindgen_ty_1))
        );
        fn test_field_ifrn_name() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifrn_name) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_1),
                    "::",
                    stringify!(ifrn_name)
                )
            );
        }
        test_field_ifrn_name();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_ifreq__bindgen_ty_2 {
        pub ifru_addr: lkl_sockaddr,
        pub ifru_dstaddr: lkl_sockaddr,
        pub ifru_broadaddr: lkl_sockaddr,
        pub ifru_netmask: lkl_sockaddr,
        pub ifru_hwaddr: lkl_sockaddr,
        pub ifru_flags: ::std::os::raw::c_short,
        pub ifru_ivalue: ::std::os::raw::c_int,
        pub ifru_mtu: ::std::os::raw::c_int,
        pub ifru_map: lkl_ifmap,
        pub ifru_slave: [::std::os::raw::c_char; 16usize],
        pub ifru_newname: [::std::os::raw::c_char; 16usize],
        pub ifru_data: *mut ::std::os::raw::c_void,
        pub ifru_settings: lkl_if_settings,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifreq__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifreq__bindgen_ty_2>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_ifreq__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifreq__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_ifreq__bindgen_ty_2))
        );
        fn test_field_ifru_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_addr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_addr)
                )
            );
        }
        test_field_ifru_addr();
        fn test_field_ifru_dstaddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_dstaddr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_dstaddr)
                )
            );
        }
        test_field_ifru_dstaddr();
        fn test_field_ifru_broadaddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_broadaddr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_broadaddr)
                )
            );
        }
        test_field_ifru_broadaddr();
        fn test_field_ifru_netmask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_netmask) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_netmask)
                )
            );
        }
        test_field_ifru_netmask();
        fn test_field_ifru_hwaddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_hwaddr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_hwaddr)
                )
            );
        }
        test_field_ifru_hwaddr();
        fn test_field_ifru_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_flags)
                )
            );
        }
        test_field_ifru_flags();
        fn test_field_ifru_ivalue() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_ivalue) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_ivalue)
                )
            );
        }
        test_field_ifru_ivalue();
        fn test_field_ifru_mtu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_mtu) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_mtu)
                )
            );
        }
        test_field_ifru_mtu();
        fn test_field_ifru_map() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_map) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_map)
                )
            );
        }
        test_field_ifru_map();
        fn test_field_ifru_slave() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_slave) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_slave)
                )
            );
        }
        test_field_ifru_slave();
        fn test_field_ifru_newname() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_newname) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_newname)
                )
            );
        }
        test_field_ifru_newname();
        fn test_field_ifru_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_data)
                )
            );
        }
        test_field_ifru_data();
        fn test_field_ifru_settings() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifru_settings) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq__bindgen_ty_2),
                    "::",
                    stringify!(ifru_settings)
                )
            );
        }
        test_field_ifru_settings();
    }
    #[test]
    fn bindgen_test_layout_lkl_ifreq() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifreq>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_ifreq))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifreq>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_ifreq))
        );
        fn test_field_ifr_ifrn() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifr_ifrn) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq),
                    "::",
                    stringify!(ifr_ifrn)
                )
            );
        }
        test_field_ifr_ifrn();
        fn test_field_ifr_ifru() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifreq>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifr_ifru) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifreq),
                    "::",
                    stringify!(ifr_ifru)
                )
            );
        }
        test_field_ifr_ifru();
    }
    pub const LKL_IPPROTO_IP: _bindgen_ty_48 = 0;
    pub const LKL_IPPROTO_ICMP: _bindgen_ty_48 = 1;
    pub const LKL_IPPROTO_IGMP: _bindgen_ty_48 = 2;
    pub const LKL_IPPROTO_IPIP: _bindgen_ty_48 = 4;
    pub const LKL_IPPROTO_TCP: _bindgen_ty_48 = 6;
    pub const LKL_IPPROTO_EGP: _bindgen_ty_48 = 8;
    pub const LKL_IPPROTO_PUP: _bindgen_ty_48 = 12;
    pub const LKL_IPPROTO_UDP: _bindgen_ty_48 = 17;
    pub const LKL_IPPROTO_IDP: _bindgen_ty_48 = 22;
    pub const LKL_IPPROTO_TP: _bindgen_ty_48 = 29;
    pub const LKL_IPPROTO_DCCP: _bindgen_ty_48 = 33;
    pub const LKL_IPPROTO_IPV6: _bindgen_ty_48 = 41;
    pub const LKL_IPPROTO_RSVP: _bindgen_ty_48 = 46;
    pub const LKL_IPPROTO_GRE: _bindgen_ty_48 = 47;
    pub const LKL_IPPROTO_ESP: _bindgen_ty_48 = 50;
    pub const LKL_IPPROTO_AH: _bindgen_ty_48 = 51;
    pub const LKL_IPPROTO_MTP: _bindgen_ty_48 = 92;
    pub const LKL_IPPROTO_BEETPH: _bindgen_ty_48 = 94;
    pub const LKL_IPPROTO_ENCAP: _bindgen_ty_48 = 98;
    pub const LKL_IPPROTO_PIM: _bindgen_ty_48 = 103;
    pub const LKL_IPPROTO_COMP: _bindgen_ty_48 = 108;
    pub const LKL_IPPROTO_SCTP: _bindgen_ty_48 = 132;
    pub const LKL_IPPROTO_UDPLITE: _bindgen_ty_48 = 136;
    pub const LKL_IPPROTO_MPLS: _bindgen_ty_48 = 137;
    pub const LKL_IPPROTO_ETHERNET: _bindgen_ty_48 = 143;
    pub const LKL_IPPROTO_RAW: _bindgen_ty_48 = 255;
    pub const LKL_IPPROTO_MPTCP: _bindgen_ty_48 = 262;
    pub const LKL_IPPROTO_MAX: _bindgen_ty_48 = 263;
    pub type _bindgen_ty_48 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_in_addr {
        pub lkl_s_addr: __lkl__be32,
    }
    #[test]
    fn bindgen_test_layout_lkl_in_addr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_in_addr>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_in_addr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_in_addr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_in_addr))
        );
        fn test_field_lkl_s_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lkl_s_addr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in_addr),
                    "::",
                    stringify!(lkl_s_addr)
                )
            );
        }
        test_field_lkl_s_addr();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ip_mreq {
        pub imr_multiaddr: lkl_in_addr,
        pub imr_interface: lkl_in_addr,
    }
    #[test]
    fn bindgen_test_layout_lkl_ip_mreq() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ip_mreq>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ip_mreq))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ip_mreq>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ip_mreq))
        );
        fn test_field_imr_multiaddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_mreq>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_mreq),
                    "::",
                    stringify!(imr_multiaddr)
                )
            );
        }
        test_field_imr_multiaddr();
        fn test_field_imr_interface() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_mreq>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_mreq),
                    "::",
                    stringify!(imr_interface)
                )
            );
        }
        test_field_imr_interface();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ip_mreqn {
        pub imr_multiaddr: lkl_in_addr,
        pub imr_address: lkl_in_addr,
        pub imr_ifindex: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_lkl_ip_mreqn() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ip_mreqn>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_ip_mreqn))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ip_mreqn>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ip_mreqn))
        );
        fn test_field_imr_multiaddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_mreqn>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_mreqn),
                    "::",
                    stringify!(imr_multiaddr)
                )
            );
        }
        test_field_imr_multiaddr();
        fn test_field_imr_address() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_mreqn>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imr_address) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_mreqn),
                    "::",
                    stringify!(imr_address)
                )
            );
        }
        test_field_imr_address();
        fn test_field_imr_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_mreqn>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imr_ifindex) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_mreqn),
                    "::",
                    stringify!(imr_ifindex)
                )
            );
        }
        test_field_imr_ifindex();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ip_mreq_source {
        pub imr_multiaddr: __lkl__be32,
        pub imr_interface: __lkl__be32,
        pub imr_sourceaddr: __lkl__be32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ip_mreq_source() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ip_mreq_source>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_ip_mreq_source))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ip_mreq_source>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ip_mreq_source))
        );
        fn test_field_imr_multiaddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_mreq_source>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_mreq_source),
                    "::",
                    stringify!(imr_multiaddr)
                )
            );
        }
        test_field_imr_multiaddr();
        fn test_field_imr_interface() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_mreq_source>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_mreq_source),
                    "::",
                    stringify!(imr_interface)
                )
            );
        }
        test_field_imr_interface();
        fn test_field_imr_sourceaddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_mreq_source>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imr_sourceaddr) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_mreq_source),
                    "::",
                    stringify!(imr_sourceaddr)
                )
            );
        }
        test_field_imr_sourceaddr();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ip_msfilter {
        pub imsf_multiaddr: __lkl__be32,
        pub imsf_interface: __lkl__be32,
        pub imsf_fmode: __lkl__u32,
        pub imsf_numsrc: __lkl__u32,
        pub imsf_slist: [__lkl__be32; 1usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_ip_msfilter() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ip_msfilter>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_ip_msfilter))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ip_msfilter>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ip_msfilter))
        );
        fn test_field_imsf_multiaddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_msfilter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imsf_multiaddr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_msfilter),
                    "::",
                    stringify!(imsf_multiaddr)
                )
            );
        }
        test_field_imsf_multiaddr();
        fn test_field_imsf_interface() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_msfilter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imsf_interface) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_msfilter),
                    "::",
                    stringify!(imsf_interface)
                )
            );
        }
        test_field_imsf_interface();
        fn test_field_imsf_fmode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_msfilter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imsf_fmode) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_msfilter),
                    "::",
                    stringify!(imsf_fmode)
                )
            );
        }
        test_field_imsf_fmode();
        fn test_field_imsf_numsrc() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_msfilter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imsf_numsrc) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_msfilter),
                    "::",
                    stringify!(imsf_numsrc)
                )
            );
        }
        test_field_imsf_numsrc();
        fn test_field_imsf_slist() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ip_msfilter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).imsf_slist) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ip_msfilter),
                    "::",
                    stringify!(imsf_slist)
                )
            );
        }
        test_field_imsf_slist();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_group_req {
        pub gr_interface: __lkl__u32,
        pub gr_group: __lkl__kernel_sockaddr_storage,
    }
    #[test]
    fn bindgen_test_layout_lkl_group_req() {
        assert_eq!(
            ::std::mem::size_of::<lkl_group_req>(),
            136usize,
            concat!("Size of: ", stringify!(lkl_group_req))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_group_req>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_group_req))
        );
        fn test_field_gr_interface() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_group_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gr_interface) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_group_req),
                    "::",
                    stringify!(gr_interface)
                )
            );
        }
        test_field_gr_interface();
        fn test_field_gr_group() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_group_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gr_group) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_group_req),
                    "::",
                    stringify!(gr_group)
                )
            );
        }
        test_field_gr_group();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_group_source_req {
        pub gsr_interface: __lkl__u32,
        pub gsr_group: __lkl__kernel_sockaddr_storage,
        pub gsr_source: __lkl__kernel_sockaddr_storage,
    }
    #[test]
    fn bindgen_test_layout_lkl_group_source_req() {
        assert_eq!(
            ::std::mem::size_of::<lkl_group_source_req>(),
            264usize,
            concat!("Size of: ", stringify!(lkl_group_source_req))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_group_source_req>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_group_source_req))
        );
        fn test_field_gsr_interface() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_group_source_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gsr_interface) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_group_source_req),
                    "::",
                    stringify!(gsr_interface)
                )
            );
        }
        test_field_gsr_interface();
        fn test_field_gsr_group() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_group_source_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gsr_group) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_group_source_req),
                    "::",
                    stringify!(gsr_group)
                )
            );
        }
        test_field_gsr_group();
        fn test_field_gsr_source() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_group_source_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gsr_source) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_group_source_req),
                    "::",
                    stringify!(gsr_source)
                )
            );
        }
        test_field_gsr_source();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_group_filter {
        pub gf_interface: __lkl__u32,
        pub gf_group: __lkl__kernel_sockaddr_storage,
        pub gf_fmode: __lkl__u32,
        pub gf_numsrc: __lkl__u32,
        pub gf_slist: [__lkl__kernel_sockaddr_storage; 1usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_group_filter() {
        assert_eq!(
            ::std::mem::size_of::<lkl_group_filter>(),
            272usize,
            concat!("Size of: ", stringify!(lkl_group_filter))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_group_filter>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_group_filter))
        );
        fn test_field_gf_interface() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_group_filter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gf_interface) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_group_filter),
                    "::",
                    stringify!(gf_interface)
                )
            );
        }
        test_field_gf_interface();
        fn test_field_gf_group() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_group_filter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gf_group) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_group_filter),
                    "::",
                    stringify!(gf_group)
                )
            );
        }
        test_field_gf_group();
        fn test_field_gf_fmode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_group_filter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gf_fmode) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_group_filter),
                    "::",
                    stringify!(gf_fmode)
                )
            );
        }
        test_field_gf_fmode();
        fn test_field_gf_numsrc() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_group_filter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gf_numsrc) as usize - ptr as usize
                },
                140usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_group_filter),
                    "::",
                    stringify!(gf_numsrc)
                )
            );
        }
        test_field_gf_numsrc();
        fn test_field_gf_slist() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_group_filter>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gf_slist) as usize - ptr as usize
                },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_group_filter),
                    "::",
                    stringify!(gf_slist)
                )
            );
        }
        test_field_gf_slist();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_in_pktinfo {
        pub ipi_ifindex: ::std::os::raw::c_int,
        pub ipi_spec_dst: lkl_in_addr,
        pub ipi_addr: lkl_in_addr,
    }
    #[test]
    fn bindgen_test_layout_lkl_in_pktinfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_in_pktinfo>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_in_pktinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_in_pktinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_in_pktinfo))
        );
        fn test_field_ipi_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in_pktinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipi_ifindex) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in_pktinfo),
                    "::",
                    stringify!(ipi_ifindex)
                )
            );
        }
        test_field_ipi_ifindex();
        fn test_field_ipi_spec_dst() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in_pktinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipi_spec_dst) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in_pktinfo),
                    "::",
                    stringify!(ipi_spec_dst)
                )
            );
        }
        test_field_ipi_spec_dst();
        fn test_field_ipi_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in_pktinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ipi_addr) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in_pktinfo),
                    "::",
                    stringify!(ipi_addr)
                )
            );
        }
        test_field_ipi_addr();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_sockaddr_in {
        pub sin_family: __lkl__kernel_sa_family_t,
        pub sin_port: __lkl__be16,
        pub sin_addr: lkl_in_addr,
        pub __pad: [::std::os::raw::c_uchar; 8usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_sockaddr_in() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sockaddr_in>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_sockaddr_in))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sockaddr_in>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_sockaddr_in))
        );
        fn test_field_sin_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sockaddr_in>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sin_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sockaddr_in),
                    "::",
                    stringify!(sin_family)
                )
            );
        }
        test_field_sin_family();
        fn test_field_sin_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sockaddr_in>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sin_port) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sockaddr_in),
                    "::",
                    stringify!(sin_port)
                )
            );
        }
        test_field_sin_port();
        fn test_field_sin_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sockaddr_in>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sin_addr) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sockaddr_in),
                    "::",
                    stringify!(sin_addr)
                )
            );
        }
        test_field_sin_addr();
        fn test_field___pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sockaddr_in>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sockaddr_in),
                    "::",
                    stringify!(__pad)
                )
            );
        }
        test_field___pad();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_in6_addr {
        pub in6_u: lkl_in6_addr__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_in6_addr__bindgen_ty_1 {
        pub u6_addr8: [__lkl__u8; 16usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_in6_addr__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_in6_addr__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_in6_addr__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_in6_addr__bindgen_ty_1>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_in6_addr__bindgen_ty_1))
        );
        fn test_field_u6_addr8() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_addr__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).u6_addr8) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_addr__bindgen_ty_1),
                    "::",
                    stringify!(u6_addr8)
                )
            );
        }
        test_field_u6_addr8();
    }
    #[test]
    fn bindgen_test_layout_lkl_in6_addr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_in6_addr>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_in6_addr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_in6_addr>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_in6_addr))
        );
        fn test_field_in6_u() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_addr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).in6_u) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_addr),
                    "::",
                    stringify!(in6_u)
                )
            );
        }
        test_field_in6_u();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_in6_flowlabel_req {
        pub flr_dst: lkl_in6_addr,
        pub flr_label: __lkl__be32,
        pub flr_action: __lkl__u8,
        pub flr_share: __lkl__u8,
        pub flr_flags: __lkl__u16,
        pub flr_expires: __lkl__u16,
        pub flr_linger: __lkl__u16,
        pub __flr_pad: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_in6_flowlabel_req() {
        assert_eq!(
            ::std::mem::size_of::<lkl_in6_flowlabel_req>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_in6_flowlabel_req))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_in6_flowlabel_req>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_in6_flowlabel_req))
        );
        fn test_field_flr_dst() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_flowlabel_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flr_dst) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_flowlabel_req),
                    "::",
                    stringify!(flr_dst)
                )
            );
        }
        test_field_flr_dst();
        fn test_field_flr_label() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_flowlabel_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flr_label) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_flowlabel_req),
                    "::",
                    stringify!(flr_label)
                )
            );
        }
        test_field_flr_label();
        fn test_field_flr_action() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_flowlabel_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flr_action) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_flowlabel_req),
                    "::",
                    stringify!(flr_action)
                )
            );
        }
        test_field_flr_action();
        fn test_field_flr_share() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_flowlabel_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flr_share) as usize - ptr as usize
                },
                21usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_flowlabel_req),
                    "::",
                    stringify!(flr_share)
                )
            );
        }
        test_field_flr_share();
        fn test_field_flr_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_flowlabel_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flr_flags) as usize - ptr as usize
                },
                22usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_flowlabel_req),
                    "::",
                    stringify!(flr_flags)
                )
            );
        }
        test_field_flr_flags();
        fn test_field_flr_expires() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_flowlabel_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flr_expires) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_flowlabel_req),
                    "::",
                    stringify!(flr_expires)
                )
            );
        }
        test_field_flr_expires();
        fn test_field_flr_linger() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_flowlabel_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flr_linger) as usize - ptr as usize
                },
                26usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_flowlabel_req),
                    "::",
                    stringify!(flr_linger)
                )
            );
        }
        test_field_flr_linger();
        fn test_field___flr_pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_flowlabel_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__flr_pad) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_flowlabel_req),
                    "::",
                    stringify!(__flr_pad)
                )
            );
        }
        test_field___flr_pad();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rtentry {
        pub rt_pad1: ::std::os::raw::c_ulong,
        pub rt_dst: lkl_sockaddr,
        pub rt_gateway: lkl_sockaddr,
        pub rt_genmask: lkl_sockaddr,
        pub rt_flags: ::std::os::raw::c_ushort,
        pub rt_pad2: ::std::os::raw::c_short,
        pub rt_pad3: ::std::os::raw::c_ulong,
        pub rt_pad4: *mut ::std::os::raw::c_void,
        pub rt_metric: ::std::os::raw::c_short,
        pub rt_dev: *mut ::std::os::raw::c_char,
        pub rt_mtu: ::std::os::raw::c_ulong,
        pub rt_window: ::std::os::raw::c_ulong,
        pub rt_irtt: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_lkl_rtentry() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rtentry>(),
            120usize,
            concat!("Size of: ", stringify!(lkl_rtentry))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rtentry>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_rtentry))
        );
        fn test_field_rt_pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_pad1) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_pad1)
                )
            );
        }
        test_field_rt_pad1();
        fn test_field_rt_dst() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_dst) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_dst)
                )
            );
        }
        test_field_rt_dst();
        fn test_field_rt_gateway() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_gateway) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_gateway)
                )
            );
        }
        test_field_rt_gateway();
        fn test_field_rt_genmask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_genmask) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_genmask)
                )
            );
        }
        test_field_rt_genmask();
        fn test_field_rt_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_flags) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_flags)
                )
            );
        }
        test_field_rt_flags();
        fn test_field_rt_pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_pad2) as usize - ptr as usize
                },
                58usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_pad2)
                )
            );
        }
        test_field_rt_pad2();
        fn test_field_rt_pad3() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_pad3) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_pad3)
                )
            );
        }
        test_field_rt_pad3();
        fn test_field_rt_pad4() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_pad4) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_pad4)
                )
            );
        }
        test_field_rt_pad4();
        fn test_field_rt_metric() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_metric) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_metric)
                )
            );
        }
        test_field_rt_metric();
        fn test_field_rt_dev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_dev) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_dev)
                )
            );
        }
        test_field_rt_dev();
        fn test_field_rt_mtu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_mtu) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_mtu)
                )
            );
        }
        test_field_rt_mtu();
        fn test_field_rt_window() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_window) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_window)
                )
            );
        }
        test_field_rt_window();
        fn test_field_rt_irtt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtentry>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_irtt) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtentry),
                    "::",
                    stringify!(rt_irtt)
                )
            );
        }
        test_field_rt_irtt();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_in6_rtmsg {
        pub rtmsg_dst: lkl_in6_addr,
        pub rtmsg_src: lkl_in6_addr,
        pub rtmsg_gateway: lkl_in6_addr,
        pub rtmsg_type: __lkl__u32,
        pub rtmsg_dst_len: __lkl__u16,
        pub rtmsg_src_len: __lkl__u16,
        pub rtmsg_metric: __lkl__u32,
        pub rtmsg_info: ::std::os::raw::c_ulong,
        pub rtmsg_flags: __lkl__u32,
        pub rtmsg_ifindex: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_lkl_in6_rtmsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_in6_rtmsg>(),
            80usize,
            concat!("Size of: ", stringify!(lkl_in6_rtmsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_in6_rtmsg>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_in6_rtmsg))
        );
        fn test_field_rtmsg_dst() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtmsg_dst) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_rtmsg),
                    "::",
                    stringify!(rtmsg_dst)
                )
            );
        }
        test_field_rtmsg_dst();
        fn test_field_rtmsg_src() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtmsg_src) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_rtmsg),
                    "::",
                    stringify!(rtmsg_src)
                )
            );
        }
        test_field_rtmsg_src();
        fn test_field_rtmsg_gateway() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtmsg_gateway) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_rtmsg),
                    "::",
                    stringify!(rtmsg_gateway)
                )
            );
        }
        test_field_rtmsg_gateway();
        fn test_field_rtmsg_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtmsg_type) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_rtmsg),
                    "::",
                    stringify!(rtmsg_type)
                )
            );
        }
        test_field_rtmsg_type();
        fn test_field_rtmsg_dst_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtmsg_dst_len) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_rtmsg),
                    "::",
                    stringify!(rtmsg_dst_len)
                )
            );
        }
        test_field_rtmsg_dst_len();
        fn test_field_rtmsg_src_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtmsg_src_len) as usize - ptr as usize
                },
                54usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_rtmsg),
                    "::",
                    stringify!(rtmsg_src_len)
                )
            );
        }
        test_field_rtmsg_src_len();
        fn test_field_rtmsg_metric() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtmsg_metric) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_rtmsg),
                    "::",
                    stringify!(rtmsg_metric)
                )
            );
        }
        test_field_rtmsg_metric();
        fn test_field_rtmsg_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtmsg_info) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_rtmsg),
                    "::",
                    stringify!(rtmsg_info)
                )
            );
        }
        test_field_rtmsg_info();
        fn test_field_rtmsg_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtmsg_flags) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_rtmsg),
                    "::",
                    stringify!(rtmsg_flags)
                )
            );
        }
        test_field_rtmsg_flags();
        fn test_field_rtmsg_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtmsg_ifindex) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_rtmsg),
                    "::",
                    stringify!(rtmsg_ifindex)
                )
            );
        }
        test_field_rtmsg_ifindex();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_in6_ifreq {
        pub ifr6_addr: lkl_in6_addr,
        pub ifr6_prefixlen: __lkl__u32,
        pub ifr6_ifindex: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_lkl_in6_ifreq() {
        assert_eq!(
            ::std::mem::size_of::<lkl_in6_ifreq>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_in6_ifreq))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_in6_ifreq>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_in6_ifreq))
        );
        fn test_field_ifr6_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_ifreq>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifr6_addr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_ifreq),
                    "::",
                    stringify!(ifr6_addr)
                )
            );
        }
        test_field_ifr6_addr();
        fn test_field_ifr6_prefixlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_ifreq>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifr6_prefixlen) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_ifreq),
                    "::",
                    stringify!(ifr6_prefixlen)
                )
            );
        }
        test_field_ifr6_prefixlen();
        fn test_field_ifr6_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_in6_ifreq>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifr6_ifindex) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_in6_ifreq),
                    "::",
                    stringify!(ifr6_ifindex)
                )
            );
        }
        test_field_ifr6_ifindex();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ipv6_rt_hdr {
        pub nexthdr: __lkl__u8,
        pub hdrlen: __lkl__u8,
        pub type_: __lkl__u8,
        pub segments_left: __lkl__u8,
    }
    #[test]
    fn bindgen_test_layout_lkl_ipv6_rt_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ipv6_rt_hdr>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_ipv6_rt_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ipv6_rt_hdr>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_ipv6_rt_hdr))
        );
        fn test_field_nexthdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6_rt_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nexthdr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6_rt_hdr),
                    "::",
                    stringify!(nexthdr)
                )
            );
        }
        test_field_nexthdr();
        fn test_field_hdrlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6_rt_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hdrlen) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6_rt_hdr),
                    "::",
                    stringify!(hdrlen)
                )
            );
        }
        test_field_hdrlen();
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6_rt_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6_rt_hdr),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_segments_left() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6_rt_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).segments_left) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6_rt_hdr),
                    "::",
                    stringify!(segments_left)
                )
            );
        }
        test_field_segments_left();
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ipv6_opt_hdr {
        pub nexthdr: __lkl__u8,
        pub hdrlen: __lkl__u8,
    }
    #[test]
    fn bindgen_test_layout_lkl_ipv6_opt_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ipv6_opt_hdr>(),
            2usize,
            concat!("Size of: ", stringify!(lkl_ipv6_opt_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ipv6_opt_hdr>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_ipv6_opt_hdr))
        );
        fn test_field_nexthdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6_opt_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nexthdr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6_opt_hdr),
                    "::",
                    stringify!(nexthdr)
                )
            );
        }
        test_field_nexthdr();
        fn test_field_hdrlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6_opt_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hdrlen) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6_opt_hdr),
                    "::",
                    stringify!(hdrlen)
                )
            );
        }
        test_field_hdrlen();
    }
    #[repr(C)]
    pub struct lkl_rt0_hdr {
        pub rt_hdr: lkl_ipv6_rt_hdr,
        pub reserved: __lkl__u32,
        pub addr: __IncompleteArrayField<lkl_in6_addr>,
    }
    #[test]
    fn bindgen_test_layout_lkl_rt0_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rt0_hdr>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_rt0_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rt0_hdr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_rt0_hdr))
        );
        fn test_field_rt_hdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rt0_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_hdr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rt0_hdr),
                    "::",
                    stringify!(rt_hdr)
                )
            );
        }
        test_field_rt_hdr();
        fn test_field_reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rt0_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rt0_hdr),
                    "::",
                    stringify!(reserved)
                )
            );
        }
        test_field_reserved();
        fn test_field_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rt0_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rt0_hdr),
                    "::",
                    stringify!(addr)
                )
            );
        }
        test_field_addr();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_rt2_hdr {
        pub rt_hdr: lkl_ipv6_rt_hdr,
        pub reserved: __lkl__u32,
        pub addr: lkl_in6_addr,
    }
    #[test]
    fn bindgen_test_layout_lkl_rt2_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rt2_hdr>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_rt2_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rt2_hdr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_rt2_hdr))
        );
        fn test_field_rt_hdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rt2_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rt_hdr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rt2_hdr),
                    "::",
                    stringify!(rt_hdr)
                )
            );
        }
        test_field_rt_hdr();
        fn test_field_reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rt2_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rt2_hdr),
                    "::",
                    stringify!(reserved)
                )
            );
        }
        test_field_reserved();
        fn test_field_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rt2_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rt2_hdr),
                    "::",
                    stringify!(addr)
                )
            );
        }
        test_field_addr();
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub struct lkl_ipv6_destopt_hao {
        pub type_: __lkl__u8,
        pub length: __lkl__u8,
        pub addr: lkl_in6_addr,
    }
    #[test]
    fn bindgen_test_layout_lkl_ipv6_destopt_hao() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ipv6_destopt_hao>(),
            18usize,
            concat!("Size of: ", stringify!(lkl_ipv6_destopt_hao))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ipv6_destopt_hao>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_ipv6_destopt_hao))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6_destopt_hao>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6_destopt_hao),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_length() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6_destopt_hao>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6_destopt_hao),
                    "::",
                    stringify!(length)
                )
            );
        }
        test_field_length();
        fn test_field_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6_destopt_hao>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6_destopt_hao),
                    "::",
                    stringify!(addr)
                )
            );
        }
        test_field_addr();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_ipv6hdr {
        pub _bitfield_align_1: [u8; 0],
        pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
        pub flow_lbl: [__lkl__u8; 3usize],
        pub payload_len: __lkl__be16,
        pub nexthdr: __lkl__u8,
        pub hop_limit: __lkl__u8,
        pub saddr: lkl_in6_addr,
        pub daddr: lkl_in6_addr,
    }
    #[test]
    fn bindgen_test_layout_lkl_ipv6hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ipv6hdr>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_ipv6hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ipv6hdr>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_ipv6hdr))
        );
        fn test_field_flow_lbl() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flow_lbl) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6hdr),
                    "::",
                    stringify!(flow_lbl)
                )
            );
        }
        test_field_flow_lbl();
        fn test_field_payload_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).payload_len) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6hdr),
                    "::",
                    stringify!(payload_len)
                )
            );
        }
        test_field_payload_len();
        fn test_field_nexthdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nexthdr) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6hdr),
                    "::",
                    stringify!(nexthdr)
                )
            );
        }
        test_field_nexthdr();
        fn test_field_hop_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hop_limit) as usize - ptr as usize
                },
                7usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6hdr),
                    "::",
                    stringify!(hop_limit)
                )
            );
        }
        test_field_hop_limit();
        fn test_field_saddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).saddr) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6hdr),
                    "::",
                    stringify!(saddr)
                )
            );
        }
        test_field_saddr();
        fn test_field_daddr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ipv6hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).daddr) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ipv6hdr),
                    "::",
                    stringify!(daddr)
                )
            );
        }
        test_field_daddr();
    }
    impl lkl_ipv6hdr {
        #[inline]
        pub fn priority(&self) -> __lkl__u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_priority(&mut self, val: __lkl__u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn version(&self) -> __lkl__u8 {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
        }
        #[inline]
        pub fn set_version(&mut self, val: __lkl__u8) {
            unsafe {
                let val: u8 = ::std::mem::transmute(val);
                self._bitfield_1.set(4usize, 4u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            priority: __lkl__u8,
            version: __lkl__u8,
        ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
            let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
            __bindgen_bitfield_unit.set(0usize, 4u8, {
                let priority: u8 = unsafe { ::std::mem::transmute(priority) };
                priority as u64
            });
            __bindgen_bitfield_unit.set(4usize, 4u8, {
                let version: u8 = unsafe { ::std::mem::transmute(version) };
                version as u64
            });
            __bindgen_bitfield_unit
        }
    }
    pub const LKL_DEVCONF_FORWARDING: _bindgen_ty_49 = 0;
    pub const LKL_DEVCONF_HOPLIMIT: _bindgen_ty_49 = 1;
    pub const LKL_DEVCONF_MTU6: _bindgen_ty_49 = 2;
    pub const LKL_DEVCONF_ACCEPT_RA: _bindgen_ty_49 = 3;
    pub const LKL_DEVCONF_ACCEPT_REDIRECTS: _bindgen_ty_49 = 4;
    pub const LKL_DEVCONF_AUTOCONF: _bindgen_ty_49 = 5;
    pub const LKL_DEVCONF_DAD_TRANSMITS: _bindgen_ty_49 = 6;
    pub const LKL_DEVCONF_RTR_SOLICITS: _bindgen_ty_49 = 7;
    pub const LKL_DEVCONF_RTR_SOLICIT_INTERVAL: _bindgen_ty_49 = 8;
    pub const LKL_DEVCONF_RTR_SOLICIT_DELAY: _bindgen_ty_49 = 9;
    pub const LKL_DEVCONF_USE_TEMPADDR: _bindgen_ty_49 = 10;
    pub const LKL_DEVCONF_TEMP_VALID_LFT: _bindgen_ty_49 = 11;
    pub const LKL_DEVCONF_TEMP_PREFERED_LFT: _bindgen_ty_49 = 12;
    pub const LKL_DEVCONF_REGEN_MAX_RETRY: _bindgen_ty_49 = 13;
    pub const LKL_DEVCONF_MAX_DESYNC_FACTOR: _bindgen_ty_49 = 14;
    pub const LKL_DEVCONF_MAX_ADDRESSES: _bindgen_ty_49 = 15;
    pub const LKL_DEVCONF_FORCE_MLD_VERSION: _bindgen_ty_49 = 16;
    pub const LKL_DEVCONF_ACCEPT_RA_DEFRTR: _bindgen_ty_49 = 17;
    pub const LKL_DEVCONF_ACCEPT_RA_PINFO: _bindgen_ty_49 = 18;
    pub const LKL_DEVCONF_ACCEPT_RA_RTR_PREF: _bindgen_ty_49 = 19;
    pub const LKL_DEVCONF_RTR_PROBE_INTERVAL: _bindgen_ty_49 = 20;
    pub const LKL_DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN: _bindgen_ty_49 = 21;
    pub const LKL_DEVCONF_PROXY_NDP: _bindgen_ty_49 = 22;
    pub const LKL_DEVCONF_OPTIMISTIC_DAD: _bindgen_ty_49 = 23;
    pub const LKL_DEVCONF_ACCEPT_SOURCE_ROUTE: _bindgen_ty_49 = 24;
    pub const LKL_DEVCONF_MC_FORWARDING: _bindgen_ty_49 = 25;
    pub const LKL_DEVCONF_DISABLE_IPV6: _bindgen_ty_49 = 26;
    pub const LKL_DEVCONF_ACCEPT_DAD: _bindgen_ty_49 = 27;
    pub const LKL_DEVCONF_FORCE_TLLAO: _bindgen_ty_49 = 28;
    pub const LKL_DEVCONF_NDISC_NOTIFY: _bindgen_ty_49 = 29;
    pub const LKL_DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL: _bindgen_ty_49 = 30;
    pub const LKL_DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL: _bindgen_ty_49 = 31;
    pub const LKL_DEVCONF_SUPPRESS_FRAG_NDISC: _bindgen_ty_49 = 32;
    pub const LKL_DEVCONF_ACCEPT_RA_FROM_LOCAL: _bindgen_ty_49 = 33;
    pub const LKL_DEVCONF_USE_OPTIMISTIC: _bindgen_ty_49 = 34;
    pub const LKL_DEVCONF_ACCEPT_RA_MTU: _bindgen_ty_49 = 35;
    pub const LKL_DEVCONF_STABLE_SECRET: _bindgen_ty_49 = 36;
    pub const LKL_DEVCONF_USE_OIF_ADDRS_ONLY: _bindgen_ty_49 = 37;
    pub const LKL_DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT: _bindgen_ty_49 = 38;
    pub const LKL_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN: _bindgen_ty_49 = 39;
    pub const LKL_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST: _bindgen_ty_49 = 40;
    pub const LKL_DEVCONF_DROP_UNSOLICITED_NA: _bindgen_ty_49 = 41;
    pub const LKL_DEVCONF_KEEP_ADDR_ON_DOWN: _bindgen_ty_49 = 42;
    pub const LKL_DEVCONF_RTR_SOLICIT_MAX_INTERVAL: _bindgen_ty_49 = 43;
    pub const LKL_DEVCONF_SEG6_ENABLED: _bindgen_ty_49 = 44;
    pub const LKL_DEVCONF_SEG6_REQUIRE_HMAC: _bindgen_ty_49 = 45;
    pub const LKL_DEVCONF_ENHANCED_DAD: _bindgen_ty_49 = 46;
    pub const LKL_DEVCONF_ADDR_GEN_MODE: _bindgen_ty_49 = 47;
    pub const LKL_DEVCONF_DISABLE_POLICY: _bindgen_ty_49 = 48;
    pub const LKL_DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN: _bindgen_ty_49 = 49;
    pub const LKL_DEVCONF_NDISC_TCLASS: _bindgen_ty_49 = 50;
    pub const LKL_DEVCONF_RPL_SEG_ENABLED: _bindgen_ty_49 = 51;
    pub const LKL_DEVCONF_MAX: _bindgen_ty_49 = 52;
    pub type _bindgen_ty_49 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_sockaddr_nl {
        pub nl_family: __lkl__kernel_sa_family_t,
        pub nl_pad: ::std::os::raw::c_ushort,
        pub nl_pid: __lkl__u32,
        pub nl_groups: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_sockaddr_nl() {
        assert_eq!(
            ::std::mem::size_of::<lkl_sockaddr_nl>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_sockaddr_nl))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_sockaddr_nl>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_sockaddr_nl))
        );
        fn test_field_nl_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sockaddr_nl>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nl_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sockaddr_nl),
                    "::",
                    stringify!(nl_family)
                )
            );
        }
        test_field_nl_family();
        fn test_field_nl_pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sockaddr_nl>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nl_pad) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sockaddr_nl),
                    "::",
                    stringify!(nl_pad)
                )
            );
        }
        test_field_nl_pad();
        fn test_field_nl_pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sockaddr_nl>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nl_pid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sockaddr_nl),
                    "::",
                    stringify!(nl_pid)
                )
            );
        }
        test_field_nl_pid();
        fn test_field_nl_groups() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_sockaddr_nl>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nl_groups) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_sockaddr_nl),
                    "::",
                    stringify!(nl_groups)
                )
            );
        }
        test_field_nl_groups();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_nlmsghdr {
        pub nlmsg_len: __lkl__u32,
        pub nlmsg_type: __lkl__u16,
        pub nlmsg_flags: __lkl__u16,
        pub nlmsg_seq: __lkl__u32,
        pub nlmsg_pid: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_nlmsghdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_nlmsghdr>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_nlmsghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_nlmsghdr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_nlmsghdr))
        );
        fn test_field_nlmsg_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nlmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nlmsg_len) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nlmsghdr),
                    "::",
                    stringify!(nlmsg_len)
                )
            );
        }
        test_field_nlmsg_len();
        fn test_field_nlmsg_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nlmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nlmsg_type) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nlmsghdr),
                    "::",
                    stringify!(nlmsg_type)
                )
            );
        }
        test_field_nlmsg_type();
        fn test_field_nlmsg_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nlmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nlmsg_flags) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nlmsghdr),
                    "::",
                    stringify!(nlmsg_flags)
                )
            );
        }
        test_field_nlmsg_flags();
        fn test_field_nlmsg_seq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nlmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nlmsg_seq) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nlmsghdr),
                    "::",
                    stringify!(nlmsg_seq)
                )
            );
        }
        test_field_nlmsg_seq();
        fn test_field_nlmsg_pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nlmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nlmsg_pid) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nlmsghdr),
                    "::",
                    stringify!(nlmsg_pid)
                )
            );
        }
        test_field_nlmsg_pid();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_nlmsgerr {
        pub error: ::std::os::raw::c_int,
        pub msg: lkl_nlmsghdr,
    }
    #[test]
    fn bindgen_test_layout_lkl_nlmsgerr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_nlmsgerr>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_nlmsgerr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_nlmsgerr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_nlmsgerr))
        );
        fn test_field_error() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nlmsgerr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nlmsgerr),
                    "::",
                    stringify!(error)
                )
            );
        }
        test_field_error();
        fn test_field_msg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nlmsgerr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nlmsgerr),
                    "::",
                    stringify!(msg)
                )
            );
        }
        test_field_msg();
    }
    pub const lkl_nlmsgerr_attrs_LKL_NLMSGERR_ATTR_UNUSED: lkl_nlmsgerr_attrs = 0;
    pub const lkl_nlmsgerr_attrs_LKL_NLMSGERR_ATTR_MSG: lkl_nlmsgerr_attrs = 1;
    pub const lkl_nlmsgerr_attrs_LKL_NLMSGERR_ATTR_OFFS: lkl_nlmsgerr_attrs = 2;
    pub const lkl_nlmsgerr_attrs_LKL_NLMSGERR_ATTR_COOKIE: lkl_nlmsgerr_attrs = 3;
    pub const lkl_nlmsgerr_attrs_LKL_NLMSGERR_ATTR_POLICY: lkl_nlmsgerr_attrs = 4;
    pub const lkl_nlmsgerr_attrs___LKL__NLMSGERR_ATTR_MAX: lkl_nlmsgerr_attrs = 5;
    pub const lkl_nlmsgerr_attrs_LKL_NLMSGERR_ATTR_MAX: lkl_nlmsgerr_attrs = 4;
    pub type lkl_nlmsgerr_attrs = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_nl_pktinfo {
        pub group: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_nl_pktinfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_nl_pktinfo>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_nl_pktinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_nl_pktinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_nl_pktinfo))
        );
        fn test_field_group() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_pktinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_pktinfo),
                    "::",
                    stringify!(group)
                )
            );
        }
        test_field_group();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_nl_mmap_req {
        pub nm_block_size: ::std::os::raw::c_uint,
        pub nm_block_nr: ::std::os::raw::c_uint,
        pub nm_frame_size: ::std::os::raw::c_uint,
        pub nm_frame_nr: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_nl_mmap_req() {
        assert_eq!(
            ::std::mem::size_of::<lkl_nl_mmap_req>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_nl_mmap_req))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_nl_mmap_req>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_nl_mmap_req))
        );
        fn test_field_nm_block_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_mmap_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nm_block_size) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_mmap_req),
                    "::",
                    stringify!(nm_block_size)
                )
            );
        }
        test_field_nm_block_size();
        fn test_field_nm_block_nr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_mmap_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nm_block_nr) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_mmap_req),
                    "::",
                    stringify!(nm_block_nr)
                )
            );
        }
        test_field_nm_block_nr();
        fn test_field_nm_frame_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_mmap_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nm_frame_size) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_mmap_req),
                    "::",
                    stringify!(nm_frame_size)
                )
            );
        }
        test_field_nm_frame_size();
        fn test_field_nm_frame_nr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_mmap_req>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nm_frame_nr) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_mmap_req),
                    "::",
                    stringify!(nm_frame_nr)
                )
            );
        }
        test_field_nm_frame_nr();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_nl_mmap_hdr {
        pub nm_status: ::std::os::raw::c_uint,
        pub nm_len: ::std::os::raw::c_uint,
        pub nm_group: __lkl__u32,
        pub nm_pid: __lkl__u32,
        pub nm_uid: __lkl__u32,
        pub nm_gid: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_nl_mmap_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_nl_mmap_hdr>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_nl_mmap_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_nl_mmap_hdr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_nl_mmap_hdr))
        );
        fn test_field_nm_status() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_mmap_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nm_status) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_mmap_hdr),
                    "::",
                    stringify!(nm_status)
                )
            );
        }
        test_field_nm_status();
        fn test_field_nm_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_mmap_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nm_len) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_mmap_hdr),
                    "::",
                    stringify!(nm_len)
                )
            );
        }
        test_field_nm_len();
        fn test_field_nm_group() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_mmap_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nm_group) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_mmap_hdr),
                    "::",
                    stringify!(nm_group)
                )
            );
        }
        test_field_nm_group();
        fn test_field_nm_pid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_mmap_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nm_pid) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_mmap_hdr),
                    "::",
                    stringify!(nm_pid)
                )
            );
        }
        test_field_nm_pid();
        fn test_field_nm_uid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_mmap_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nm_uid) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_mmap_hdr),
                    "::",
                    stringify!(nm_uid)
                )
            );
        }
        test_field_nm_uid();
        fn test_field_nm_gid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nl_mmap_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nm_gid) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nl_mmap_hdr),
                    "::",
                    stringify!(nm_gid)
                )
            );
        }
        test_field_nm_gid();
    }
    pub const lkl_nl_mmap_status_LKL_NL_MMAP_STATUS_UNUSED: lkl_nl_mmap_status = 0;
    pub const lkl_nl_mmap_status_LKL_NL_MMAP_STATUS_RESERVED: lkl_nl_mmap_status = 1;
    pub const lkl_nl_mmap_status_LKL_NL_MMAP_STATUS_VALID: lkl_nl_mmap_status = 2;
    pub const lkl_nl_mmap_status_LKL_NL_MMAP_STATUS_COPY: lkl_nl_mmap_status = 3;
    pub const lkl_nl_mmap_status_LKL_NL_MMAP_STATUS_SKIP: lkl_nl_mmap_status = 4;
    pub type lkl_nl_mmap_status = ::std::os::raw::c_uint;
    pub const LKL_NETLINK_UNCONNECTED: _bindgen_ty_50 = 0;
    pub const LKL_NETLINK_CONNECTED: _bindgen_ty_50 = 1;
    pub type _bindgen_ty_50 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_nlattr {
        pub nla_len: __lkl__u16,
        pub nla_type: __lkl__u16,
    }
    #[test]
    fn bindgen_test_layout_lkl_nlattr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_nlattr>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_nlattr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_nlattr>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_nlattr))
        );
        fn test_field_nla_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nlattr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nla_len) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nlattr),
                    "::",
                    stringify!(nla_len)
                )
            );
        }
        test_field_nla_len();
        fn test_field_nla_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nlattr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nla_type) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nlattr),
                    "::",
                    stringify!(nla_type)
                )
            );
        }
        test_field_nla_type();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_nla_bitfield32 {
        pub value: __lkl__u32,
        pub selector: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_nla_bitfield32() {
        assert_eq!(
            ::std::mem::size_of::<lkl_nla_bitfield32>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_nla_bitfield32))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_nla_bitfield32>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_nla_bitfield32))
        );
        fn test_field_value() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nla_bitfield32>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nla_bitfield32),
                    "::",
                    stringify!(value)
                )
            );
        }
        test_field_value();
        fn test_field_selector() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nla_bitfield32>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).selector) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nla_bitfield32),
                    "::",
                    stringify!(selector)
                )
            );
        }
        test_field_selector();
    }
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_INVALID: lkl_netlink_attribute_type = 0;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_FLAG: lkl_netlink_attribute_type = 1;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_U8: lkl_netlink_attribute_type = 2;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_U16: lkl_netlink_attribute_type = 3;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_U32: lkl_netlink_attribute_type = 4;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_U64: lkl_netlink_attribute_type = 5;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_S8: lkl_netlink_attribute_type = 6;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_S16: lkl_netlink_attribute_type = 7;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_S32: lkl_netlink_attribute_type = 8;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_S64: lkl_netlink_attribute_type = 9;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_BINARY: lkl_netlink_attribute_type = 10;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_STRING: lkl_netlink_attribute_type = 11;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_NUL_STRING: lkl_netlink_attribute_type = 12;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_NESTED: lkl_netlink_attribute_type = 13;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_NESTED_ARRAY: lkl_netlink_attribute_type = 14;
    pub const lkl_netlink_attribute_type_LKL_NL_ATTR_TYPE_BITFIELD32: lkl_netlink_attribute_type = 15;
    pub type lkl_netlink_attribute_type = ::std::os::raw::c_uint;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_UNSPEC:
        lkl_netlink_policy_type_attr = 0;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_TYPE: lkl_netlink_policy_type_attr =
        1;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_MIN_VALUE_S:
        lkl_netlink_policy_type_attr = 2;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_MAX_VALUE_S:
        lkl_netlink_policy_type_attr = 3;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_MIN_VALUE_U:
        lkl_netlink_policy_type_attr = 4;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_MAX_VALUE_U:
        lkl_netlink_policy_type_attr = 5;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_MIN_LENGTH:
        lkl_netlink_policy_type_attr = 6;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_MAX_LENGTH:
        lkl_netlink_policy_type_attr = 7;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_POLICY_IDX:
        lkl_netlink_policy_type_attr = 8;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE:
        lkl_netlink_policy_type_attr = 9;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_BITFIELD32_MASK:
        lkl_netlink_policy_type_attr = 10;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_PAD: lkl_netlink_policy_type_attr =
        11;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_MASK: lkl_netlink_policy_type_attr =
        12;
    pub const lkl_netlink_policy_type_attr___LKL__NL_POLICY_TYPE_ATTR_MAX:
        lkl_netlink_policy_type_attr = 13;
    pub const lkl_netlink_policy_type_attr_LKL_NL_POLICY_TYPE_ATTR_MAX: lkl_netlink_policy_type_attr =
        12;
    pub type lkl_netlink_policy_type_attr = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ndmsg {
        pub ndm_family: __lkl__u8,
        pub ndm_pad1: __lkl__u8,
        pub ndm_pad2: __lkl__u16,
        pub ndm_ifindex: __lkl__s32,
        pub ndm_state: __lkl__u16,
        pub ndm_flags: __lkl__u8,
        pub ndm_type: __lkl__u8,
    }
    #[test]
    fn bindgen_test_layout_lkl_ndmsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ndmsg>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_ndmsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ndmsg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ndmsg))
        );
        fn test_field_ndm_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndmsg),
                    "::",
                    stringify!(ndm_family)
                )
            );
        }
        test_field_ndm_family();
        fn test_field_ndm_pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_pad1) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndmsg),
                    "::",
                    stringify!(ndm_pad1)
                )
            );
        }
        test_field_ndm_pad1();
        fn test_field_ndm_pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_pad2) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndmsg),
                    "::",
                    stringify!(ndm_pad2)
                )
            );
        }
        test_field_ndm_pad2();
        fn test_field_ndm_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_ifindex) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndmsg),
                    "::",
                    stringify!(ndm_ifindex)
                )
            );
        }
        test_field_ndm_ifindex();
        fn test_field_ndm_state() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_state) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndmsg),
                    "::",
                    stringify!(ndm_state)
                )
            );
        }
        test_field_ndm_state();
        fn test_field_ndm_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_flags) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndmsg),
                    "::",
                    stringify!(ndm_flags)
                )
            );
        }
        test_field_ndm_flags();
        fn test_field_ndm_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_type) as usize - ptr as usize
                },
                11usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndmsg),
                    "::",
                    stringify!(ndm_type)
                )
            );
        }
        test_field_ndm_type();
    }
    pub const LKL_NDA_UNSPEC: _bindgen_ty_51 = 0;
    pub const LKL_NDA_DST: _bindgen_ty_51 = 1;
    pub const LKL_NDA_LLADDR: _bindgen_ty_51 = 2;
    pub const LKL_NDA_CACHEINFO: _bindgen_ty_51 = 3;
    pub const LKL_NDA_PROBES: _bindgen_ty_51 = 4;
    pub const LKL_NDA_VLAN: _bindgen_ty_51 = 5;
    pub const LKL_NDA_PORT: _bindgen_ty_51 = 6;
    pub const LKL_NDA_VNI: _bindgen_ty_51 = 7;
    pub const LKL_NDA_IFINDEX: _bindgen_ty_51 = 8;
    pub const LKL_NDA_MASTER: _bindgen_ty_51 = 9;
    pub const LKL_NDA_LINK_NETNSID: _bindgen_ty_51 = 10;
    pub const LKL_NDA_SRC_VNI: _bindgen_ty_51 = 11;
    pub const LKL_NDA_PROTOCOL: _bindgen_ty_51 = 12;
    pub const LKL_NDA_NH_ID: _bindgen_ty_51 = 13;
    pub const LKL_NDA_FDB_EXT_ATTRS: _bindgen_ty_51 = 14;
    pub const __LKL__NDA_MAX: _bindgen_ty_51 = 15;
    pub type _bindgen_ty_51 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_nda_cacheinfo {
        pub ndm_confirmed: __lkl__u32,
        pub ndm_used: __lkl__u32,
        pub ndm_updated: __lkl__u32,
        pub ndm_refcnt: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_nda_cacheinfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_nda_cacheinfo>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_nda_cacheinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_nda_cacheinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_nda_cacheinfo))
        );
        fn test_field_ndm_confirmed() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nda_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_confirmed) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nda_cacheinfo),
                    "::",
                    stringify!(ndm_confirmed)
                )
            );
        }
        test_field_ndm_confirmed();
        fn test_field_ndm_used() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nda_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_used) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nda_cacheinfo),
                    "::",
                    stringify!(ndm_used)
                )
            );
        }
        test_field_ndm_used();
        fn test_field_ndm_updated() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nda_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_updated) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nda_cacheinfo),
                    "::",
                    stringify!(ndm_updated)
                )
            );
        }
        test_field_ndm_updated();
        fn test_field_ndm_refcnt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nda_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndm_refcnt) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nda_cacheinfo),
                    "::",
                    stringify!(ndm_refcnt)
                )
            );
        }
        test_field_ndm_refcnt();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ndt_stats {
        pub ndts_allocs: __lkl__u64,
        pub ndts_destroys: __lkl__u64,
        pub ndts_hash_grows: __lkl__u64,
        pub ndts_res_failed: __lkl__u64,
        pub ndts_lookups: __lkl__u64,
        pub ndts_hits: __lkl__u64,
        pub ndts_rcv_probes_mcast: __lkl__u64,
        pub ndts_rcv_probes_ucast: __lkl__u64,
        pub ndts_periodic_gc_runs: __lkl__u64,
        pub ndts_forced_gc_runs: __lkl__u64,
        pub ndts_table_fulls: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_ndt_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ndt_stats>(),
            88usize,
            concat!("Size of: ", stringify!(lkl_ndt_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ndt_stats>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_ndt_stats))
        );
        fn test_field_ndts_allocs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_allocs) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_allocs)
                )
            );
        }
        test_field_ndts_allocs();
        fn test_field_ndts_destroys() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_destroys) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_destroys)
                )
            );
        }
        test_field_ndts_destroys();
        fn test_field_ndts_hash_grows() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_hash_grows) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_hash_grows)
                )
            );
        }
        test_field_ndts_hash_grows();
        fn test_field_ndts_res_failed() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_res_failed) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_res_failed)
                )
            );
        }
        test_field_ndts_res_failed();
        fn test_field_ndts_lookups() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_lookups) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_lookups)
                )
            );
        }
        test_field_ndts_lookups();
        fn test_field_ndts_hits() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_hits) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_hits)
                )
            );
        }
        test_field_ndts_hits();
        fn test_field_ndts_rcv_probes_mcast() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_rcv_probes_mcast) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_rcv_probes_mcast)
                )
            );
        }
        test_field_ndts_rcv_probes_mcast();
        fn test_field_ndts_rcv_probes_ucast() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_rcv_probes_ucast) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_rcv_probes_ucast)
                )
            );
        }
        test_field_ndts_rcv_probes_ucast();
        fn test_field_ndts_periodic_gc_runs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_periodic_gc_runs) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_periodic_gc_runs)
                )
            );
        }
        test_field_ndts_periodic_gc_runs();
        fn test_field_ndts_forced_gc_runs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_forced_gc_runs) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_forced_gc_runs)
                )
            );
        }
        test_field_ndts_forced_gc_runs();
        fn test_field_ndts_table_fulls() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndts_table_fulls) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_stats),
                    "::",
                    stringify!(ndts_table_fulls)
                )
            );
        }
        test_field_ndts_table_fulls();
    }
    pub const LKL_NDTPA_UNSPEC: _bindgen_ty_52 = 0;
    pub const LKL_NDTPA_IFINDEX: _bindgen_ty_52 = 1;
    pub const LKL_NDTPA_REFCNT: _bindgen_ty_52 = 2;
    pub const LKL_NDTPA_REACHABLE_TIME: _bindgen_ty_52 = 3;
    pub const LKL_NDTPA_BASE_REACHABLE_TIME: _bindgen_ty_52 = 4;
    pub const LKL_NDTPA_RETRANS_TIME: _bindgen_ty_52 = 5;
    pub const LKL_NDTPA_GC_STALETIME: _bindgen_ty_52 = 6;
    pub const LKL_NDTPA_DELAY_PROBE_TIME: _bindgen_ty_52 = 7;
    pub const LKL_NDTPA_QUEUE_LEN: _bindgen_ty_52 = 8;
    pub const LKL_NDTPA_APP_PROBES: _bindgen_ty_52 = 9;
    pub const LKL_NDTPA_UCAST_PROBES: _bindgen_ty_52 = 10;
    pub const LKL_NDTPA_MCAST_PROBES: _bindgen_ty_52 = 11;
    pub const LKL_NDTPA_ANYCAST_DELAY: _bindgen_ty_52 = 12;
    pub const LKL_NDTPA_PROXY_DELAY: _bindgen_ty_52 = 13;
    pub const LKL_NDTPA_PROXY_QLEN: _bindgen_ty_52 = 14;
    pub const LKL_NDTPA_LOCKTIME: _bindgen_ty_52 = 15;
    pub const LKL_NDTPA_QUEUE_LENBYTES: _bindgen_ty_52 = 16;
    pub const LKL_NDTPA_MCAST_REPROBES: _bindgen_ty_52 = 17;
    pub const LKL_NDTPA_PAD: _bindgen_ty_52 = 18;
    pub const __LKL__NDTPA_MAX: _bindgen_ty_52 = 19;
    pub type _bindgen_ty_52 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ndtmsg {
        pub ndtm_family: __lkl__u8,
        pub ndtm_pad1: __lkl__u8,
        pub ndtm_pad2: __lkl__u16,
    }
    #[test]
    fn bindgen_test_layout_lkl_ndtmsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ndtmsg>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_ndtmsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ndtmsg>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_ndtmsg))
        );
        fn test_field_ndtm_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtm_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndtmsg),
                    "::",
                    stringify!(ndtm_family)
                )
            );
        }
        test_field_ndtm_family();
        fn test_field_ndtm_pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtm_pad1) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndtmsg),
                    "::",
                    stringify!(ndtm_pad1)
                )
            );
        }
        test_field_ndtm_pad1();
        fn test_field_ndtm_pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtm_pad2) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndtmsg),
                    "::",
                    stringify!(ndtm_pad2)
                )
            );
        }
        test_field_ndtm_pad2();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ndt_config {
        pub ndtc_key_len: __lkl__u16,
        pub ndtc_entry_size: __lkl__u16,
        pub ndtc_entries: __lkl__u32,
        pub ndtc_last_flush: __lkl__u32,
        pub ndtc_last_rand: __lkl__u32,
        pub ndtc_hash_rnd: __lkl__u32,
        pub ndtc_hash_mask: __lkl__u32,
        pub ndtc_hash_chain_gc: __lkl__u32,
        pub ndtc_proxy_qlen: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ndt_config() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ndt_config>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_ndt_config))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ndt_config>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ndt_config))
        );
        fn test_field_ndtc_key_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtc_key_len) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_config),
                    "::",
                    stringify!(ndtc_key_len)
                )
            );
        }
        test_field_ndtc_key_len();
        fn test_field_ndtc_entry_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtc_entry_size) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_config),
                    "::",
                    stringify!(ndtc_entry_size)
                )
            );
        }
        test_field_ndtc_entry_size();
        fn test_field_ndtc_entries() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtc_entries) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_config),
                    "::",
                    stringify!(ndtc_entries)
                )
            );
        }
        test_field_ndtc_entries();
        fn test_field_ndtc_last_flush() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtc_last_flush) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_config),
                    "::",
                    stringify!(ndtc_last_flush)
                )
            );
        }
        test_field_ndtc_last_flush();
        fn test_field_ndtc_last_rand() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtc_last_rand) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_config),
                    "::",
                    stringify!(ndtc_last_rand)
                )
            );
        }
        test_field_ndtc_last_rand();
        fn test_field_ndtc_hash_rnd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtc_hash_rnd) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_config),
                    "::",
                    stringify!(ndtc_hash_rnd)
                )
            );
        }
        test_field_ndtc_hash_rnd();
        fn test_field_ndtc_hash_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtc_hash_mask) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_config),
                    "::",
                    stringify!(ndtc_hash_mask)
                )
            );
        }
        test_field_ndtc_hash_mask();
        fn test_field_ndtc_hash_chain_gc() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtc_hash_chain_gc) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_config),
                    "::",
                    stringify!(ndtc_hash_chain_gc)
                )
            );
        }
        test_field_ndtc_hash_chain_gc();
        fn test_field_ndtc_proxy_qlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ndt_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ndtc_proxy_qlen) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ndt_config),
                    "::",
                    stringify!(ndtc_proxy_qlen)
                )
            );
        }
        test_field_ndtc_proxy_qlen();
    }
    pub const LKL_NDTA_UNSPEC: _bindgen_ty_53 = 0;
    pub const LKL_NDTA_NAME: _bindgen_ty_53 = 1;
    pub const LKL_NDTA_THRESH1: _bindgen_ty_53 = 2;
    pub const LKL_NDTA_THRESH2: _bindgen_ty_53 = 3;
    pub const LKL_NDTA_THRESH3: _bindgen_ty_53 = 4;
    pub const LKL_NDTA_CONFIG: _bindgen_ty_53 = 5;
    pub const LKL_NDTA_PARMS: _bindgen_ty_53 = 6;
    pub const LKL_NDTA_STATS: _bindgen_ty_53 = 7;
    pub const LKL_NDTA_GC_INTERVAL: _bindgen_ty_53 = 8;
    pub const LKL_NDTA_PAD: _bindgen_ty_53 = 9;
    pub const __LKL__NDTA_MAX: _bindgen_ty_53 = 10;
    pub type _bindgen_ty_53 = ::std::os::raw::c_uint;
    pub const LKL_FDB_NOTIFY_BIT: _bindgen_ty_54 = 1;
    pub const LKL_FDB_NOTIFY_INACTIVE_BIT: _bindgen_ty_54 = 2;
    pub type _bindgen_ty_54 = ::std::os::raw::c_uint;
    pub const LKL_NFEA_UNSPEC: _bindgen_ty_55 = 0;
    pub const LKL_NFEA_ACTIVITY_NOTIFY: _bindgen_ty_55 = 1;
    pub const LKL_NFEA_DONT_REFRESH: _bindgen_ty_55 = 2;
    pub const __LKL__NFEA_MAX: _bindgen_ty_55 = 3;
    pub type _bindgen_ty_55 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rtnl_link_stats {
        pub rx_packets: __lkl__u32,
        pub tx_packets: __lkl__u32,
        pub rx_bytes: __lkl__u32,
        pub tx_bytes: __lkl__u32,
        pub rx_errors: __lkl__u32,
        pub tx_errors: __lkl__u32,
        pub rx_dropped: __lkl__u32,
        pub tx_dropped: __lkl__u32,
        pub multicast: __lkl__u32,
        pub collisions: __lkl__u32,
        pub rx_length_errors: __lkl__u32,
        pub rx_over_errors: __lkl__u32,
        pub rx_crc_errors: __lkl__u32,
        pub rx_frame_errors: __lkl__u32,
        pub rx_fifo_errors: __lkl__u32,
        pub rx_missed_errors: __lkl__u32,
        pub tx_aborted_errors: __lkl__u32,
        pub tx_carrier_errors: __lkl__u32,
        pub tx_fifo_errors: __lkl__u32,
        pub tx_heartbeat_errors: __lkl__u32,
        pub tx_window_errors: __lkl__u32,
        pub rx_compressed: __lkl__u32,
        pub tx_compressed: __lkl__u32,
        pub rx_nohandler: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_rtnl_link_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rtnl_link_stats>(),
            96usize,
            concat!("Size of: ", stringify!(lkl_rtnl_link_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rtnl_link_stats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_rtnl_link_stats))
        );
        fn test_field_rx_packets() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_packets) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_packets)
                )
            );
        }
        test_field_rx_packets();
        fn test_field_tx_packets() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_packets) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(tx_packets)
                )
            );
        }
        test_field_tx_packets();
        fn test_field_rx_bytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_bytes) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_bytes)
                )
            );
        }
        test_field_rx_bytes();
        fn test_field_tx_bytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_bytes) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(tx_bytes)
                )
            );
        }
        test_field_tx_bytes();
        fn test_field_rx_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_errors) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_errors)
                )
            );
        }
        test_field_rx_errors();
        fn test_field_tx_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_errors) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(tx_errors)
                )
            );
        }
        test_field_tx_errors();
        fn test_field_rx_dropped() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_dropped) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_dropped)
                )
            );
        }
        test_field_rx_dropped();
        fn test_field_tx_dropped() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_dropped) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(tx_dropped)
                )
            );
        }
        test_field_tx_dropped();
        fn test_field_multicast() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).multicast) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(multicast)
                )
            );
        }
        test_field_multicast();
        fn test_field_collisions() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).collisions) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(collisions)
                )
            );
        }
        test_field_collisions();
        fn test_field_rx_length_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_length_errors) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_length_errors)
                )
            );
        }
        test_field_rx_length_errors();
        fn test_field_rx_over_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_over_errors) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_over_errors)
                )
            );
        }
        test_field_rx_over_errors();
        fn test_field_rx_crc_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_crc_errors) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_crc_errors)
                )
            );
        }
        test_field_rx_crc_errors();
        fn test_field_rx_frame_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_frame_errors) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_frame_errors)
                )
            );
        }
        test_field_rx_frame_errors();
        fn test_field_rx_fifo_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_fifo_errors) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_fifo_errors)
                )
            );
        }
        test_field_rx_fifo_errors();
        fn test_field_rx_missed_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_missed_errors) as usize - ptr as usize
                },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_missed_errors)
                )
            );
        }
        test_field_rx_missed_errors();
        fn test_field_tx_aborted_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_aborted_errors) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(tx_aborted_errors)
                )
            );
        }
        test_field_tx_aborted_errors();
        fn test_field_tx_carrier_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_carrier_errors) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(tx_carrier_errors)
                )
            );
        }
        test_field_tx_carrier_errors();
        fn test_field_tx_fifo_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_fifo_errors) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(tx_fifo_errors)
                )
            );
        }
        test_field_tx_fifo_errors();
        fn test_field_tx_heartbeat_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_heartbeat_errors) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(tx_heartbeat_errors)
                )
            );
        }
        test_field_tx_heartbeat_errors();
        fn test_field_tx_window_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_window_errors) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(tx_window_errors)
                )
            );
        }
        test_field_tx_window_errors();
        fn test_field_rx_compressed() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_compressed) as usize - ptr as usize
                },
                84usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_compressed)
                )
            );
        }
        test_field_rx_compressed();
        fn test_field_tx_compressed() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_compressed) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(tx_compressed)
                )
            );
        }
        test_field_tx_compressed();
        fn test_field_rx_nohandler() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_nohandler) as usize - ptr as usize
                },
                92usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats),
                    "::",
                    stringify!(rx_nohandler)
                )
            );
        }
        test_field_rx_nohandler();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rtnl_link_stats64 {
        pub rx_packets: __lkl__u64,
        pub tx_packets: __lkl__u64,
        pub rx_bytes: __lkl__u64,
        pub tx_bytes: __lkl__u64,
        pub rx_errors: __lkl__u64,
        pub tx_errors: __lkl__u64,
        pub rx_dropped: __lkl__u64,
        pub tx_dropped: __lkl__u64,
        pub multicast: __lkl__u64,
        pub collisions: __lkl__u64,
        pub rx_length_errors: __lkl__u64,
        pub rx_over_errors: __lkl__u64,
        pub rx_crc_errors: __lkl__u64,
        pub rx_frame_errors: __lkl__u64,
        pub rx_fifo_errors: __lkl__u64,
        pub rx_missed_errors: __lkl__u64,
        pub tx_aborted_errors: __lkl__u64,
        pub tx_carrier_errors: __lkl__u64,
        pub tx_fifo_errors: __lkl__u64,
        pub tx_heartbeat_errors: __lkl__u64,
        pub tx_window_errors: __lkl__u64,
        pub rx_compressed: __lkl__u64,
        pub tx_compressed: __lkl__u64,
        pub rx_nohandler: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_rtnl_link_stats64() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rtnl_link_stats64>(),
            192usize,
            concat!("Size of: ", stringify!(lkl_rtnl_link_stats64))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rtnl_link_stats64>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_rtnl_link_stats64))
        );
        fn test_field_rx_packets() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_packets) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_packets)
                )
            );
        }
        test_field_rx_packets();
        fn test_field_tx_packets() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_packets) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(tx_packets)
                )
            );
        }
        test_field_tx_packets();
        fn test_field_rx_bytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_bytes) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_bytes)
                )
            );
        }
        test_field_rx_bytes();
        fn test_field_tx_bytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_bytes) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(tx_bytes)
                )
            );
        }
        test_field_tx_bytes();
        fn test_field_rx_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_errors) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_errors)
                )
            );
        }
        test_field_rx_errors();
        fn test_field_tx_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_errors) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(tx_errors)
                )
            );
        }
        test_field_tx_errors();
        fn test_field_rx_dropped() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_dropped) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_dropped)
                )
            );
        }
        test_field_rx_dropped();
        fn test_field_tx_dropped() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_dropped) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(tx_dropped)
                )
            );
        }
        test_field_tx_dropped();
        fn test_field_multicast() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).multicast) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(multicast)
                )
            );
        }
        test_field_multicast();
        fn test_field_collisions() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).collisions) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(collisions)
                )
            );
        }
        test_field_collisions();
        fn test_field_rx_length_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_length_errors) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_length_errors)
                )
            );
        }
        test_field_rx_length_errors();
        fn test_field_rx_over_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_over_errors) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_over_errors)
                )
            );
        }
        test_field_rx_over_errors();
        fn test_field_rx_crc_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_crc_errors) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_crc_errors)
                )
            );
        }
        test_field_rx_crc_errors();
        fn test_field_rx_frame_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_frame_errors) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_frame_errors)
                )
            );
        }
        test_field_rx_frame_errors();
        fn test_field_rx_fifo_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_fifo_errors) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_fifo_errors)
                )
            );
        }
        test_field_rx_fifo_errors();
        fn test_field_rx_missed_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_missed_errors) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_missed_errors)
                )
            );
        }
        test_field_rx_missed_errors();
        fn test_field_tx_aborted_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_aborted_errors) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(tx_aborted_errors)
                )
            );
        }
        test_field_tx_aborted_errors();
        fn test_field_tx_carrier_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_carrier_errors) as usize - ptr as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(tx_carrier_errors)
                )
            );
        }
        test_field_tx_carrier_errors();
        fn test_field_tx_fifo_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_fifo_errors) as usize - ptr as usize
                },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(tx_fifo_errors)
                )
            );
        }
        test_field_tx_fifo_errors();
        fn test_field_tx_heartbeat_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_heartbeat_errors) as usize - ptr as usize
                },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(tx_heartbeat_errors)
                )
            );
        }
        test_field_tx_heartbeat_errors();
        fn test_field_tx_window_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_window_errors) as usize - ptr as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(tx_window_errors)
                )
            );
        }
        test_field_tx_window_errors();
        fn test_field_rx_compressed() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_compressed) as usize - ptr as usize
                },
                168usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_compressed)
                )
            );
        }
        test_field_rx_compressed();
        fn test_field_tx_compressed() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tx_compressed) as usize - ptr as usize
                },
                176usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(tx_compressed)
                )
            );
        }
        test_field_tx_compressed();
        fn test_field_rx_nohandler() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_stats64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rx_nohandler) as usize - ptr as usize
                },
                184usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_stats64),
                    "::",
                    stringify!(rx_nohandler)
                )
            );
        }
        test_field_rx_nohandler();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rtnl_link_ifmap {
        pub mem_start: __lkl__u64,
        pub mem_end: __lkl__u64,
        pub base_addr: __lkl__u64,
        pub irq: __lkl__u16,
        pub dma: __lkl__u8,
        pub port: __lkl__u8,
    }
    #[test]
    fn bindgen_test_layout_lkl_rtnl_link_ifmap() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rtnl_link_ifmap>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_rtnl_link_ifmap))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rtnl_link_ifmap>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_rtnl_link_ifmap))
        );
        fn test_field_mem_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mem_start) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_ifmap),
                    "::",
                    stringify!(mem_start)
                )
            );
        }
        test_field_mem_start();
        fn test_field_mem_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mem_end) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_ifmap),
                    "::",
                    stringify!(mem_end)
                )
            );
        }
        test_field_mem_end();
        fn test_field_base_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).base_addr) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_ifmap),
                    "::",
                    stringify!(base_addr)
                )
            );
        }
        test_field_base_addr();
        fn test_field_irq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).irq) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_ifmap),
                    "::",
                    stringify!(irq)
                )
            );
        }
        test_field_irq();
        fn test_field_dma() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dma) as usize - ptr as usize
                },
                26usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_ifmap),
                    "::",
                    stringify!(dma)
                )
            );
        }
        test_field_dma();
        fn test_field_port() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnl_link_ifmap>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
                },
                27usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnl_link_ifmap),
                    "::",
                    stringify!(port)
                )
            );
        }
        test_field_port();
    }
    pub const LKL_IFLA_UNSPEC: _bindgen_ty_56 = 0;
    pub const LKL_IFLA_ADDRESS: _bindgen_ty_56 = 1;
    pub const LKL_IFLA_BROADCAST: _bindgen_ty_56 = 2;
    pub const LKL_IFLA_IFNAME: _bindgen_ty_56 = 3;
    pub const LKL_IFLA_MTU: _bindgen_ty_56 = 4;
    pub const LKL_IFLA_LINK: _bindgen_ty_56 = 5;
    pub const LKL_IFLA_QDISC: _bindgen_ty_56 = 6;
    pub const LKL_IFLA_STATS: _bindgen_ty_56 = 7;
    pub const LKL_IFLA_COST: _bindgen_ty_56 = 8;
    pub const LKL_IFLA_PRIORITY: _bindgen_ty_56 = 9;
    pub const LKL_IFLA_MASTER: _bindgen_ty_56 = 10;
    pub const LKL_IFLA_WIRELESS: _bindgen_ty_56 = 11;
    pub const LKL_IFLA_PROTINFO: _bindgen_ty_56 = 12;
    pub const LKL_IFLA_TXQLEN: _bindgen_ty_56 = 13;
    pub const LKL_IFLA_MAP: _bindgen_ty_56 = 14;
    pub const LKL_IFLA_WEIGHT: _bindgen_ty_56 = 15;
    pub const LKL_IFLA_OPERSTATE: _bindgen_ty_56 = 16;
    pub const LKL_IFLA_LINKMODE: _bindgen_ty_56 = 17;
    pub const LKL_IFLA_LINKINFO: _bindgen_ty_56 = 18;
    pub const LKL_IFLA_NET_NS_PID: _bindgen_ty_56 = 19;
    pub const LKL_IFLA_IFALIAS: _bindgen_ty_56 = 20;
    pub const LKL_IFLA_NUM_VF: _bindgen_ty_56 = 21;
    pub const LKL_IFLA_VFINFO_LIST: _bindgen_ty_56 = 22;
    pub const LKL_IFLA_STATS64: _bindgen_ty_56 = 23;
    pub const LKL_IFLA_VF_PORTS: _bindgen_ty_56 = 24;
    pub const LKL_IFLA_PORT_SELF: _bindgen_ty_56 = 25;
    pub const LKL_IFLA_AF_SPEC: _bindgen_ty_56 = 26;
    pub const LKL_IFLA_GROUP: _bindgen_ty_56 = 27;
    pub const LKL_IFLA_NET_NS_FD: _bindgen_ty_56 = 28;
    pub const LKL_IFLA_EXT_MASK: _bindgen_ty_56 = 29;
    pub const LKL_IFLA_PROMISCUITY: _bindgen_ty_56 = 30;
    pub const LKL_IFLA_NUM_TX_QUEUES: _bindgen_ty_56 = 31;
    pub const LKL_IFLA_NUM_RX_QUEUES: _bindgen_ty_56 = 32;
    pub const LKL_IFLA_CARRIER: _bindgen_ty_56 = 33;
    pub const LKL_IFLA_PHYS_PORT_ID: _bindgen_ty_56 = 34;
    pub const LKL_IFLA_CARRIER_CHANGES: _bindgen_ty_56 = 35;
    pub const LKL_IFLA_PHYS_SWITCH_ID: _bindgen_ty_56 = 36;
    pub const LKL_IFLA_LINK_NETNSID: _bindgen_ty_56 = 37;
    pub const LKL_IFLA_PHYS_PORT_NAME: _bindgen_ty_56 = 38;
    pub const LKL_IFLA_PROTO_DOWN: _bindgen_ty_56 = 39;
    pub const LKL_IFLA_GSO_MAX_SEGS: _bindgen_ty_56 = 40;
    pub const LKL_IFLA_GSO_MAX_SIZE: _bindgen_ty_56 = 41;
    pub const LKL_IFLA_PAD: _bindgen_ty_56 = 42;
    pub const LKL_IFLA_XDP: _bindgen_ty_56 = 43;
    pub const LKL_IFLA_EVENT: _bindgen_ty_56 = 44;
    pub const LKL_IFLA_NEW_NETNSID: _bindgen_ty_56 = 45;
    pub const LKL_IFLA_IF_NETNSID: _bindgen_ty_56 = 46;
    pub const LKL_IFLA_TARGET_NETNSID: _bindgen_ty_56 = 46;
    pub const LKL_IFLA_CARRIER_UP_COUNT: _bindgen_ty_56 = 47;
    pub const LKL_IFLA_CARRIER_DOWN_COUNT: _bindgen_ty_56 = 48;
    pub const LKL_IFLA_NEW_IFINDEX: _bindgen_ty_56 = 49;
    pub const LKL_IFLA_MIN_MTU: _bindgen_ty_56 = 50;
    pub const LKL_IFLA_MAX_MTU: _bindgen_ty_56 = 51;
    pub const LKL_IFLA_PROP_LIST: _bindgen_ty_56 = 52;
    pub const LKL_IFLA_ALT_IFNAME: _bindgen_ty_56 = 53;
    pub const LKL_IFLA_PERM_ADDRESS: _bindgen_ty_56 = 54;
    pub const LKL_IFLA_PROTO_DOWN_REASON: _bindgen_ty_56 = 55;
    pub const __LKL__IFLA_MAX: _bindgen_ty_56 = 56;
    pub type _bindgen_ty_56 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_PROTO_DOWN_REASON_UNSPEC: _bindgen_ty_57 = 0;
    pub const LKL_IFLA_PROTO_DOWN_REASON_MASK: _bindgen_ty_57 = 1;
    pub const LKL_IFLA_PROTO_DOWN_REASON_VALUE: _bindgen_ty_57 = 2;
    pub const __LKL__IFLA_PROTO_DOWN_REASON_CNT: _bindgen_ty_57 = 3;
    pub const LKL_IFLA_PROTO_DOWN_REASON_MAX: _bindgen_ty_57 = 2;
    pub type _bindgen_ty_57 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_INET_UNSPEC: _bindgen_ty_58 = 0;
    pub const LKL_IFLA_INET_CONF: _bindgen_ty_58 = 1;
    pub const __LKL__IFLA_INET_MAX: _bindgen_ty_58 = 2;
    pub type _bindgen_ty_58 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_INET6_UNSPEC: _bindgen_ty_59 = 0;
    pub const LKL_IFLA_INET6_FLAGS: _bindgen_ty_59 = 1;
    pub const LKL_IFLA_INET6_CONF: _bindgen_ty_59 = 2;
    pub const LKL_IFLA_INET6_STATS: _bindgen_ty_59 = 3;
    pub const LKL_IFLA_INET6_MCAST: _bindgen_ty_59 = 4;
    pub const LKL_IFLA_INET6_CACHEINFO: _bindgen_ty_59 = 5;
    pub const LKL_IFLA_INET6_ICMP6STATS: _bindgen_ty_59 = 6;
    pub const LKL_IFLA_INET6_TOKEN: _bindgen_ty_59 = 7;
    pub const LKL_IFLA_INET6_ADDR_GEN_MODE: _bindgen_ty_59 = 8;
    pub const __LKL__IFLA_INET6_MAX: _bindgen_ty_59 = 9;
    pub type _bindgen_ty_59 = ::std::os::raw::c_uint;
    pub const lkl_in6_addr_gen_mode_LKL_IN6_ADDR_GEN_MODE_EUI64: lkl_in6_addr_gen_mode = 0;
    pub const lkl_in6_addr_gen_mode_LKL_IN6_ADDR_GEN_MODE_NONE: lkl_in6_addr_gen_mode = 1;
    pub const lkl_in6_addr_gen_mode_LKL_IN6_ADDR_GEN_MODE_STABLE_PRIVACY: lkl_in6_addr_gen_mode = 2;
    pub const lkl_in6_addr_gen_mode_LKL_IN6_ADDR_GEN_MODE_RANDOM: lkl_in6_addr_gen_mode = 3;
    pub type lkl_in6_addr_gen_mode = ::std::os::raw::c_uint;
    pub const LKL_IFLA_BR_UNSPEC: _bindgen_ty_60 = 0;
    pub const LKL_IFLA_BR_FORWARD_DELAY: _bindgen_ty_60 = 1;
    pub const LKL_IFLA_BR_HELLO_TIME: _bindgen_ty_60 = 2;
    pub const LKL_IFLA_BR_MAX_AGE: _bindgen_ty_60 = 3;
    pub const LKL_IFLA_BR_AGEING_TIME: _bindgen_ty_60 = 4;
    pub const LKL_IFLA_BR_STP_STATE: _bindgen_ty_60 = 5;
    pub const LKL_IFLA_BR_PRIORITY: _bindgen_ty_60 = 6;
    pub const LKL_IFLA_BR_VLAN_FILTERING: _bindgen_ty_60 = 7;
    pub const LKL_IFLA_BR_VLAN_PROTOCOL: _bindgen_ty_60 = 8;
    pub const LKL_IFLA_BR_GROUP_FWD_MASK: _bindgen_ty_60 = 9;
    pub const LKL_IFLA_BR_ROOT_ID: _bindgen_ty_60 = 10;
    pub const LKL_IFLA_BR_BRIDGE_ID: _bindgen_ty_60 = 11;
    pub const LKL_IFLA_BR_ROOT_PORT: _bindgen_ty_60 = 12;
    pub const LKL_IFLA_BR_ROOT_PATH_COST: _bindgen_ty_60 = 13;
    pub const LKL_IFLA_BR_TOPOLOGY_CHANGE: _bindgen_ty_60 = 14;
    pub const LKL_IFLA_BR_TOPOLOGY_CHANGE_DETECTED: _bindgen_ty_60 = 15;
    pub const LKL_IFLA_BR_HELLO_TIMER: _bindgen_ty_60 = 16;
    pub const LKL_IFLA_BR_TCN_TIMER: _bindgen_ty_60 = 17;
    pub const LKL_IFLA_BR_TOPOLOGY_CHANGE_TIMER: _bindgen_ty_60 = 18;
    pub const LKL_IFLA_BR_GC_TIMER: _bindgen_ty_60 = 19;
    pub const LKL_IFLA_BR_GROUP_ADDR: _bindgen_ty_60 = 20;
    pub const LKL_IFLA_BR_FDB_FLUSH: _bindgen_ty_60 = 21;
    pub const LKL_IFLA_BR_MCAST_ROUTER: _bindgen_ty_60 = 22;
    pub const LKL_IFLA_BR_MCAST_SNOOPING: _bindgen_ty_60 = 23;
    pub const LKL_IFLA_BR_MCAST_QUERY_USE_IFADDR: _bindgen_ty_60 = 24;
    pub const LKL_IFLA_BR_MCAST_QUERIER: _bindgen_ty_60 = 25;
    pub const LKL_IFLA_BR_MCAST_HASH_ELASTICITY: _bindgen_ty_60 = 26;
    pub const LKL_IFLA_BR_MCAST_HASH_MAX: _bindgen_ty_60 = 27;
    pub const LKL_IFLA_BR_MCAST_LAST_MEMBER_CNT: _bindgen_ty_60 = 28;
    pub const LKL_IFLA_BR_MCAST_STARTUP_QUERY_CNT: _bindgen_ty_60 = 29;
    pub const LKL_IFLA_BR_MCAST_LAST_MEMBER_INTVL: _bindgen_ty_60 = 30;
    pub const LKL_IFLA_BR_MCAST_MEMBERSHIP_INTVL: _bindgen_ty_60 = 31;
    pub const LKL_IFLA_BR_MCAST_QUERIER_INTVL: _bindgen_ty_60 = 32;
    pub const LKL_IFLA_BR_MCAST_QUERY_INTVL: _bindgen_ty_60 = 33;
    pub const LKL_IFLA_BR_MCAST_QUERY_RESPONSE_INTVL: _bindgen_ty_60 = 34;
    pub const LKL_IFLA_BR_MCAST_STARTUP_QUERY_INTVL: _bindgen_ty_60 = 35;
    pub const LKL_IFLA_BR_NF_CALL_IPTABLES: _bindgen_ty_60 = 36;
    pub const LKL_IFLA_BR_NF_CALL_IP6TABLES: _bindgen_ty_60 = 37;
    pub const LKL_IFLA_BR_NF_CALL_ARPTABLES: _bindgen_ty_60 = 38;
    pub const LKL_IFLA_BR_VLAN_DEFAULT_PVID: _bindgen_ty_60 = 39;
    pub const LKL_IFLA_BR_PAD: _bindgen_ty_60 = 40;
    pub const LKL_IFLA_BR_VLAN_STATS_ENABLED: _bindgen_ty_60 = 41;
    pub const LKL_IFLA_BR_MCAST_STATS_ENABLED: _bindgen_ty_60 = 42;
    pub const LKL_IFLA_BR_MCAST_IGMP_VERSION: _bindgen_ty_60 = 43;
    pub const LKL_IFLA_BR_MCAST_MLD_VERSION: _bindgen_ty_60 = 44;
    pub const LKL_IFLA_BR_VLAN_STATS_PER_PORT: _bindgen_ty_60 = 45;
    pub const LKL_IFLA_BR_MULTI_BOOLOPT: _bindgen_ty_60 = 46;
    pub const __LKL__IFLA_BR_MAX: _bindgen_ty_60 = 47;
    pub type _bindgen_ty_60 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_bridge_id {
        pub prio: [__lkl__u8; 2usize],
        pub addr: [__lkl__u8; 6usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_bridge_id() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_bridge_id>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifla_bridge_id))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_bridge_id>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_ifla_bridge_id))
        );
        fn test_field_prio() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_bridge_id>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prio) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_bridge_id),
                    "::",
                    stringify!(prio)
                )
            );
        }
        test_field_prio();
        fn test_field_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_bridge_id>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_bridge_id),
                    "::",
                    stringify!(addr)
                )
            );
        }
        test_field_addr();
    }
    pub const LKL_BRIDGE_MODE_UNSPEC: _bindgen_ty_61 = 0;
    pub const LKL_BRIDGE_MODE_HAIRPIN: _bindgen_ty_61 = 1;
    pub type _bindgen_ty_61 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_BRPORT_UNSPEC: _bindgen_ty_62 = 0;
    pub const LKL_IFLA_BRPORT_STATE: _bindgen_ty_62 = 1;
    pub const LKL_IFLA_BRPORT_PRIORITY: _bindgen_ty_62 = 2;
    pub const LKL_IFLA_BRPORT_COST: _bindgen_ty_62 = 3;
    pub const LKL_IFLA_BRPORT_MODE: _bindgen_ty_62 = 4;
    pub const LKL_IFLA_BRPORT_GUARD: _bindgen_ty_62 = 5;
    pub const LKL_IFLA_BRPORT_PROTECT: _bindgen_ty_62 = 6;
    pub const LKL_IFLA_BRPORT_FAST_LEAVE: _bindgen_ty_62 = 7;
    pub const LKL_IFLA_BRPORT_LEARNING: _bindgen_ty_62 = 8;
    pub const LKL_IFLA_BRPORT_UNICAST_FLOOD: _bindgen_ty_62 = 9;
    pub const LKL_IFLA_BRPORT_PROXYARP: _bindgen_ty_62 = 10;
    pub const LKL_IFLA_BRPORT_LEARNING_SYNC: _bindgen_ty_62 = 11;
    pub const LKL_IFLA_BRPORT_PROXYARP_WIFI: _bindgen_ty_62 = 12;
    pub const LKL_IFLA_BRPORT_ROOT_ID: _bindgen_ty_62 = 13;
    pub const LKL_IFLA_BRPORT_BRIDGE_ID: _bindgen_ty_62 = 14;
    pub const LKL_IFLA_BRPORT_DESIGNATED_PORT: _bindgen_ty_62 = 15;
    pub const LKL_IFLA_BRPORT_DESIGNATED_COST: _bindgen_ty_62 = 16;
    pub const LKL_IFLA_BRPORT_ID: _bindgen_ty_62 = 17;
    pub const LKL_IFLA_BRPORT_NO: _bindgen_ty_62 = 18;
    pub const LKL_IFLA_BRPORT_TOPOLOGY_CHANGE_ACK: _bindgen_ty_62 = 19;
    pub const LKL_IFLA_BRPORT_CONFIG_PENDING: _bindgen_ty_62 = 20;
    pub const LKL_IFLA_BRPORT_MESSAGE_AGE_TIMER: _bindgen_ty_62 = 21;
    pub const LKL_IFLA_BRPORT_FORWARD_DELAY_TIMER: _bindgen_ty_62 = 22;
    pub const LKL_IFLA_BRPORT_HOLD_TIMER: _bindgen_ty_62 = 23;
    pub const LKL_IFLA_BRPORT_FLUSH: _bindgen_ty_62 = 24;
    pub const LKL_IFLA_BRPORT_MULTICAST_ROUTER: _bindgen_ty_62 = 25;
    pub const LKL_IFLA_BRPORT_PAD: _bindgen_ty_62 = 26;
    pub const LKL_IFLA_BRPORT_MCAST_FLOOD: _bindgen_ty_62 = 27;
    pub const LKL_IFLA_BRPORT_MCAST_TO_UCAST: _bindgen_ty_62 = 28;
    pub const LKL_IFLA_BRPORT_VLAN_TUNNEL: _bindgen_ty_62 = 29;
    pub const LKL_IFLA_BRPORT_BCAST_FLOOD: _bindgen_ty_62 = 30;
    pub const LKL_IFLA_BRPORT_GROUP_FWD_MASK: _bindgen_ty_62 = 31;
    pub const LKL_IFLA_BRPORT_NEIGH_SUPPRESS: _bindgen_ty_62 = 32;
    pub const LKL_IFLA_BRPORT_ISOLATED: _bindgen_ty_62 = 33;
    pub const LKL_IFLA_BRPORT_BACKUP_PORT: _bindgen_ty_62 = 34;
    pub const LKL_IFLA_BRPORT_MRP_RING_OPEN: _bindgen_ty_62 = 35;
    pub const LKL_IFLA_BRPORT_MRP_IN_OPEN: _bindgen_ty_62 = 36;
    pub const __LKL__IFLA_BRPORT_MAX: _bindgen_ty_62 = 37;
    pub type _bindgen_ty_62 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_cacheinfo {
        pub max_reasm_len: __lkl__u32,
        pub tstamp: __lkl__u32,
        pub reachable_time: __lkl__u32,
        pub retrans_time: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_cacheinfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_cacheinfo>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_ifla_cacheinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_cacheinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_cacheinfo))
        );
        fn test_field_max_reasm_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_reasm_len) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_cacheinfo),
                    "::",
                    stringify!(max_reasm_len)
                )
            );
        }
        test_field_max_reasm_len();
        fn test_field_tstamp() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tstamp) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_cacheinfo),
                    "::",
                    stringify!(tstamp)
                )
            );
        }
        test_field_tstamp();
        fn test_field_reachable_time() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reachable_time) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_cacheinfo),
                    "::",
                    stringify!(reachable_time)
                )
            );
        }
        test_field_reachable_time();
        fn test_field_retrans_time() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).retrans_time) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_cacheinfo),
                    "::",
                    stringify!(retrans_time)
                )
            );
        }
        test_field_retrans_time();
    }
    pub const LKL_IFLA_INFO_UNSPEC: _bindgen_ty_63 = 0;
    pub const LKL_IFLA_INFO_KIND: _bindgen_ty_63 = 1;
    pub const LKL_IFLA_INFO_DATA: _bindgen_ty_63 = 2;
    pub const LKL_IFLA_INFO_XSTATS: _bindgen_ty_63 = 3;
    pub const LKL_IFLA_INFO_SLAVE_KIND: _bindgen_ty_63 = 4;
    pub const LKL_IFLA_INFO_SLAVE_DATA: _bindgen_ty_63 = 5;
    pub const __LKL__IFLA_INFO_MAX: _bindgen_ty_63 = 6;
    pub type _bindgen_ty_63 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_VLAN_UNSPEC: _bindgen_ty_64 = 0;
    pub const LKL_IFLA_VLAN_ID: _bindgen_ty_64 = 1;
    pub const LKL_IFLA_VLAN_FLAGS: _bindgen_ty_64 = 2;
    pub const LKL_IFLA_VLAN_EGRESS_QOS: _bindgen_ty_64 = 3;
    pub const LKL_IFLA_VLAN_INGRESS_QOS: _bindgen_ty_64 = 4;
    pub const LKL_IFLA_VLAN_PROTOCOL: _bindgen_ty_64 = 5;
    pub const __LKL__IFLA_VLAN_MAX: _bindgen_ty_64 = 6;
    pub type _bindgen_ty_64 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vlan_flags {
        pub flags: __lkl__u32,
        pub mask: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vlan_flags() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vlan_flags>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifla_vlan_flags))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vlan_flags>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vlan_flags))
        );
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vlan_flags>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vlan_flags),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vlan_flags>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vlan_flags),
                    "::",
                    stringify!(mask)
                )
            );
        }
        test_field_mask();
    }
    pub const LKL_IFLA_VLAN_QOS_UNSPEC: _bindgen_ty_65 = 0;
    pub const LKL_IFLA_VLAN_QOS_MAPPING: _bindgen_ty_65 = 1;
    pub const __LKL__IFLA_VLAN_QOS_MAX: _bindgen_ty_65 = 2;
    pub type _bindgen_ty_65 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vlan_qos_mapping {
        pub from: __lkl__u32,
        pub to: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vlan_qos_mapping() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vlan_qos_mapping>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifla_vlan_qos_mapping))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vlan_qos_mapping>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vlan_qos_mapping))
        );
        fn test_field_from() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vlan_qos_mapping>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vlan_qos_mapping),
                    "::",
                    stringify!(from)
                )
            );
        }
        test_field_from();
        fn test_field_to() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vlan_qos_mapping>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vlan_qos_mapping),
                    "::",
                    stringify!(to)
                )
            );
        }
        test_field_to();
    }
    pub const LKL_IFLA_MACVLAN_UNSPEC: _bindgen_ty_66 = 0;
    pub const LKL_IFLA_MACVLAN_MODE: _bindgen_ty_66 = 1;
    pub const LKL_IFLA_MACVLAN_FLAGS: _bindgen_ty_66 = 2;
    pub const LKL_IFLA_MACVLAN_MACADDR_MODE: _bindgen_ty_66 = 3;
    pub const LKL_IFLA_MACVLAN_MACADDR: _bindgen_ty_66 = 4;
    pub const LKL_IFLA_MACVLAN_MACADDR_DATA: _bindgen_ty_66 = 5;
    pub const LKL_IFLA_MACVLAN_MACADDR_COUNT: _bindgen_ty_66 = 6;
    pub const __LKL__IFLA_MACVLAN_MAX: _bindgen_ty_66 = 7;
    pub type _bindgen_ty_66 = ::std::os::raw::c_uint;
    pub const lkl_macvlan_mode_LKL_MACVLAN_MODE_PRIVATE: lkl_macvlan_mode = 1;
    pub const lkl_macvlan_mode_LKL_MACVLAN_MODE_VEPA: lkl_macvlan_mode = 2;
    pub const lkl_macvlan_mode_LKL_MACVLAN_MODE_BRIDGE: lkl_macvlan_mode = 4;
    pub const lkl_macvlan_mode_LKL_MACVLAN_MODE_PASSTHRU: lkl_macvlan_mode = 8;
    pub const lkl_macvlan_mode_LKL_MACVLAN_MODE_SOURCE: lkl_macvlan_mode = 16;
    pub type lkl_macvlan_mode = ::std::os::raw::c_uint;
    pub const lkl_macvlan_macaddr_mode_LKL_MACVLAN_MACADDR_ADD: lkl_macvlan_macaddr_mode = 0;
    pub const lkl_macvlan_macaddr_mode_LKL_MACVLAN_MACADDR_DEL: lkl_macvlan_macaddr_mode = 1;
    pub const lkl_macvlan_macaddr_mode_LKL_MACVLAN_MACADDR_FLUSH: lkl_macvlan_macaddr_mode = 2;
    pub const lkl_macvlan_macaddr_mode_LKL_MACVLAN_MACADDR_SET: lkl_macvlan_macaddr_mode = 3;
    pub type lkl_macvlan_macaddr_mode = ::std::os::raw::c_uint;
    pub const LKL_IFLA_VRF_UNSPEC: _bindgen_ty_67 = 0;
    pub const LKL_IFLA_VRF_TABLE: _bindgen_ty_67 = 1;
    pub const __LKL__IFLA_VRF_MAX: _bindgen_ty_67 = 2;
    pub type _bindgen_ty_67 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_VRF_PORT_UNSPEC: _bindgen_ty_68 = 0;
    pub const LKL_IFLA_VRF_PORT_TABLE: _bindgen_ty_68 = 1;
    pub const __LKL__IFLA_VRF_PORT_MAX: _bindgen_ty_68 = 2;
    pub type _bindgen_ty_68 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_MACSEC_UNSPEC: _bindgen_ty_69 = 0;
    pub const LKL_IFLA_MACSEC_SCI: _bindgen_ty_69 = 1;
    pub const LKL_IFLA_MACSEC_PORT: _bindgen_ty_69 = 2;
    pub const LKL_IFLA_MACSEC_ICV_LEN: _bindgen_ty_69 = 3;
    pub const LKL_IFLA_MACSEC_CIPHER_SUITE: _bindgen_ty_69 = 4;
    pub const LKL_IFLA_MACSEC_WINDOW: _bindgen_ty_69 = 5;
    pub const LKL_IFLA_MACSEC_ENCODING_SA: _bindgen_ty_69 = 6;
    pub const LKL_IFLA_MACSEC_ENCRYPT: _bindgen_ty_69 = 7;
    pub const LKL_IFLA_MACSEC_PROTECT: _bindgen_ty_69 = 8;
    pub const LKL_IFLA_MACSEC_INC_SCI: _bindgen_ty_69 = 9;
    pub const LKL_IFLA_MACSEC_ES: _bindgen_ty_69 = 10;
    pub const LKL_IFLA_MACSEC_SCB: _bindgen_ty_69 = 11;
    pub const LKL_IFLA_MACSEC_REPLAY_PROTECT: _bindgen_ty_69 = 12;
    pub const LKL_IFLA_MACSEC_VALIDATION: _bindgen_ty_69 = 13;
    pub const LKL_IFLA_MACSEC_PAD: _bindgen_ty_69 = 14;
    pub const LKL_IFLA_MACSEC_OFFLOAD: _bindgen_ty_69 = 15;
    pub const __LKL__IFLA_MACSEC_MAX: _bindgen_ty_69 = 16;
    pub type _bindgen_ty_69 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_XFRM_UNSPEC: _bindgen_ty_70 = 0;
    pub const LKL_IFLA_XFRM_LINK: _bindgen_ty_70 = 1;
    pub const LKL_IFLA_XFRM_IF_ID: _bindgen_ty_70 = 2;
    pub const __LKL__IFLA_XFRM_MAX: _bindgen_ty_70 = 3;
    pub type _bindgen_ty_70 = ::std::os::raw::c_uint;
    pub const lkl_macsec_validation_type_LKL_MACSEC_VALIDATE_DISABLED: lkl_macsec_validation_type = 0;
    pub const lkl_macsec_validation_type_LKL_MACSEC_VALIDATE_CHECK: lkl_macsec_validation_type = 1;
    pub const lkl_macsec_validation_type_LKL_MACSEC_VALIDATE_STRICT: lkl_macsec_validation_type = 2;
    pub const lkl_macsec_validation_type___LKL__MACSEC_VALIDATE_END: lkl_macsec_validation_type = 3;
    pub const lkl_macsec_validation_type_LKL_MACSEC_VALIDATE_MAX: lkl_macsec_validation_type = 2;
    pub type lkl_macsec_validation_type = ::std::os::raw::c_uint;
    pub const lkl_macsec_offload_LKL_MACSEC_OFFLOAD_OFF: lkl_macsec_offload = 0;
    pub const lkl_macsec_offload_LKL_MACSEC_OFFLOAD_PHY: lkl_macsec_offload = 1;
    pub const lkl_macsec_offload_LKL_MACSEC_OFFLOAD_MAC: lkl_macsec_offload = 2;
    pub const lkl_macsec_offload___LKL__MACSEC_OFFLOAD_END: lkl_macsec_offload = 3;
    pub const lkl_macsec_offload_LKL_MACSEC_OFFLOAD_MAX: lkl_macsec_offload = 2;
    pub type lkl_macsec_offload = ::std::os::raw::c_uint;
    pub const LKL_IFLA_IPVLAN_UNSPEC: _bindgen_ty_71 = 0;
    pub const LKL_IFLA_IPVLAN_MODE: _bindgen_ty_71 = 1;
    pub const LKL_IFLA_IPVLAN_FLAGS: _bindgen_ty_71 = 2;
    pub const __LKL__IFLA_IPVLAN_MAX: _bindgen_ty_71 = 3;
    pub type _bindgen_ty_71 = ::std::os::raw::c_uint;
    pub const lkl_ipvlan_mode_LKL_IPVLAN_MODE_L2: lkl_ipvlan_mode = 0;
    pub const lkl_ipvlan_mode_LKL_IPVLAN_MODE_L3: lkl_ipvlan_mode = 1;
    pub const lkl_ipvlan_mode_LKL_IPVLAN_MODE_L3S: lkl_ipvlan_mode = 2;
    pub const lkl_ipvlan_mode_LKL_IPVLAN_MODE_MAX: lkl_ipvlan_mode = 3;
    pub type lkl_ipvlan_mode = ::std::os::raw::c_uint;
    pub const LKL_IFLA_VXLAN_UNSPEC: _bindgen_ty_72 = 0;
    pub const LKL_IFLA_VXLAN_ID: _bindgen_ty_72 = 1;
    pub const LKL_IFLA_VXLAN_GROUP: _bindgen_ty_72 = 2;
    pub const LKL_IFLA_VXLAN_LINK: _bindgen_ty_72 = 3;
    pub const LKL_IFLA_VXLAN_LOCAL: _bindgen_ty_72 = 4;
    pub const LKL_IFLA_VXLAN_TTL: _bindgen_ty_72 = 5;
    pub const LKL_IFLA_VXLAN_TOS: _bindgen_ty_72 = 6;
    pub const LKL_IFLA_VXLAN_LEARNING: _bindgen_ty_72 = 7;
    pub const LKL_IFLA_VXLAN_AGEING: _bindgen_ty_72 = 8;
    pub const LKL_IFLA_VXLAN_LIMIT: _bindgen_ty_72 = 9;
    pub const LKL_IFLA_VXLAN_PORT_RANGE: _bindgen_ty_72 = 10;
    pub const LKL_IFLA_VXLAN_PROXY: _bindgen_ty_72 = 11;
    pub const LKL_IFLA_VXLAN_RSC: _bindgen_ty_72 = 12;
    pub const LKL_IFLA_VXLAN_L2MISS: _bindgen_ty_72 = 13;
    pub const LKL_IFLA_VXLAN_L3MISS: _bindgen_ty_72 = 14;
    pub const LKL_IFLA_VXLAN_PORT: _bindgen_ty_72 = 15;
    pub const LKL_IFLA_VXLAN_GROUP6: _bindgen_ty_72 = 16;
    pub const LKL_IFLA_VXLAN_LOCAL6: _bindgen_ty_72 = 17;
    pub const LKL_IFLA_VXLAN_UDP_CSUM: _bindgen_ty_72 = 18;
    pub const LKL_IFLA_VXLAN_UDP_ZERO_CSUM6_TX: _bindgen_ty_72 = 19;
    pub const LKL_IFLA_VXLAN_UDP_ZERO_CSUM6_RX: _bindgen_ty_72 = 20;
    pub const LKL_IFLA_VXLAN_REMCSUM_TX: _bindgen_ty_72 = 21;
    pub const LKL_IFLA_VXLAN_REMCSUM_RX: _bindgen_ty_72 = 22;
    pub const LKL_IFLA_VXLAN_GBP: _bindgen_ty_72 = 23;
    pub const LKL_IFLA_VXLAN_REMCSUM_NOPARTIAL: _bindgen_ty_72 = 24;
    pub const LKL_IFLA_VXLAN_COLLECT_METADATA: _bindgen_ty_72 = 25;
    pub const LKL_IFLA_VXLAN_LABEL: _bindgen_ty_72 = 26;
    pub const LKL_IFLA_VXLAN_GPE: _bindgen_ty_72 = 27;
    pub const LKL_IFLA_VXLAN_TTL_INHERIT: _bindgen_ty_72 = 28;
    pub const LKL_IFLA_VXLAN_DF: _bindgen_ty_72 = 29;
    pub const __LKL__IFLA_VXLAN_MAX: _bindgen_ty_72 = 30;
    pub type _bindgen_ty_72 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vxlan_port_range {
        pub low: __lkl__be16,
        pub high: __lkl__be16,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vxlan_port_range() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vxlan_port_range>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_ifla_vxlan_port_range))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vxlan_port_range>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vxlan_port_range))
        );
        fn test_field_low() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vxlan_port_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vxlan_port_range),
                    "::",
                    stringify!(low)
                )
            );
        }
        test_field_low();
        fn test_field_high() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vxlan_port_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vxlan_port_range),
                    "::",
                    stringify!(high)
                )
            );
        }
        test_field_high();
    }
    pub const lkl_ifla_vxlan_df_LKL_VXLAN_DF_UNSET: lkl_ifla_vxlan_df = 0;
    pub const lkl_ifla_vxlan_df_LKL_VXLAN_DF_SET: lkl_ifla_vxlan_df = 1;
    pub const lkl_ifla_vxlan_df_LKL_VXLAN_DF_INHERIT: lkl_ifla_vxlan_df = 2;
    pub const lkl_ifla_vxlan_df___LKL__VXLAN_DF_END: lkl_ifla_vxlan_df = 3;
    pub const lkl_ifla_vxlan_df_LKL_VXLAN_DF_MAX: lkl_ifla_vxlan_df = 2;
    pub type lkl_ifla_vxlan_df = ::std::os::raw::c_uint;
    pub const LKL_IFLA_GENEVE_UNSPEC: _bindgen_ty_73 = 0;
    pub const LKL_IFLA_GENEVE_ID: _bindgen_ty_73 = 1;
    pub const LKL_IFLA_GENEVE_REMOTE: _bindgen_ty_73 = 2;
    pub const LKL_IFLA_GENEVE_TTL: _bindgen_ty_73 = 3;
    pub const LKL_IFLA_GENEVE_TOS: _bindgen_ty_73 = 4;
    pub const LKL_IFLA_GENEVE_PORT: _bindgen_ty_73 = 5;
    pub const LKL_IFLA_GENEVE_COLLECT_METADATA: _bindgen_ty_73 = 6;
    pub const LKL_IFLA_GENEVE_REMOTE6: _bindgen_ty_73 = 7;
    pub const LKL_IFLA_GENEVE_UDP_CSUM: _bindgen_ty_73 = 8;
    pub const LKL_IFLA_GENEVE_UDP_ZERO_CSUM6_TX: _bindgen_ty_73 = 9;
    pub const LKL_IFLA_GENEVE_UDP_ZERO_CSUM6_RX: _bindgen_ty_73 = 10;
    pub const LKL_IFLA_GENEVE_LABEL: _bindgen_ty_73 = 11;
    pub const LKL_IFLA_GENEVE_TTL_INHERIT: _bindgen_ty_73 = 12;
    pub const LKL_IFLA_GENEVE_DF: _bindgen_ty_73 = 13;
    pub const __LKL__IFLA_GENEVE_MAX: _bindgen_ty_73 = 14;
    pub type _bindgen_ty_73 = ::std::os::raw::c_uint;
    pub const lkl_ifla_geneve_df_LKL_GENEVE_DF_UNSET: lkl_ifla_geneve_df = 0;
    pub const lkl_ifla_geneve_df_LKL_GENEVE_DF_SET: lkl_ifla_geneve_df = 1;
    pub const lkl_ifla_geneve_df_LKL_GENEVE_DF_INHERIT: lkl_ifla_geneve_df = 2;
    pub const lkl_ifla_geneve_df___LKL__GENEVE_DF_END: lkl_ifla_geneve_df = 3;
    pub const lkl_ifla_geneve_df_LKL_GENEVE_DF_MAX: lkl_ifla_geneve_df = 2;
    pub type lkl_ifla_geneve_df = ::std::os::raw::c_uint;
    pub const LKL_IFLA_BAREUDP_UNSPEC: _bindgen_ty_74 = 0;
    pub const LKL_IFLA_BAREUDP_PORT: _bindgen_ty_74 = 1;
    pub const LKL_IFLA_BAREUDP_ETHERTYPE: _bindgen_ty_74 = 2;
    pub const LKL_IFLA_BAREUDP_SRCPORT_MIN: _bindgen_ty_74 = 3;
    pub const LKL_IFLA_BAREUDP_MULTIPROTO_MODE: _bindgen_ty_74 = 4;
    pub const __LKL__IFLA_BAREUDP_MAX: _bindgen_ty_74 = 5;
    pub type _bindgen_ty_74 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_PPP_UNSPEC: _bindgen_ty_75 = 0;
    pub const LKL_IFLA_PPP_DEV_FD: _bindgen_ty_75 = 1;
    pub const __LKL__IFLA_PPP_MAX: _bindgen_ty_75 = 2;
    pub type _bindgen_ty_75 = ::std::os::raw::c_uint;
    pub const lkl_ifla_gtp_role_LKL_GTP_ROLE_GGSN: lkl_ifla_gtp_role = 0;
    pub const lkl_ifla_gtp_role_LKL_GTP_ROLE_SGSN: lkl_ifla_gtp_role = 1;
    pub type lkl_ifla_gtp_role = ::std::os::raw::c_uint;
    pub const LKL_IFLA_GTP_UNSPEC: _bindgen_ty_76 = 0;
    pub const LKL_IFLA_GTP_FD0: _bindgen_ty_76 = 1;
    pub const LKL_IFLA_GTP_FD1: _bindgen_ty_76 = 2;
    pub const LKL_IFLA_GTP_PDP_HASHSIZE: _bindgen_ty_76 = 3;
    pub const LKL_IFLA_GTP_ROLE: _bindgen_ty_76 = 4;
    pub const __LKL__IFLA_GTP_MAX: _bindgen_ty_76 = 5;
    pub type _bindgen_ty_76 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_BOND_UNSPEC: _bindgen_ty_77 = 0;
    pub const LKL_IFLA_BOND_MODE: _bindgen_ty_77 = 1;
    pub const LKL_IFLA_BOND_ACTIVE_SLAVE: _bindgen_ty_77 = 2;
    pub const LKL_IFLA_BOND_MIIMON: _bindgen_ty_77 = 3;
    pub const LKL_IFLA_BOND_UPDELAY: _bindgen_ty_77 = 4;
    pub const LKL_IFLA_BOND_DOWNDELAY: _bindgen_ty_77 = 5;
    pub const LKL_IFLA_BOND_USE_CARRIER: _bindgen_ty_77 = 6;
    pub const LKL_IFLA_BOND_ARP_INTERVAL: _bindgen_ty_77 = 7;
    pub const LKL_IFLA_BOND_ARP_IP_TARGET: _bindgen_ty_77 = 8;
    pub const LKL_IFLA_BOND_ARP_VALIDATE: _bindgen_ty_77 = 9;
    pub const LKL_IFLA_BOND_ARP_ALL_TARGETS: _bindgen_ty_77 = 10;
    pub const LKL_IFLA_BOND_PRIMARY: _bindgen_ty_77 = 11;
    pub const LKL_IFLA_BOND_PRIMARY_RESELECT: _bindgen_ty_77 = 12;
    pub const LKL_IFLA_BOND_FAIL_OVER_MAC: _bindgen_ty_77 = 13;
    pub const LKL_IFLA_BOND_XMIT_HASH_POLICY: _bindgen_ty_77 = 14;
    pub const LKL_IFLA_BOND_RESEND_IGMP: _bindgen_ty_77 = 15;
    pub const LKL_IFLA_BOND_NUM_PEER_NOTIF: _bindgen_ty_77 = 16;
    pub const LKL_IFLA_BOND_ALL_SLAVES_ACTIVE: _bindgen_ty_77 = 17;
    pub const LKL_IFLA_BOND_MIN_LINKS: _bindgen_ty_77 = 18;
    pub const LKL_IFLA_BOND_LP_INTERVAL: _bindgen_ty_77 = 19;
    pub const LKL_IFLA_BOND_PACKETS_PER_SLAVE: _bindgen_ty_77 = 20;
    pub const LKL_IFLA_BOND_AD_LACP_RATE: _bindgen_ty_77 = 21;
    pub const LKL_IFLA_BOND_AD_SELECT: _bindgen_ty_77 = 22;
    pub const LKL_IFLA_BOND_AD_INFO: _bindgen_ty_77 = 23;
    pub const LKL_IFLA_BOND_AD_ACTOR_SYS_PRIO: _bindgen_ty_77 = 24;
    pub const LKL_IFLA_BOND_AD_USER_PORT_KEY: _bindgen_ty_77 = 25;
    pub const LKL_IFLA_BOND_AD_ACTOR_SYSTEM: _bindgen_ty_77 = 26;
    pub const LKL_IFLA_BOND_TLB_DYNAMIC_LB: _bindgen_ty_77 = 27;
    pub const LKL_IFLA_BOND_PEER_NOTIF_DELAY: _bindgen_ty_77 = 28;
    pub const __LKL__IFLA_BOND_MAX: _bindgen_ty_77 = 29;
    pub type _bindgen_ty_77 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_BOND_AD_INFO_UNSPEC: _bindgen_ty_78 = 0;
    pub const LKL_IFLA_BOND_AD_INFO_AGGREGATOR: _bindgen_ty_78 = 1;
    pub const LKL_IFLA_BOND_AD_INFO_NUM_PORTS: _bindgen_ty_78 = 2;
    pub const LKL_IFLA_BOND_AD_INFO_ACTOR_KEY: _bindgen_ty_78 = 3;
    pub const LKL_IFLA_BOND_AD_INFO_PARTNER_KEY: _bindgen_ty_78 = 4;
    pub const LKL_IFLA_BOND_AD_INFO_PARTNER_MAC: _bindgen_ty_78 = 5;
    pub const __LKL__IFLA_BOND_AD_INFO_MAX: _bindgen_ty_78 = 6;
    pub type _bindgen_ty_78 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_BOND_SLAVE_UNSPEC: _bindgen_ty_79 = 0;
    pub const LKL_IFLA_BOND_SLAVE_STATE: _bindgen_ty_79 = 1;
    pub const LKL_IFLA_BOND_SLAVE_MII_STATUS: _bindgen_ty_79 = 2;
    pub const LKL_IFLA_BOND_SLAVE_LINK_FAILURE_COUNT: _bindgen_ty_79 = 3;
    pub const LKL_IFLA_BOND_SLAVE_PERM_HWADDR: _bindgen_ty_79 = 4;
    pub const LKL_IFLA_BOND_SLAVE_QUEUE_ID: _bindgen_ty_79 = 5;
    pub const LKL_IFLA_BOND_SLAVE_AD_AGGREGATOR_ID: _bindgen_ty_79 = 6;
    pub const LKL_IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE: _bindgen_ty_79 = 7;
    pub const LKL_IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE: _bindgen_ty_79 = 8;
    pub const __LKL__IFLA_BOND_SLAVE_MAX: _bindgen_ty_79 = 9;
    pub type _bindgen_ty_79 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_VF_INFO_UNSPEC: _bindgen_ty_80 = 0;
    pub const LKL_IFLA_VF_INFO: _bindgen_ty_80 = 1;
    pub const __LKL__IFLA_VF_INFO_MAX: _bindgen_ty_80 = 2;
    pub type _bindgen_ty_80 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_VF_UNSPEC: _bindgen_ty_81 = 0;
    pub const LKL_IFLA_VF_MAC: _bindgen_ty_81 = 1;
    pub const LKL_IFLA_VF_VLAN: _bindgen_ty_81 = 2;
    pub const LKL_IFLA_VF_TX_RATE: _bindgen_ty_81 = 3;
    pub const LKL_IFLA_VF_SPOOFCHK: _bindgen_ty_81 = 4;
    pub const LKL_IFLA_VF_LINK_STATE: _bindgen_ty_81 = 5;
    pub const LKL_IFLA_VF_RATE: _bindgen_ty_81 = 6;
    pub const LKL_IFLA_VF_RSS_QUERY_EN: _bindgen_ty_81 = 7;
    pub const LKL_IFLA_VF_STATS: _bindgen_ty_81 = 8;
    pub const LKL_IFLA_VF_TRUST: _bindgen_ty_81 = 9;
    pub const LKL_IFLA_VF_IB_NODE_GUID: _bindgen_ty_81 = 10;
    pub const LKL_IFLA_VF_IB_PORT_GUID: _bindgen_ty_81 = 11;
    pub const LKL_IFLA_VF_VLAN_LIST: _bindgen_ty_81 = 12;
    pub const LKL_IFLA_VF_BROADCAST: _bindgen_ty_81 = 13;
    pub const __LKL__IFLA_VF_MAX: _bindgen_ty_81 = 14;
    pub type _bindgen_ty_81 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_mac {
        pub vf: __lkl__u32,
        pub mac: [__lkl__u8; 32usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_mac() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_mac>(),
            36usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_mac))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_mac>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_mac))
        );
        fn test_field_vf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_mac>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_mac),
                    "::",
                    stringify!(vf)
                )
            );
        }
        test_field_vf();
        fn test_field_mac() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_mac>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mac) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_mac),
                    "::",
                    stringify!(mac)
                )
            );
        }
        test_field_mac();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_broadcast {
        pub broadcast: [__lkl__u8; 32usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_broadcast() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_broadcast>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_broadcast))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_broadcast>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_broadcast))
        );
        fn test_field_broadcast() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_broadcast>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).broadcast) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_broadcast),
                    "::",
                    stringify!(broadcast)
                )
            );
        }
        test_field_broadcast();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_vlan {
        pub vf: __lkl__u32,
        pub vlan: __lkl__u32,
        pub qos: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_vlan() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_vlan>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_vlan))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_vlan>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_vlan))
        );
        fn test_field_vf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_vlan>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_vlan),
                    "::",
                    stringify!(vf)
                )
            );
        }
        test_field_vf();
        fn test_field_vlan() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_vlan>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vlan) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_vlan),
                    "::",
                    stringify!(vlan)
                )
            );
        }
        test_field_vlan();
        fn test_field_qos() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_vlan>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_vlan),
                    "::",
                    stringify!(qos)
                )
            );
        }
        test_field_qos();
    }
    pub const LKL_IFLA_VF_VLAN_INFO_UNSPEC: _bindgen_ty_82 = 0;
    pub const LKL_IFLA_VF_VLAN_INFO: _bindgen_ty_82 = 1;
    pub const __LKL__IFLA_VF_VLAN_INFO_MAX: _bindgen_ty_82 = 2;
    pub type _bindgen_ty_82 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_vlan_info {
        pub vf: __lkl__u32,
        pub vlan: __lkl__u32,
        pub qos: __lkl__u32,
        pub vlan_proto: __lkl__be16,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_vlan_info() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_vlan_info>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_vlan_info))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_vlan_info>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_vlan_info))
        );
        fn test_field_vf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_vlan_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_vlan_info),
                    "::",
                    stringify!(vf)
                )
            );
        }
        test_field_vf();
        fn test_field_vlan() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_vlan_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vlan) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_vlan_info),
                    "::",
                    stringify!(vlan)
                )
            );
        }
        test_field_vlan();
        fn test_field_qos() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_vlan_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_vlan_info),
                    "::",
                    stringify!(qos)
                )
            );
        }
        test_field_qos();
        fn test_field_vlan_proto() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_vlan_info>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vlan_proto) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_vlan_info),
                    "::",
                    stringify!(vlan_proto)
                )
            );
        }
        test_field_vlan_proto();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_tx_rate {
        pub vf: __lkl__u32,
        pub rate: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_tx_rate() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_tx_rate>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_tx_rate))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_tx_rate>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_tx_rate))
        );
        fn test_field_vf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_tx_rate>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_tx_rate),
                    "::",
                    stringify!(vf)
                )
            );
        }
        test_field_vf();
        fn test_field_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_tx_rate>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_tx_rate),
                    "::",
                    stringify!(rate)
                )
            );
        }
        test_field_rate();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_rate {
        pub vf: __lkl__u32,
        pub min_tx_rate: __lkl__u32,
        pub max_tx_rate: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_rate() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_rate>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_rate))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_rate>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_rate))
        );
        fn test_field_vf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_rate>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_rate),
                    "::",
                    stringify!(vf)
                )
            );
        }
        test_field_vf();
        fn test_field_min_tx_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_rate>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).min_tx_rate) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_rate),
                    "::",
                    stringify!(min_tx_rate)
                )
            );
        }
        test_field_min_tx_rate();
        fn test_field_max_tx_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_rate>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_tx_rate) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_rate),
                    "::",
                    stringify!(max_tx_rate)
                )
            );
        }
        test_field_max_tx_rate();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_spoofchk {
        pub vf: __lkl__u32,
        pub setting: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_spoofchk() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_spoofchk>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_spoofchk))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_spoofchk>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_spoofchk))
        );
        fn test_field_vf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_spoofchk>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_spoofchk),
                    "::",
                    stringify!(vf)
                )
            );
        }
        test_field_vf();
        fn test_field_setting() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_spoofchk>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).setting) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_spoofchk),
                    "::",
                    stringify!(setting)
                )
            );
        }
        test_field_setting();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_guid {
        pub vf: __lkl__u32,
        pub guid: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_guid() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_guid>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_guid))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_guid>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_guid))
        );
        fn test_field_vf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_guid>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_guid),
                    "::",
                    stringify!(vf)
                )
            );
        }
        test_field_vf();
        fn test_field_guid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_guid>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).guid) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_guid),
                    "::",
                    stringify!(guid)
                )
            );
        }
        test_field_guid();
    }
    pub const LKL_IFLA_VF_LINK_STATE_AUTO: _bindgen_ty_83 = 0;
    pub const LKL_IFLA_VF_LINK_STATE_ENABLE: _bindgen_ty_83 = 1;
    pub const LKL_IFLA_VF_LINK_STATE_DISABLE: _bindgen_ty_83 = 2;
    pub const __LKL__IFLA_VF_LINK_STATE_MAX: _bindgen_ty_83 = 3;
    pub type _bindgen_ty_83 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_link_state {
        pub vf: __lkl__u32,
        pub link_state: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_link_state() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_link_state>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_link_state))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_link_state>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_link_state))
        );
        fn test_field_vf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_link_state>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_link_state),
                    "::",
                    stringify!(vf)
                )
            );
        }
        test_field_vf();
        fn test_field_link_state() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_link_state>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).link_state) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_link_state),
                    "::",
                    stringify!(link_state)
                )
            );
        }
        test_field_link_state();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_rss_query_en {
        pub vf: __lkl__u32,
        pub setting: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_rss_query_en() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_rss_query_en>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_rss_query_en))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_rss_query_en>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_rss_query_en))
        );
        fn test_field_vf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_rss_query_en>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_rss_query_en),
                    "::",
                    stringify!(vf)
                )
            );
        }
        test_field_vf();
        fn test_field_setting() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_rss_query_en>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).setting) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_rss_query_en),
                    "::",
                    stringify!(setting)
                )
            );
        }
        test_field_setting();
    }
    pub const LKL_IFLA_VF_STATS_RX_PACKETS: _bindgen_ty_84 = 0;
    pub const LKL_IFLA_VF_STATS_TX_PACKETS: _bindgen_ty_84 = 1;
    pub const LKL_IFLA_VF_STATS_RX_BYTES: _bindgen_ty_84 = 2;
    pub const LKL_IFLA_VF_STATS_TX_BYTES: _bindgen_ty_84 = 3;
    pub const LKL_IFLA_VF_STATS_BROADCAST: _bindgen_ty_84 = 4;
    pub const LKL_IFLA_VF_STATS_MULTICAST: _bindgen_ty_84 = 5;
    pub const LKL_IFLA_VF_STATS_PAD: _bindgen_ty_84 = 6;
    pub const LKL_IFLA_VF_STATS_RX_DROPPED: _bindgen_ty_84 = 7;
    pub const LKL_IFLA_VF_STATS_TX_DROPPED: _bindgen_ty_84 = 8;
    pub const __LKL__IFLA_VF_STATS_MAX: _bindgen_ty_84 = 9;
    pub type _bindgen_ty_84 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_vf_trust {
        pub vf: __lkl__u32,
        pub setting: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_vf_trust() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_vf_trust>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifla_vf_trust))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_vf_trust>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_vf_trust))
        );
        fn test_field_vf() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_trust>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vf) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_trust),
                    "::",
                    stringify!(vf)
                )
            );
        }
        test_field_vf();
        fn test_field_setting() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_vf_trust>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).setting) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_vf_trust),
                    "::",
                    stringify!(setting)
                )
            );
        }
        test_field_setting();
    }
    pub const LKL_IFLA_VF_PORT_UNSPEC: _bindgen_ty_85 = 0;
    pub const LKL_IFLA_VF_PORT: _bindgen_ty_85 = 1;
    pub const __LKL__IFLA_VF_PORT_MAX: _bindgen_ty_85 = 2;
    pub type _bindgen_ty_85 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_PORT_UNSPEC: _bindgen_ty_86 = 0;
    pub const LKL_IFLA_PORT_VF: _bindgen_ty_86 = 1;
    pub const LKL_IFLA_PORT_PROFILE: _bindgen_ty_86 = 2;
    pub const LKL_IFLA_PORT_VSI_TYPE: _bindgen_ty_86 = 3;
    pub const LKL_IFLA_PORT_INSTANCE_UUID: _bindgen_ty_86 = 4;
    pub const LKL_IFLA_PORT_HOST_UUID: _bindgen_ty_86 = 5;
    pub const LKL_IFLA_PORT_REQUEST: _bindgen_ty_86 = 6;
    pub const LKL_IFLA_PORT_RESPONSE: _bindgen_ty_86 = 7;
    pub const __LKL__IFLA_PORT_MAX: _bindgen_ty_86 = 8;
    pub type _bindgen_ty_86 = ::std::os::raw::c_uint;
    pub const LKL_PORT_REQUEST_PREASSOCIATE: _bindgen_ty_87 = 0;
    pub const LKL_PORT_REQUEST_PREASSOCIATE_RR: _bindgen_ty_87 = 1;
    pub const LKL_PORT_REQUEST_ASSOCIATE: _bindgen_ty_87 = 2;
    pub const LKL_PORT_REQUEST_DISASSOCIATE: _bindgen_ty_87 = 3;
    pub type _bindgen_ty_87 = ::std::os::raw::c_uint;
    pub const LKL_PORT_VDP_RESPONSE_SUCCESS: _bindgen_ty_88 = 0;
    pub const LKL_PORT_VDP_RESPONSE_INVALID_FORMAT: _bindgen_ty_88 = 1;
    pub const LKL_PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES: _bindgen_ty_88 = 2;
    pub const LKL_PORT_VDP_RESPONSE_UNUSED_VTID: _bindgen_ty_88 = 3;
    pub const LKL_PORT_VDP_RESPONSE_VTID_VIOLATION: _bindgen_ty_88 = 4;
    pub const LKL_PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION: _bindgen_ty_88 = 5;
    pub const LKL_PORT_VDP_RESPONSE_OUT_OF_SYNC: _bindgen_ty_88 = 6;
    pub const LKL_PORT_PROFILE_RESPONSE_SUCCESS: _bindgen_ty_88 = 256;
    pub const LKL_PORT_PROFILE_RESPONSE_INPROGRESS: _bindgen_ty_88 = 257;
    pub const LKL_PORT_PROFILE_RESPONSE_INVALID: _bindgen_ty_88 = 258;
    pub const LKL_PORT_PROFILE_RESPONSE_BADSTATE: _bindgen_ty_88 = 259;
    pub const LKL_PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES: _bindgen_ty_88 = 260;
    pub const LKL_PORT_PROFILE_RESPONSE_ERROR: _bindgen_ty_88 = 261;
    pub type _bindgen_ty_88 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_port_vsi {
        pub vsi_mgr_id: __lkl__u8,
        pub vsi_type_id: [__lkl__u8; 3usize],
        pub vsi_type_version: __lkl__u8,
        pub pad: [__lkl__u8; 3usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_port_vsi() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_port_vsi>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifla_port_vsi))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_port_vsi>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_ifla_port_vsi))
        );
        fn test_field_vsi_mgr_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_port_vsi>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vsi_mgr_id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_port_vsi),
                    "::",
                    stringify!(vsi_mgr_id)
                )
            );
        }
        test_field_vsi_mgr_id();
        fn test_field_vsi_type_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_port_vsi>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vsi_type_id) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_port_vsi),
                    "::",
                    stringify!(vsi_type_id)
                )
            );
        }
        test_field_vsi_type_id();
        fn test_field_vsi_type_version() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_port_vsi>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).vsi_type_version) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_port_vsi),
                    "::",
                    stringify!(vsi_type_version)
                )
            );
        }
        test_field_vsi_type_version();
        fn test_field_pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_port_vsi>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
                },
                5usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_port_vsi),
                    "::",
                    stringify!(pad)
                )
            );
        }
        test_field_pad();
    }
    pub const LKL_IFLA_IPOIB_UNSPEC: _bindgen_ty_89 = 0;
    pub const LKL_IFLA_IPOIB_PKEY: _bindgen_ty_89 = 1;
    pub const LKL_IFLA_IPOIB_MODE: _bindgen_ty_89 = 2;
    pub const LKL_IFLA_IPOIB_UMCAST: _bindgen_ty_89 = 3;
    pub const __LKL__IFLA_IPOIB_MAX: _bindgen_ty_89 = 4;
    pub type _bindgen_ty_89 = ::std::os::raw::c_uint;
    pub const LKL_IPOIB_MODE_DATAGRAM: _bindgen_ty_90 = 0;
    pub const LKL_IPOIB_MODE_CONNECTED: _bindgen_ty_90 = 1;
    pub type _bindgen_ty_90 = ::std::os::raw::c_uint;
    pub const LKL_HSR_PROTOCOL_HSR: _bindgen_ty_91 = 0;
    pub const LKL_HSR_PROTOCOL_PRP: _bindgen_ty_91 = 1;
    pub const LKL_HSR_PROTOCOL_MAX: _bindgen_ty_91 = 2;
    pub type _bindgen_ty_91 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_HSR_UNSPEC: _bindgen_ty_92 = 0;
    pub const LKL_IFLA_HSR_SLAVE1: _bindgen_ty_92 = 1;
    pub const LKL_IFLA_HSR_SLAVE2: _bindgen_ty_92 = 2;
    pub const LKL_IFLA_HSR_MULTICAST_SPEC: _bindgen_ty_92 = 3;
    pub const LKL_IFLA_HSR_SUPERVISION_ADDR: _bindgen_ty_92 = 4;
    pub const LKL_IFLA_HSR_SEQ_NR: _bindgen_ty_92 = 5;
    pub const LKL_IFLA_HSR_VERSION: _bindgen_ty_92 = 6;
    pub const LKL_IFLA_HSR_PROTOCOL: _bindgen_ty_92 = 7;
    pub const __LKL__IFLA_HSR_MAX: _bindgen_ty_92 = 8;
    pub type _bindgen_ty_92 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_if_stats_msg {
        pub family: __lkl__u8,
        pub pad1: __lkl__u8,
        pub pad2: __lkl__u16,
        pub ifindex: __lkl__u32,
        pub filter_mask: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_if_stats_msg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_if_stats_msg>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_if_stats_msg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_if_stats_msg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_if_stats_msg))
        );
        fn test_field_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_stats_msg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_stats_msg),
                    "::",
                    stringify!(family)
                )
            );
        }
        test_field_family();
        fn test_field_pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_stats_msg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_stats_msg),
                    "::",
                    stringify!(pad1)
                )
            );
        }
        test_field_pad1();
        fn test_field_pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_stats_msg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_stats_msg),
                    "::",
                    stringify!(pad2)
                )
            );
        }
        test_field_pad2();
        fn test_field_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_stats_msg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifindex) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_stats_msg),
                    "::",
                    stringify!(ifindex)
                )
            );
        }
        test_field_ifindex();
        fn test_field_filter_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_if_stats_msg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).filter_mask) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_if_stats_msg),
                    "::",
                    stringify!(filter_mask)
                )
            );
        }
        test_field_filter_mask();
    }
    pub const LKL_IFLA_STATS_UNSPEC: _bindgen_ty_93 = 0;
    pub const LKL_IFLA_STATS_LINK_64: _bindgen_ty_93 = 1;
    pub const LKL_IFLA_STATS_LINK_XSTATS: _bindgen_ty_93 = 2;
    pub const LKL_IFLA_STATS_LINK_XSTATS_SLAVE: _bindgen_ty_93 = 3;
    pub const LKL_IFLA_STATS_LINK_OFFLOAD_XSTATS: _bindgen_ty_93 = 4;
    pub const LKL_IFLA_STATS_AF_SPEC: _bindgen_ty_93 = 5;
    pub const __LKL__IFLA_STATS_MAX: _bindgen_ty_93 = 6;
    pub type _bindgen_ty_93 = ::std::os::raw::c_uint;
    pub const LKL_LINK_XSTATS_TYPE_UNSPEC: _bindgen_ty_94 = 0;
    pub const LKL_LINK_XSTATS_TYPE_BRIDGE: _bindgen_ty_94 = 1;
    pub const LKL_LINK_XSTATS_TYPE_BOND: _bindgen_ty_94 = 2;
    pub const __LKL__LINK_XSTATS_TYPE_MAX: _bindgen_ty_94 = 3;
    pub type _bindgen_ty_94 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_OFFLOAD_XSTATS_UNSPEC: _bindgen_ty_95 = 0;
    pub const LKL_IFLA_OFFLOAD_XSTATS_CPU_HIT: _bindgen_ty_95 = 1;
    pub const __LKL__IFLA_OFFLOAD_XSTATS_MAX: _bindgen_ty_95 = 2;
    pub type _bindgen_ty_95 = ::std::os::raw::c_uint;
    pub const LKL_XDP_ATTACHED_NONE: _bindgen_ty_96 = 0;
    pub const LKL_XDP_ATTACHED_DRV: _bindgen_ty_96 = 1;
    pub const LKL_XDP_ATTACHED_SKB: _bindgen_ty_96 = 2;
    pub const LKL_XDP_ATTACHED_HW: _bindgen_ty_96 = 3;
    pub const LKL_XDP_ATTACHED_MULTI: _bindgen_ty_96 = 4;
    pub type _bindgen_ty_96 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_XDP_UNSPEC: _bindgen_ty_97 = 0;
    pub const LKL_IFLA_XDP_FD: _bindgen_ty_97 = 1;
    pub const LKL_IFLA_XDP_ATTACHED: _bindgen_ty_97 = 2;
    pub const LKL_IFLA_XDP_FLAGS: _bindgen_ty_97 = 3;
    pub const LKL_IFLA_XDP_PROG_ID: _bindgen_ty_97 = 4;
    pub const LKL_IFLA_XDP_DRV_PROG_ID: _bindgen_ty_97 = 5;
    pub const LKL_IFLA_XDP_SKB_PROG_ID: _bindgen_ty_97 = 6;
    pub const LKL_IFLA_XDP_HW_PROG_ID: _bindgen_ty_97 = 7;
    pub const LKL_IFLA_XDP_EXPECTED_FD: _bindgen_ty_97 = 8;
    pub const __LKL__IFLA_XDP_MAX: _bindgen_ty_97 = 9;
    pub type _bindgen_ty_97 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_EVENT_NONE: _bindgen_ty_98 = 0;
    pub const LKL_IFLA_EVENT_REBOOT: _bindgen_ty_98 = 1;
    pub const LKL_IFLA_EVENT_FEATURES: _bindgen_ty_98 = 2;
    pub const LKL_IFLA_EVENT_BONDING_FAILOVER: _bindgen_ty_98 = 3;
    pub const LKL_IFLA_EVENT_NOTIFY_PEERS: _bindgen_ty_98 = 4;
    pub const LKL_IFLA_EVENT_IGMP_RESEND: _bindgen_ty_98 = 5;
    pub const LKL_IFLA_EVENT_BONDING_OPTIONS: _bindgen_ty_98 = 6;
    pub type _bindgen_ty_98 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_TUN_UNSPEC: _bindgen_ty_99 = 0;
    pub const LKL_IFLA_TUN_OWNER: _bindgen_ty_99 = 1;
    pub const LKL_IFLA_TUN_GROUP: _bindgen_ty_99 = 2;
    pub const LKL_IFLA_TUN_TYPE: _bindgen_ty_99 = 3;
    pub const LKL_IFLA_TUN_PI: _bindgen_ty_99 = 4;
    pub const LKL_IFLA_TUN_VNET_HDR: _bindgen_ty_99 = 5;
    pub const LKL_IFLA_TUN_PERSIST: _bindgen_ty_99 = 6;
    pub const LKL_IFLA_TUN_MULTI_QUEUE: _bindgen_ty_99 = 7;
    pub const LKL_IFLA_TUN_NUM_QUEUES: _bindgen_ty_99 = 8;
    pub const LKL_IFLA_TUN_NUM_DISABLED_QUEUES: _bindgen_ty_99 = 9;
    pub const __LKL__IFLA_TUN_MAX: _bindgen_ty_99 = 10;
    pub type _bindgen_ty_99 = ::std::os::raw::c_uint;
    pub const LKL_IFLA_RMNET_UNSPEC: _bindgen_ty_100 = 0;
    pub const LKL_IFLA_RMNET_MUX_ID: _bindgen_ty_100 = 1;
    pub const LKL_IFLA_RMNET_FLAGS: _bindgen_ty_100 = 2;
    pub const __LKL__IFLA_RMNET_MAX: _bindgen_ty_100 = 3;
    pub type _bindgen_ty_100 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifla_rmnet_flags {
        pub flags: __lkl__u32,
        pub mask: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifla_rmnet_flags() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifla_rmnet_flags>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifla_rmnet_flags))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifla_rmnet_flags>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifla_rmnet_flags))
        );
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_rmnet_flags>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_rmnet_flags),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifla_rmnet_flags>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifla_rmnet_flags),
                    "::",
                    stringify!(mask)
                )
            );
        }
        test_field_mask();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifaddrmsg {
        pub ifa_family: __lkl__u8,
        pub ifa_prefixlen: __lkl__u8,
        pub ifa_flags: __lkl__u8,
        pub ifa_scope: __lkl__u8,
        pub ifa_index: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifaddrmsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifaddrmsg>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_ifaddrmsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifaddrmsg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifaddrmsg))
        );
        fn test_field_ifa_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifaddrmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifa_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifaddrmsg),
                    "::",
                    stringify!(ifa_family)
                )
            );
        }
        test_field_ifa_family();
        fn test_field_ifa_prefixlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifaddrmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifa_prefixlen) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifaddrmsg),
                    "::",
                    stringify!(ifa_prefixlen)
                )
            );
        }
        test_field_ifa_prefixlen();
        fn test_field_ifa_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifaddrmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifa_flags) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifaddrmsg),
                    "::",
                    stringify!(ifa_flags)
                )
            );
        }
        test_field_ifa_flags();
        fn test_field_ifa_scope() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifaddrmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifa_scope) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifaddrmsg),
                    "::",
                    stringify!(ifa_scope)
                )
            );
        }
        test_field_ifa_scope();
        fn test_field_ifa_index() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifaddrmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifa_index) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifaddrmsg),
                    "::",
                    stringify!(ifa_index)
                )
            );
        }
        test_field_ifa_index();
    }
    pub const LKL_IFA_UNSPEC: _bindgen_ty_101 = 0;
    pub const LKL_IFA_ADDRESS: _bindgen_ty_101 = 1;
    pub const LKL_IFA_LOCAL: _bindgen_ty_101 = 2;
    pub const LKL_IFA_LABEL: _bindgen_ty_101 = 3;
    pub const LKL_IFA_BROADCAST: _bindgen_ty_101 = 4;
    pub const LKL_IFA_ANYCAST: _bindgen_ty_101 = 5;
    pub const LKL_IFA_CACHEINFO: _bindgen_ty_101 = 6;
    pub const LKL_IFA_MULTICAST: _bindgen_ty_101 = 7;
    pub const LKL_IFA_FLAGS: _bindgen_ty_101 = 8;
    pub const LKL_IFA_RT_PRIORITY: _bindgen_ty_101 = 9;
    pub const LKL_IFA_TARGET_NETNSID: _bindgen_ty_101 = 10;
    pub const __LKL__IFA_MAX: _bindgen_ty_101 = 11;
    pub type _bindgen_ty_101 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifa_cacheinfo {
        pub ifa_prefered: __lkl__u32,
        pub ifa_valid: __lkl__u32,
        pub cstamp: __lkl__u32,
        pub tstamp: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifa_cacheinfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifa_cacheinfo>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_ifa_cacheinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifa_cacheinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifa_cacheinfo))
        );
        fn test_field_ifa_prefered() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifa_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifa_prefered) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifa_cacheinfo),
                    "::",
                    stringify!(ifa_prefered)
                )
            );
        }
        test_field_ifa_prefered();
        fn test_field_ifa_valid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifa_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifa_valid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifa_cacheinfo),
                    "::",
                    stringify!(ifa_valid)
                )
            );
        }
        test_field_ifa_valid();
        fn test_field_cstamp() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifa_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cstamp) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifa_cacheinfo),
                    "::",
                    stringify!(cstamp)
                )
            );
        }
        test_field_cstamp();
        fn test_field_tstamp() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifa_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tstamp) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifa_cacheinfo),
                    "::",
                    stringify!(tstamp)
                )
            );
        }
        test_field_tstamp();
    }
    pub const LKL_RTM_BASE: _bindgen_ty_102 = 16;
    pub const LKL_RTM_NEWLINK: _bindgen_ty_102 = 16;
    pub const LKL_RTM_DELLINK: _bindgen_ty_102 = 17;
    pub const LKL_RTM_GETLINK: _bindgen_ty_102 = 18;
    pub const LKL_RTM_SETLINK: _bindgen_ty_102 = 19;
    pub const LKL_RTM_NEWADDR: _bindgen_ty_102 = 20;
    pub const LKL_RTM_DELADDR: _bindgen_ty_102 = 21;
    pub const LKL_RTM_GETADDR: _bindgen_ty_102 = 22;
    pub const LKL_RTM_NEWROUTE: _bindgen_ty_102 = 24;
    pub const LKL_RTM_DELROUTE: _bindgen_ty_102 = 25;
    pub const LKL_RTM_GETROUTE: _bindgen_ty_102 = 26;
    pub const LKL_RTM_NEWNEIGH: _bindgen_ty_102 = 28;
    pub const LKL_RTM_DELNEIGH: _bindgen_ty_102 = 29;
    pub const LKL_RTM_GETNEIGH: _bindgen_ty_102 = 30;
    pub const LKL_RTM_NEWRULE: _bindgen_ty_102 = 32;
    pub const LKL_RTM_DELRULE: _bindgen_ty_102 = 33;
    pub const LKL_RTM_GETRULE: _bindgen_ty_102 = 34;
    pub const LKL_RTM_NEWQDISC: _bindgen_ty_102 = 36;
    pub const LKL_RTM_DELQDISC: _bindgen_ty_102 = 37;
    pub const LKL_RTM_GETQDISC: _bindgen_ty_102 = 38;
    pub const LKL_RTM_NEWTCLASS: _bindgen_ty_102 = 40;
    pub const LKL_RTM_DELTCLASS: _bindgen_ty_102 = 41;
    pub const LKL_RTM_GETTCLASS: _bindgen_ty_102 = 42;
    pub const LKL_RTM_NEWTFILTER: _bindgen_ty_102 = 44;
    pub const LKL_RTM_DELTFILTER: _bindgen_ty_102 = 45;
    pub const LKL_RTM_GETTFILTER: _bindgen_ty_102 = 46;
    pub const LKL_RTM_NEWACTION: _bindgen_ty_102 = 48;
    pub const LKL_RTM_DELACTION: _bindgen_ty_102 = 49;
    pub const LKL_RTM_GETACTION: _bindgen_ty_102 = 50;
    pub const LKL_RTM_NEWPREFIX: _bindgen_ty_102 = 52;
    pub const LKL_RTM_GETMULTICAST: _bindgen_ty_102 = 58;
    pub const LKL_RTM_GETANYCAST: _bindgen_ty_102 = 62;
    pub const LKL_RTM_NEWNEIGHTBL: _bindgen_ty_102 = 64;
    pub const LKL_RTM_GETNEIGHTBL: _bindgen_ty_102 = 66;
    pub const LKL_RTM_SETNEIGHTBL: _bindgen_ty_102 = 67;
    pub const LKL_RTM_NEWNDUSEROPT: _bindgen_ty_102 = 68;
    pub const LKL_RTM_NEWADDRLABEL: _bindgen_ty_102 = 72;
    pub const LKL_RTM_DELADDRLABEL: _bindgen_ty_102 = 73;
    pub const LKL_RTM_GETADDRLABEL: _bindgen_ty_102 = 74;
    pub const LKL_RTM_GETDCB: _bindgen_ty_102 = 78;
    pub const LKL_RTM_SETDCB: _bindgen_ty_102 = 79;
    pub const LKL_RTM_NEWNETCONF: _bindgen_ty_102 = 80;
    pub const LKL_RTM_DELNETCONF: _bindgen_ty_102 = 81;
    pub const LKL_RTM_GETNETCONF: _bindgen_ty_102 = 82;
    pub const LKL_RTM_NEWMDB: _bindgen_ty_102 = 84;
    pub const LKL_RTM_DELMDB: _bindgen_ty_102 = 85;
    pub const LKL_RTM_GETMDB: _bindgen_ty_102 = 86;
    pub const LKL_RTM_NEWNSID: _bindgen_ty_102 = 88;
    pub const LKL_RTM_DELNSID: _bindgen_ty_102 = 89;
    pub const LKL_RTM_GETNSID: _bindgen_ty_102 = 90;
    pub const LKL_RTM_NEWSTATS: _bindgen_ty_102 = 92;
    pub const LKL_RTM_GETSTATS: _bindgen_ty_102 = 94;
    pub const LKL_RTM_NEWCACHEREPORT: _bindgen_ty_102 = 96;
    pub const LKL_RTM_NEWCHAIN: _bindgen_ty_102 = 100;
    pub const LKL_RTM_DELCHAIN: _bindgen_ty_102 = 101;
    pub const LKL_RTM_GETCHAIN: _bindgen_ty_102 = 102;
    pub const LKL_RTM_NEWNEXTHOP: _bindgen_ty_102 = 104;
    pub const LKL_RTM_DELNEXTHOP: _bindgen_ty_102 = 105;
    pub const LKL_RTM_GETNEXTHOP: _bindgen_ty_102 = 106;
    pub const LKL_RTM_NEWLINKPROP: _bindgen_ty_102 = 108;
    pub const LKL_RTM_DELLINKPROP: _bindgen_ty_102 = 109;
    pub const LKL_RTM_GETLINKPROP: _bindgen_ty_102 = 110;
    pub const LKL_RTM_NEWVLAN: _bindgen_ty_102 = 112;
    pub const LKL_RTM_DELVLAN: _bindgen_ty_102 = 113;
    pub const LKL_RTM_GETVLAN: _bindgen_ty_102 = 114;
    pub const __LKL__RTM_MAX: _bindgen_ty_102 = 115;
    pub type _bindgen_ty_102 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rtattr {
        pub rta_len: ::std::os::raw::c_ushort,
        pub rta_type: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_lkl_rtattr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rtattr>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_rtattr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rtattr>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_rtattr))
        );
        fn test_field_rta_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtattr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rta_len) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtattr),
                    "::",
                    stringify!(rta_len)
                )
            );
        }
        test_field_rta_len();
        fn test_field_rta_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtattr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rta_type) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtattr),
                    "::",
                    stringify!(rta_type)
                )
            );
        }
        test_field_rta_type();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rtmsg {
        pub rtm_family: ::std::os::raw::c_uchar,
        pub rtm_dst_len: ::std::os::raw::c_uchar,
        pub rtm_src_len: ::std::os::raw::c_uchar,
        pub rtm_tos: ::std::os::raw::c_uchar,
        pub rtm_table: ::std::os::raw::c_uchar,
        pub rtm_protocol: ::std::os::raw::c_uchar,
        pub rtm_scope: ::std::os::raw::c_uchar,
        pub rtm_type: ::std::os::raw::c_uchar,
        pub rtm_flags: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_rtmsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rtmsg>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_rtmsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rtmsg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_rtmsg))
        );
        fn test_field_rtm_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtm_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtmsg),
                    "::",
                    stringify!(rtm_family)
                )
            );
        }
        test_field_rtm_family();
        fn test_field_rtm_dst_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtm_dst_len) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtmsg),
                    "::",
                    stringify!(rtm_dst_len)
                )
            );
        }
        test_field_rtm_dst_len();
        fn test_field_rtm_src_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtm_src_len) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtmsg),
                    "::",
                    stringify!(rtm_src_len)
                )
            );
        }
        test_field_rtm_src_len();
        fn test_field_rtm_tos() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtm_tos) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtmsg),
                    "::",
                    stringify!(rtm_tos)
                )
            );
        }
        test_field_rtm_tos();
        fn test_field_rtm_table() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtm_table) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtmsg),
                    "::",
                    stringify!(rtm_table)
                )
            );
        }
        test_field_rtm_table();
        fn test_field_rtm_protocol() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtm_protocol) as usize - ptr as usize
                },
                5usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtmsg),
                    "::",
                    stringify!(rtm_protocol)
                )
            );
        }
        test_field_rtm_protocol();
        fn test_field_rtm_scope() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtm_scope) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtmsg),
                    "::",
                    stringify!(rtm_scope)
                )
            );
        }
        test_field_rtm_scope();
        fn test_field_rtm_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtm_type) as usize - ptr as usize
                },
                7usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtmsg),
                    "::",
                    stringify!(rtm_type)
                )
            );
        }
        test_field_rtm_type();
        fn test_field_rtm_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtm_flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtmsg),
                    "::",
                    stringify!(rtm_flags)
                )
            );
        }
        test_field_rtm_flags();
    }
    pub const LKL_RTN_UNSPEC: _bindgen_ty_103 = 0;
    pub const LKL_RTN_UNICAST: _bindgen_ty_103 = 1;
    pub const LKL_RTN_LOCAL: _bindgen_ty_103 = 2;
    pub const LKL_RTN_BROADCAST: _bindgen_ty_103 = 3;
    pub const LKL_RTN_ANYCAST: _bindgen_ty_103 = 4;
    pub const LKL_RTN_MULTICAST: _bindgen_ty_103 = 5;
    pub const LKL_RTN_BLACKHOLE: _bindgen_ty_103 = 6;
    pub const LKL_RTN_UNREACHABLE: _bindgen_ty_103 = 7;
    pub const LKL_RTN_PROHIBIT: _bindgen_ty_103 = 8;
    pub const LKL_RTN_THROW: _bindgen_ty_103 = 9;
    pub const LKL_RTN_NAT: _bindgen_ty_103 = 10;
    pub const LKL_RTN_XRESOLVE: _bindgen_ty_103 = 11;
    pub const __LKL__RTN_MAX: _bindgen_ty_103 = 12;
    pub type _bindgen_ty_103 = ::std::os::raw::c_uint;
    pub const lkl_rt_scope_t_LKL_RT_SCOPE_UNIVERSE: lkl_rt_scope_t = 0;
    pub const lkl_rt_scope_t_LKL_RT_SCOPE_SITE: lkl_rt_scope_t = 200;
    pub const lkl_rt_scope_t_LKL_RT_SCOPE_LINK: lkl_rt_scope_t = 253;
    pub const lkl_rt_scope_t_LKL_RT_SCOPE_HOST: lkl_rt_scope_t = 254;
    pub const lkl_rt_scope_t_LKL_RT_SCOPE_NOWHERE: lkl_rt_scope_t = 255;
    pub type lkl_rt_scope_t = ::std::os::raw::c_uint;
    pub const lkl_rt_class_t_LKL_RT_TABLE_UNSPEC: lkl_rt_class_t = 0;
    pub const lkl_rt_class_t_LKL_RT_TABLE_COMPAT: lkl_rt_class_t = 252;
    pub const lkl_rt_class_t_LKL_RT_TABLE_DEFAULT: lkl_rt_class_t = 253;
    pub const lkl_rt_class_t_LKL_RT_TABLE_MAIN: lkl_rt_class_t = 254;
    pub const lkl_rt_class_t_LKL_RT_TABLE_LOCAL: lkl_rt_class_t = 255;
    pub const lkl_rt_class_t_LKL_RT_TABLE_MAX: lkl_rt_class_t = 4294967295;
    pub type lkl_rt_class_t = ::std::os::raw::c_uint;
    pub const lkl_rtattr_type_t_LKL_RTA_UNSPEC: lkl_rtattr_type_t = 0;
    pub const lkl_rtattr_type_t_LKL_RTA_DST: lkl_rtattr_type_t = 1;
    pub const lkl_rtattr_type_t_LKL_RTA_SRC: lkl_rtattr_type_t = 2;
    pub const lkl_rtattr_type_t_LKL_RTA_IIF: lkl_rtattr_type_t = 3;
    pub const lkl_rtattr_type_t_LKL_RTA_OIF: lkl_rtattr_type_t = 4;
    pub const lkl_rtattr_type_t_LKL_RTA_GATEWAY: lkl_rtattr_type_t = 5;
    pub const lkl_rtattr_type_t_LKL_RTA_PRIORITY: lkl_rtattr_type_t = 6;
    pub const lkl_rtattr_type_t_LKL_RTA_PREFSRC: lkl_rtattr_type_t = 7;
    pub const lkl_rtattr_type_t_LKL_RTA_METRICS: lkl_rtattr_type_t = 8;
    pub const lkl_rtattr_type_t_LKL_RTA_MULTIPATH: lkl_rtattr_type_t = 9;
    pub const lkl_rtattr_type_t_LKL_RTA_PROTOINFO: lkl_rtattr_type_t = 10;
    pub const lkl_rtattr_type_t_LKL_RTA_FLOW: lkl_rtattr_type_t = 11;
    pub const lkl_rtattr_type_t_LKL_RTA_CACHEINFO: lkl_rtattr_type_t = 12;
    pub const lkl_rtattr_type_t_LKL_RTA_SESSION: lkl_rtattr_type_t = 13;
    pub const lkl_rtattr_type_t_LKL_RTA_MP_ALGO: lkl_rtattr_type_t = 14;
    pub const lkl_rtattr_type_t_LKL_RTA_TABLE: lkl_rtattr_type_t = 15;
    pub const lkl_rtattr_type_t_LKL_RTA_MARK: lkl_rtattr_type_t = 16;
    pub const lkl_rtattr_type_t_LKL_RTA_MFC_STATS: lkl_rtattr_type_t = 17;
    pub const lkl_rtattr_type_t_LKL_RTA_VIA: lkl_rtattr_type_t = 18;
    pub const lkl_rtattr_type_t_LKL_RTA_NEWDST: lkl_rtattr_type_t = 19;
    pub const lkl_rtattr_type_t_LKL_RTA_PREF: lkl_rtattr_type_t = 20;
    pub const lkl_rtattr_type_t_LKL_RTA_ENCAP_TYPE: lkl_rtattr_type_t = 21;
    pub const lkl_rtattr_type_t_LKL_RTA_ENCAP: lkl_rtattr_type_t = 22;
    pub const lkl_rtattr_type_t_LKL_RTA_EXPIRES: lkl_rtattr_type_t = 23;
    pub const lkl_rtattr_type_t_LKL_RTA_PAD: lkl_rtattr_type_t = 24;
    pub const lkl_rtattr_type_t_LKL_RTA_UID: lkl_rtattr_type_t = 25;
    pub const lkl_rtattr_type_t_LKL_RTA_TTL_PROPAGATE: lkl_rtattr_type_t = 26;
    pub const lkl_rtattr_type_t_LKL_RTA_IP_PROTO: lkl_rtattr_type_t = 27;
    pub const lkl_rtattr_type_t_LKL_RTA_SPORT: lkl_rtattr_type_t = 28;
    pub const lkl_rtattr_type_t_LKL_RTA_DPORT: lkl_rtattr_type_t = 29;
    pub const lkl_rtattr_type_t_LKL_RTA_NH_ID: lkl_rtattr_type_t = 30;
    pub const lkl_rtattr_type_t___LKL__RTA_MAX: lkl_rtattr_type_t = 31;
    pub type lkl_rtattr_type_t = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rtnexthop {
        pub rtnh_len: ::std::os::raw::c_ushort,
        pub rtnh_flags: ::std::os::raw::c_uchar,
        pub rtnh_hops: ::std::os::raw::c_uchar,
        pub rtnh_ifindex: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_lkl_rtnexthop() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rtnexthop>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_rtnexthop))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rtnexthop>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_rtnexthop))
        );
        fn test_field_rtnh_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnexthop>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtnh_len) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnexthop),
                    "::",
                    stringify!(rtnh_len)
                )
            );
        }
        test_field_rtnh_len();
        fn test_field_rtnh_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnexthop>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtnh_flags) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnexthop),
                    "::",
                    stringify!(rtnh_flags)
                )
            );
        }
        test_field_rtnh_flags();
        fn test_field_rtnh_hops() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnexthop>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtnh_hops) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnexthop),
                    "::",
                    stringify!(rtnh_hops)
                )
            );
        }
        test_field_rtnh_hops();
        fn test_field_rtnh_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtnexthop>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtnh_ifindex) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtnexthop),
                    "::",
                    stringify!(rtnh_ifindex)
                )
            );
        }
        test_field_rtnh_ifindex();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_rtvia {
        pub rtvia_family: __lkl__kernel_sa_family_t,
        pub rtvia_addr: __IncompleteArrayField<__lkl__u8>,
    }
    #[test]
    fn bindgen_test_layout_lkl_rtvia() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rtvia>(),
            2usize,
            concat!("Size of: ", stringify!(lkl_rtvia))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rtvia>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_rtvia))
        );
        fn test_field_rtvia_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtvia>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtvia_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtvia),
                    "::",
                    stringify!(rtvia_family)
                )
            );
        }
        test_field_rtvia_family();
        fn test_field_rtvia_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtvia>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtvia_addr) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtvia),
                    "::",
                    stringify!(rtvia_addr)
                )
            );
        }
        test_field_rtvia_addr();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rta_cacheinfo {
        pub rta_clntref: __lkl__u32,
        pub rta_lastuse: __lkl__u32,
        pub rta_expires: __lkl__s32,
        pub rta_error: __lkl__u32,
        pub rta_used: __lkl__u32,
        pub rta_id: __lkl__u32,
        pub rta_ts: __lkl__u32,
        pub rta_tsage: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_rta_cacheinfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rta_cacheinfo>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_rta_cacheinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rta_cacheinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_rta_cacheinfo))
        );
        fn test_field_rta_clntref() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rta_clntref) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_cacheinfo),
                    "::",
                    stringify!(rta_clntref)
                )
            );
        }
        test_field_rta_clntref();
        fn test_field_rta_lastuse() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rta_lastuse) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_cacheinfo),
                    "::",
                    stringify!(rta_lastuse)
                )
            );
        }
        test_field_rta_lastuse();
        fn test_field_rta_expires() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rta_expires) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_cacheinfo),
                    "::",
                    stringify!(rta_expires)
                )
            );
        }
        test_field_rta_expires();
        fn test_field_rta_error() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rta_error) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_cacheinfo),
                    "::",
                    stringify!(rta_error)
                )
            );
        }
        test_field_rta_error();
        fn test_field_rta_used() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rta_used) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_cacheinfo),
                    "::",
                    stringify!(rta_used)
                )
            );
        }
        test_field_rta_used();
        fn test_field_rta_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rta_id) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_cacheinfo),
                    "::",
                    stringify!(rta_id)
                )
            );
        }
        test_field_rta_id();
        fn test_field_rta_ts() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rta_ts) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_cacheinfo),
                    "::",
                    stringify!(rta_ts)
                )
            );
        }
        test_field_rta_ts();
        fn test_field_rta_tsage() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rta_tsage) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_cacheinfo),
                    "::",
                    stringify!(rta_tsage)
                )
            );
        }
        test_field_rta_tsage();
    }
    pub const LKL_RTAX_UNSPEC: _bindgen_ty_104 = 0;
    pub const LKL_RTAX_LOCK: _bindgen_ty_104 = 1;
    pub const LKL_RTAX_MTU: _bindgen_ty_104 = 2;
    pub const LKL_RTAX_WINDOW: _bindgen_ty_104 = 3;
    pub const LKL_RTAX_RTT: _bindgen_ty_104 = 4;
    pub const LKL_RTAX_RTTVAR: _bindgen_ty_104 = 5;
    pub const LKL_RTAX_SSTHRESH: _bindgen_ty_104 = 6;
    pub const LKL_RTAX_CWND: _bindgen_ty_104 = 7;
    pub const LKL_RTAX_ADVMSS: _bindgen_ty_104 = 8;
    pub const LKL_RTAX_REORDERING: _bindgen_ty_104 = 9;
    pub const LKL_RTAX_HOPLIMIT: _bindgen_ty_104 = 10;
    pub const LKL_RTAX_INITCWND: _bindgen_ty_104 = 11;
    pub const LKL_RTAX_FEATURES: _bindgen_ty_104 = 12;
    pub const LKL_RTAX_RTO_MIN: _bindgen_ty_104 = 13;
    pub const LKL_RTAX_INITRWND: _bindgen_ty_104 = 14;
    pub const LKL_RTAX_QUICKACK: _bindgen_ty_104 = 15;
    pub const LKL_RTAX_CC_ALGO: _bindgen_ty_104 = 16;
    pub const LKL_RTAX_FASTOPEN_NO_COOKIE: _bindgen_ty_104 = 17;
    pub const __LKL__RTAX_MAX: _bindgen_ty_104 = 18;
    pub type _bindgen_ty_104 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_rta_session {
        pub proto: __lkl__u8,
        pub pad1: __lkl__u8,
        pub pad2: __lkl__u16,
        pub u: lkl_rta_session__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_rta_session__bindgen_ty_1 {
        pub ports: lkl_rta_session__bindgen_ty_1__bindgen_ty_1,
        pub icmpt: lkl_rta_session__bindgen_ty_1__bindgen_ty_2,
        pub spi: __lkl__u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rta_session__bindgen_ty_1__bindgen_ty_1 {
        pub sport: __lkl__u16,
        pub dport: __lkl__u16,
    }
    #[test]
    fn bindgen_test_layout_lkl_rta_session__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rta_session__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_rta_session__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rta_session__bindgen_ty_1__bindgen_ty_1>(),
            2usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_rta_session__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field_sport() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_rta_session__bindgen_ty_1__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sport) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(sport)
                )
            );
        }
        test_field_sport();
        fn test_field_dport() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_rta_session__bindgen_ty_1__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dport) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(dport)
                )
            );
        }
        test_field_dport();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rta_session__bindgen_ty_1__bindgen_ty_2 {
        pub type_: __lkl__u8,
        pub code: __lkl__u8,
        pub ident: __lkl__u16,
    }
    #[test]
    fn bindgen_test_layout_lkl_rta_session__bindgen_ty_1__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rta_session__bindgen_ty_1__bindgen_ty_2>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_rta_session__bindgen_ty_1__bindgen_ty_2)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rta_session__bindgen_ty_1__bindgen_ty_2>(),
            2usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_rta_session__bindgen_ty_1__bindgen_ty_2)
            )
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_rta_session__bindgen_ty_1__bindgen_ty_2>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_code() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_rta_session__bindgen_ty_1__bindgen_ty_2>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(code)
                )
            );
        }
        test_field_code();
        fn test_field_ident() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_rta_session__bindgen_ty_1__bindgen_ty_2>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ident) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(ident)
                )
            );
        }
        test_field_ident();
    }
    #[test]
    fn bindgen_test_layout_lkl_rta_session__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rta_session__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_rta_session__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rta_session__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_rta_session__bindgen_ty_1))
        );
        fn test_field_ports() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_session__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ports) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session__bindgen_ty_1),
                    "::",
                    stringify!(ports)
                )
            );
        }
        test_field_ports();
        fn test_field_icmpt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_session__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).icmpt) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session__bindgen_ty_1),
                    "::",
                    stringify!(icmpt)
                )
            );
        }
        test_field_icmpt();
        fn test_field_spi() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_session__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).spi) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session__bindgen_ty_1),
                    "::",
                    stringify!(spi)
                )
            );
        }
        test_field_spi();
    }
    #[test]
    fn bindgen_test_layout_lkl_rta_session() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rta_session>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_rta_session))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rta_session>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_rta_session))
        );
        fn test_field_proto() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_session>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).proto) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session),
                    "::",
                    stringify!(proto)
                )
            );
        }
        test_field_proto();
        fn test_field_pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_session>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session),
                    "::",
                    stringify!(pad1)
                )
            );
        }
        test_field_pad1();
        fn test_field_pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_session>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session),
                    "::",
                    stringify!(pad2)
                )
            );
        }
        test_field_pad2();
        fn test_field_u() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_session>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_session),
                    "::",
                    stringify!(u)
                )
            );
        }
        test_field_u();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rta_mfc_stats {
        pub mfcs_packets: __lkl__u64,
        pub mfcs_bytes: __lkl__u64,
        pub mfcs_wrong_if: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_rta_mfc_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rta_mfc_stats>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_rta_mfc_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rta_mfc_stats>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_rta_mfc_stats))
        );
        fn test_field_mfcs_packets() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_mfc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mfcs_packets) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_mfc_stats),
                    "::",
                    stringify!(mfcs_packets)
                )
            );
        }
        test_field_mfcs_packets();
        fn test_field_mfcs_bytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_mfc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mfcs_bytes) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_mfc_stats),
                    "::",
                    stringify!(mfcs_bytes)
                )
            );
        }
        test_field_mfcs_bytes();
        fn test_field_mfcs_wrong_if() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rta_mfc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mfcs_wrong_if) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rta_mfc_stats),
                    "::",
                    stringify!(mfcs_wrong_if)
                )
            );
        }
        test_field_mfcs_wrong_if();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_rtgenmsg {
        pub rtgen_family: ::std::os::raw::c_uchar,
    }
    #[test]
    fn bindgen_test_layout_lkl_rtgenmsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_rtgenmsg>(),
            1usize,
            concat!("Size of: ", stringify!(lkl_rtgenmsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_rtgenmsg>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_rtgenmsg))
        );
        fn test_field_rtgen_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_rtgenmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtgen_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_rtgenmsg),
                    "::",
                    stringify!(rtgen_family)
                )
            );
        }
        test_field_rtgen_family();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ifinfomsg {
        pub ifi_family: ::std::os::raw::c_uchar,
        pub __ifi_pad: ::std::os::raw::c_uchar,
        pub ifi_type: ::std::os::raw::c_ushort,
        pub ifi_index: ::std::os::raw::c_int,
        pub ifi_flags: ::std::os::raw::c_uint,
        pub ifi_change: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_ifinfomsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ifinfomsg>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_ifinfomsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ifinfomsg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_ifinfomsg))
        );
        fn test_field_ifi_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifinfomsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifi_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifinfomsg),
                    "::",
                    stringify!(ifi_family)
                )
            );
        }
        test_field_ifi_family();
        fn test_field___ifi_pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifinfomsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__ifi_pad) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifinfomsg),
                    "::",
                    stringify!(__ifi_pad)
                )
            );
        }
        test_field___ifi_pad();
        fn test_field_ifi_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifinfomsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifi_type) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifinfomsg),
                    "::",
                    stringify!(ifi_type)
                )
            );
        }
        test_field_ifi_type();
        fn test_field_ifi_index() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifinfomsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifi_index) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifinfomsg),
                    "::",
                    stringify!(ifi_index)
                )
            );
        }
        test_field_ifi_index();
        fn test_field_ifi_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifinfomsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifi_flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifinfomsg),
                    "::",
                    stringify!(ifi_flags)
                )
            );
        }
        test_field_ifi_flags();
        fn test_field_ifi_change() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ifinfomsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ifi_change) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ifinfomsg),
                    "::",
                    stringify!(ifi_change)
                )
            );
        }
        test_field_ifi_change();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_prefixmsg {
        pub prefix_family: ::std::os::raw::c_uchar,
        pub prefix_pad1: ::std::os::raw::c_uchar,
        pub prefix_pad2: ::std::os::raw::c_ushort,
        pub prefix_ifindex: ::std::os::raw::c_int,
        pub prefix_type: ::std::os::raw::c_uchar,
        pub prefix_len: ::std::os::raw::c_uchar,
        pub prefix_flags: ::std::os::raw::c_uchar,
        pub prefix_pad3: ::std::os::raw::c_uchar,
    }
    #[test]
    fn bindgen_test_layout_lkl_prefixmsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_prefixmsg>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_prefixmsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_prefixmsg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_prefixmsg))
        );
        fn test_field_prefix_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_prefixmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prefix_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_prefixmsg),
                    "::",
                    stringify!(prefix_family)
                )
            );
        }
        test_field_prefix_family();
        fn test_field_prefix_pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_prefixmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prefix_pad1) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_prefixmsg),
                    "::",
                    stringify!(prefix_pad1)
                )
            );
        }
        test_field_prefix_pad1();
        fn test_field_prefix_pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_prefixmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prefix_pad2) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_prefixmsg),
                    "::",
                    stringify!(prefix_pad2)
                )
            );
        }
        test_field_prefix_pad2();
        fn test_field_prefix_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_prefixmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prefix_ifindex) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_prefixmsg),
                    "::",
                    stringify!(prefix_ifindex)
                )
            );
        }
        test_field_prefix_ifindex();
        fn test_field_prefix_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_prefixmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prefix_type) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_prefixmsg),
                    "::",
                    stringify!(prefix_type)
                )
            );
        }
        test_field_prefix_type();
        fn test_field_prefix_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_prefixmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prefix_len) as usize - ptr as usize
                },
                9usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_prefixmsg),
                    "::",
                    stringify!(prefix_len)
                )
            );
        }
        test_field_prefix_len();
        fn test_field_prefix_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_prefixmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prefix_flags) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_prefixmsg),
                    "::",
                    stringify!(prefix_flags)
                )
            );
        }
        test_field_prefix_flags();
        fn test_field_prefix_pad3() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_prefixmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prefix_pad3) as usize - ptr as usize
                },
                11usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_prefixmsg),
                    "::",
                    stringify!(prefix_pad3)
                )
            );
        }
        test_field_prefix_pad3();
    }
    pub const LKL_PREFIX_UNSPEC: _bindgen_ty_105 = 0;
    pub const LKL_PREFIX_ADDRESS: _bindgen_ty_105 = 1;
    pub const LKL_PREFIX_CACHEINFO: _bindgen_ty_105 = 2;
    pub const __LKL__PREFIX_MAX: _bindgen_ty_105 = 3;
    pub type _bindgen_ty_105 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_prefix_cacheinfo {
        pub preferred_time: __lkl__u32,
        pub valid_time: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_prefix_cacheinfo() {
        assert_eq!(
            ::std::mem::size_of::<lkl_prefix_cacheinfo>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_prefix_cacheinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_prefix_cacheinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_prefix_cacheinfo))
        );
        fn test_field_preferred_time() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_prefix_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).preferred_time) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_prefix_cacheinfo),
                    "::",
                    stringify!(preferred_time)
                )
            );
        }
        test_field_preferred_time();
        fn test_field_valid_time() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_prefix_cacheinfo>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).valid_time) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_prefix_cacheinfo),
                    "::",
                    stringify!(valid_time)
                )
            );
        }
        test_field_valid_time();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tcmsg {
        pub tcm_family: ::std::os::raw::c_uchar,
        pub tcm__pad1: ::std::os::raw::c_uchar,
        pub tcm__pad2: ::std::os::raw::c_ushort,
        pub tcm_ifindex: ::std::os::raw::c_int,
        pub tcm_handle: __lkl__u32,
        pub tcm_parent: __lkl__u32,
        pub tcm_info: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tcmsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tcmsg>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_tcmsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tcmsg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tcmsg))
        );
        fn test_field_tcm_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tcmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tcm_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tcmsg),
                    "::",
                    stringify!(tcm_family)
                )
            );
        }
        test_field_tcm_family();
        fn test_field_tcm__pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tcmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tcm__pad1) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tcmsg),
                    "::",
                    stringify!(tcm__pad1)
                )
            );
        }
        test_field_tcm__pad1();
        fn test_field_tcm__pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tcmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tcm__pad2) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tcmsg),
                    "::",
                    stringify!(tcm__pad2)
                )
            );
        }
        test_field_tcm__pad2();
        fn test_field_tcm_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tcmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tcm_ifindex) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tcmsg),
                    "::",
                    stringify!(tcm_ifindex)
                )
            );
        }
        test_field_tcm_ifindex();
        fn test_field_tcm_handle() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tcmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tcm_handle) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tcmsg),
                    "::",
                    stringify!(tcm_handle)
                )
            );
        }
        test_field_tcm_handle();
        fn test_field_tcm_parent() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tcmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tcm_parent) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tcmsg),
                    "::",
                    stringify!(tcm_parent)
                )
            );
        }
        test_field_tcm_parent();
        fn test_field_tcm_info() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tcmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tcm_info) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tcmsg),
                    "::",
                    stringify!(tcm_info)
                )
            );
        }
        test_field_tcm_info();
    }
    pub const LKL_TCA_UNSPEC: _bindgen_ty_106 = 0;
    pub const LKL_TCA_KIND: _bindgen_ty_106 = 1;
    pub const LKL_TCA_OPTIONS: _bindgen_ty_106 = 2;
    pub const LKL_TCA_STATS: _bindgen_ty_106 = 3;
    pub const LKL_TCA_XSTATS: _bindgen_ty_106 = 4;
    pub const LKL_TCA_RATE: _bindgen_ty_106 = 5;
    pub const LKL_TCA_FCNT: _bindgen_ty_106 = 6;
    pub const LKL_TCA_STATS2: _bindgen_ty_106 = 7;
    pub const LKL_TCA_STAB: _bindgen_ty_106 = 8;
    pub const LKL_TCA_PAD: _bindgen_ty_106 = 9;
    pub const LKL_TCA_DUMP_INVISIBLE: _bindgen_ty_106 = 10;
    pub const LKL_TCA_CHAIN: _bindgen_ty_106 = 11;
    pub const LKL_TCA_HW_OFFLOAD: _bindgen_ty_106 = 12;
    pub const LKL_TCA_INGRESS_BLOCK: _bindgen_ty_106 = 13;
    pub const LKL_TCA_EGRESS_BLOCK: _bindgen_ty_106 = 14;
    pub const LKL_TCA_DUMP_FLAGS: _bindgen_ty_106 = 15;
    pub const __LKL__TCA_MAX: _bindgen_ty_106 = 16;
    pub type _bindgen_ty_106 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_nduseroptmsg {
        pub nduseropt_family: ::std::os::raw::c_uchar,
        pub nduseropt_pad1: ::std::os::raw::c_uchar,
        pub nduseropt_opts_len: ::std::os::raw::c_ushort,
        pub nduseropt_ifindex: ::std::os::raw::c_int,
        pub nduseropt_icmp_type: __lkl__u8,
        pub nduseropt_icmp_code: __lkl__u8,
        pub nduseropt_pad2: ::std::os::raw::c_ushort,
        pub nduseropt_pad3: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_nduseroptmsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_nduseroptmsg>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_nduseroptmsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_nduseroptmsg>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_nduseroptmsg))
        );
        fn test_field_nduseropt_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nduseroptmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nduseropt_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nduseroptmsg),
                    "::",
                    stringify!(nduseropt_family)
                )
            );
        }
        test_field_nduseropt_family();
        fn test_field_nduseropt_pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nduseroptmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nduseropt_pad1) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nduseroptmsg),
                    "::",
                    stringify!(nduseropt_pad1)
                )
            );
        }
        test_field_nduseropt_pad1();
        fn test_field_nduseropt_opts_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nduseroptmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nduseropt_opts_len) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nduseroptmsg),
                    "::",
                    stringify!(nduseropt_opts_len)
                )
            );
        }
        test_field_nduseropt_opts_len();
        fn test_field_nduseropt_ifindex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nduseroptmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nduseropt_ifindex) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nduseroptmsg),
                    "::",
                    stringify!(nduseropt_ifindex)
                )
            );
        }
        test_field_nduseropt_ifindex();
        fn test_field_nduseropt_icmp_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nduseroptmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nduseropt_icmp_type) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nduseroptmsg),
                    "::",
                    stringify!(nduseropt_icmp_type)
                )
            );
        }
        test_field_nduseropt_icmp_type();
        fn test_field_nduseropt_icmp_code() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nduseroptmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nduseropt_icmp_code) as usize - ptr as usize
                },
                9usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nduseroptmsg),
                    "::",
                    stringify!(nduseropt_icmp_code)
                )
            );
        }
        test_field_nduseropt_icmp_code();
        fn test_field_nduseropt_pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nduseroptmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nduseropt_pad2) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nduseroptmsg),
                    "::",
                    stringify!(nduseropt_pad2)
                )
            );
        }
        test_field_nduseropt_pad2();
        fn test_field_nduseropt_pad3() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_nduseroptmsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).nduseropt_pad3) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_nduseroptmsg),
                    "::",
                    stringify!(nduseropt_pad3)
                )
            );
        }
        test_field_nduseropt_pad3();
    }
    pub const LKL_NDUSEROPT_UNSPEC: _bindgen_ty_107 = 0;
    pub const LKL_NDUSEROPT_SRCADDR: _bindgen_ty_107 = 1;
    pub const __LKL__NDUSEROPT_MAX: _bindgen_ty_107 = 2;
    pub type _bindgen_ty_107 = ::std::os::raw::c_uint;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_NONE: lkl_rtnetlink_groups = 0;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_LINK: lkl_rtnetlink_groups = 1;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_NOTIFY: lkl_rtnetlink_groups = 2;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_NEIGH: lkl_rtnetlink_groups = 3;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_TC: lkl_rtnetlink_groups = 4;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV4_IFADDR: lkl_rtnetlink_groups = 5;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV4_MROUTE: lkl_rtnetlink_groups = 6;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV4_ROUTE: lkl_rtnetlink_groups = 7;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV4_RULE: lkl_rtnetlink_groups = 8;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV6_IFADDR: lkl_rtnetlink_groups = 9;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV6_MROUTE: lkl_rtnetlink_groups = 10;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV6_ROUTE: lkl_rtnetlink_groups = 11;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV6_IFINFO: lkl_rtnetlink_groups = 12;
    pub const lkl_rtnetlink_groups_lkl_RTNLGRP_DECnet_IFADDR: lkl_rtnetlink_groups = 13;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_NOP2: lkl_rtnetlink_groups = 14;
    pub const lkl_rtnetlink_groups_lkl_RTNLGRP_DECnet_ROUTE: lkl_rtnetlink_groups = 15;
    pub const lkl_rtnetlink_groups_lkl_RTNLGRP_DECnet_RULE: lkl_rtnetlink_groups = 16;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_NOP4: lkl_rtnetlink_groups = 17;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV6_PREFIX: lkl_rtnetlink_groups = 18;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV6_RULE: lkl_rtnetlink_groups = 19;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_ND_USEROPT: lkl_rtnetlink_groups = 20;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_PHONET_IFADDR: lkl_rtnetlink_groups = 21;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_PHONET_ROUTE: lkl_rtnetlink_groups = 22;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_DCB: lkl_rtnetlink_groups = 23;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV4_NETCONF: lkl_rtnetlink_groups = 24;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV6_NETCONF: lkl_rtnetlink_groups = 25;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_MDB: lkl_rtnetlink_groups = 26;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_MPLS_ROUTE: lkl_rtnetlink_groups = 27;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_NSID: lkl_rtnetlink_groups = 28;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_MPLS_NETCONF: lkl_rtnetlink_groups = 29;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV4_MROUTE_R: lkl_rtnetlink_groups = 30;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_IPV6_MROUTE_R: lkl_rtnetlink_groups = 31;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_NEXTHOP: lkl_rtnetlink_groups = 32;
    pub const lkl_rtnetlink_groups_LKL_RTNLGRP_BRVLAN: lkl_rtnetlink_groups = 33;
    pub const lkl_rtnetlink_groups___LKL__RTNLGRP_MAX: lkl_rtnetlink_groups = 34;
    pub type lkl_rtnetlink_groups = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tcamsg {
        pub tca_family: ::std::os::raw::c_uchar,
        pub tca__pad1: ::std::os::raw::c_uchar,
        pub tca__pad2: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_lkl_tcamsg() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tcamsg>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_tcamsg))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tcamsg>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_tcamsg))
        );
        fn test_field_tca_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tcamsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tca_family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tcamsg),
                    "::",
                    stringify!(tca_family)
                )
            );
        }
        test_field_tca_family();
        fn test_field_tca__pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tcamsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tca__pad1) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tcamsg),
                    "::",
                    stringify!(tca__pad1)
                )
            );
        }
        test_field_tca__pad1();
        fn test_field_tca__pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tcamsg>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tca__pad2) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tcamsg),
                    "::",
                    stringify!(tca__pad2)
                )
            );
        }
        test_field_tca__pad2();
    }
    pub const LKL_TCA_ROOT_UNSPEC: _bindgen_ty_108 = 0;
    pub const LKL_TCA_ROOT_TAB: _bindgen_ty_108 = 1;
    pub const LKL_TCA_ROOT_FLAGS: _bindgen_ty_108 = 2;
    pub const LKL_TCA_ROOT_COUNT: _bindgen_ty_108 = 3;
    pub const LKL_TCA_ROOT_TIME_DELTA: _bindgen_ty_108 = 4;
    pub const __LKL__TCA_ROOT_MAX: _bindgen_ty_108 = 5;
    pub type _bindgen_ty_108 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fib_rule_hdr {
        pub family: __lkl__u8,
        pub dst_len: __lkl__u8,
        pub src_len: __lkl__u8,
        pub tos: __lkl__u8,
        pub table: __lkl__u8,
        pub res1: __lkl__u8,
        pub res2: __lkl__u8,
        pub action: __lkl__u8,
        pub flags: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_fib_rule_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fib_rule_hdr>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_fib_rule_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fib_rule_hdr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fib_rule_hdr))
        );
        fn test_field_family() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_hdr),
                    "::",
                    stringify!(family)
                )
            );
        }
        test_field_family();
        fn test_field_dst_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dst_len) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_hdr),
                    "::",
                    stringify!(dst_len)
                )
            );
        }
        test_field_dst_len();
        fn test_field_src_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).src_len) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_hdr),
                    "::",
                    stringify!(src_len)
                )
            );
        }
        test_field_src_len();
        fn test_field_tos() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tos) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_hdr),
                    "::",
                    stringify!(tos)
                )
            );
        }
        test_field_tos();
        fn test_field_table() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_hdr),
                    "::",
                    stringify!(table)
                )
            );
        }
        test_field_table();
        fn test_field_res1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).res1) as usize - ptr as usize
                },
                5usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_hdr),
                    "::",
                    stringify!(res1)
                )
            );
        }
        test_field_res1();
        fn test_field_res2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).res2) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_hdr),
                    "::",
                    stringify!(res2)
                )
            );
        }
        test_field_res2();
        fn test_field_action() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize
                },
                7usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_hdr),
                    "::",
                    stringify!(action)
                )
            );
        }
        test_field_action();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_hdr),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fib_rule_uid_range {
        pub start: __lkl__u32,
        pub end: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_fib_rule_uid_range() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fib_rule_uid_range>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_fib_rule_uid_range))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fib_rule_uid_range>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_fib_rule_uid_range))
        );
        fn test_field_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_uid_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_uid_range),
                    "::",
                    stringify!(start)
                )
            );
        }
        test_field_start();
        fn test_field_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_uid_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_uid_range),
                    "::",
                    stringify!(end)
                )
            );
        }
        test_field_end();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_fib_rule_port_range {
        pub start: __lkl__u16,
        pub end: __lkl__u16,
    }
    #[test]
    fn bindgen_test_layout_lkl_fib_rule_port_range() {
        assert_eq!(
            ::std::mem::size_of::<lkl_fib_rule_port_range>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_fib_rule_port_range))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_fib_rule_port_range>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_fib_rule_port_range))
        );
        fn test_field_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_port_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_port_range),
                    "::",
                    stringify!(start)
                )
            );
        }
        test_field_start();
        fn test_field_end() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_fib_rule_port_range>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_fib_rule_port_range),
                    "::",
                    stringify!(end)
                )
            );
        }
        test_field_end();
    }
    pub const LKL_FRA_UNSPEC: _bindgen_ty_109 = 0;
    pub const LKL_FRA_DST: _bindgen_ty_109 = 1;
    pub const LKL_FRA_SRC: _bindgen_ty_109 = 2;
    pub const LKL_FRA_IIFNAME: _bindgen_ty_109 = 3;
    pub const LKL_FRA_GOTO: _bindgen_ty_109 = 4;
    pub const LKL_FRA_UNUSED2: _bindgen_ty_109 = 5;
    pub const LKL_FRA_PRIORITY: _bindgen_ty_109 = 6;
    pub const LKL_FRA_UNUSED3: _bindgen_ty_109 = 7;
    pub const LKL_FRA_UNUSED4: _bindgen_ty_109 = 8;
    pub const LKL_FRA_UNUSED5: _bindgen_ty_109 = 9;
    pub const LKL_FRA_FWMARK: _bindgen_ty_109 = 10;
    pub const LKL_FRA_FLOW: _bindgen_ty_109 = 11;
    pub const LKL_FRA_TUN_ID: _bindgen_ty_109 = 12;
    pub const LKL_FRA_SUPPRESS_IFGROUP: _bindgen_ty_109 = 13;
    pub const LKL_FRA_SUPPRESS_PREFIXLEN: _bindgen_ty_109 = 14;
    pub const LKL_FRA_TABLE: _bindgen_ty_109 = 15;
    pub const LKL_FRA_FWMASK: _bindgen_ty_109 = 16;
    pub const LKL_FRA_OIFNAME: _bindgen_ty_109 = 17;
    pub const LKL_FRA_PAD: _bindgen_ty_109 = 18;
    pub const LKL_FRA_L3MDEV: _bindgen_ty_109 = 19;
    pub const LKL_FRA_UID_RANGE: _bindgen_ty_109 = 20;
    pub const LKL_FRA_PROTOCOL: _bindgen_ty_109 = 21;
    pub const LKL_FRA_IP_PROTO: _bindgen_ty_109 = 22;
    pub const LKL_FRA_SPORT_RANGE: _bindgen_ty_109 = 23;
    pub const LKL_FRA_DPORT_RANGE: _bindgen_ty_109 = 24;
    pub const __LKL__FRA_MAX: _bindgen_ty_109 = 25;
    pub type _bindgen_ty_109 = ::std::os::raw::c_uint;
    pub const LKL_FR_ACT_UNSPEC: _bindgen_ty_110 = 0;
    pub const LKL_FR_ACT_TO_TBL: _bindgen_ty_110 = 1;
    pub const LKL_FR_ACT_GOTO: _bindgen_ty_110 = 2;
    pub const LKL_FR_ACT_NOP: _bindgen_ty_110 = 3;
    pub const LKL_FR_ACT_RES3: _bindgen_ty_110 = 4;
    pub const LKL_FR_ACT_RES4: _bindgen_ty_110 = 5;
    pub const LKL_FR_ACT_BLACKHOLE: _bindgen_ty_110 = 6;
    pub const LKL_FR_ACT_UNREACHABLE: _bindgen_ty_110 = 7;
    pub const LKL_FR_ACT_PROHIBIT: _bindgen_ty_110 = 8;
    pub const __LKL__FR_ACT_MAX: _bindgen_ty_110 = 9;
    pub type _bindgen_ty_110 = ::std::os::raw::c_uint;
    extern "C" {
        pub fn lkl_trigger_irq(irq: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lkl_get_free_irq(user: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lkl_put_irq(irq: ::std::os::raw::c_int, name: *const ::std::os::raw::c_char);
    }
    pub type __lkl__virtio16 = __lkl__u16;
    pub type __lkl__virtio32 = __lkl__u32;
    pub type __lkl__virtio64 = __lkl__u64;
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_blk_config {
        pub capacity: __lkl__virtio64,
        pub size_max: __lkl__virtio32,
        pub seg_max: __lkl__virtio32,
        pub geometry: lkl_virtio_blk_config_lkl_virtio_blk_geometry,
        pub blk_size: __lkl__virtio32,
        pub physical_block_exp: __lkl__u8,
        pub alignment_offset: __lkl__u8,
        pub min_io_size: __lkl__virtio16,
        pub opt_io_size: __lkl__virtio32,
        pub wce: __lkl__u8,
        pub unused: __lkl__u8,
        pub num_queues: __lkl__virtio16,
        pub max_discard_sectors: __lkl__virtio32,
        pub max_discard_seg: __lkl__virtio32,
        pub discard_sector_alignment: __lkl__virtio32,
        pub max_write_zeroes_sectors: __lkl__virtio32,
        pub max_write_zeroes_seg: __lkl__virtio32,
        pub write_zeroes_may_unmap: __lkl__u8,
        pub unused1: [__lkl__u8; 3usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_blk_config_lkl_virtio_blk_geometry {
        pub cylinders: __lkl__virtio16,
        pub heads: __lkl__u8,
        pub sectors: __lkl__u8,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_blk_config_lkl_virtio_blk_geometry() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_blk_config_lkl_virtio_blk_geometry>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_virtio_blk_config_lkl_virtio_blk_geometry)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_blk_config_lkl_virtio_blk_geometry>(),
            2usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_virtio_blk_config_lkl_virtio_blk_geometry)
            )
        );
        fn test_field_cylinders() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_virtio_blk_config_lkl_virtio_blk_geometry > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cylinders) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config_lkl_virtio_blk_geometry),
                    "::",
                    stringify!(cylinders)
                )
            );
        }
        test_field_cylinders();
        fn test_field_heads() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_virtio_blk_config_lkl_virtio_blk_geometry > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).heads) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config_lkl_virtio_blk_geometry),
                    "::",
                    stringify!(heads)
                )
            );
        }
        test_field_heads();
        fn test_field_sectors() {
            assert_eq!(
                unsafe {
                    let uninit = :: std :: mem :: MaybeUninit :: < lkl_virtio_blk_config_lkl_virtio_blk_geometry > :: uninit () ;
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sectors) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config_lkl_virtio_blk_geometry),
                    "::",
                    stringify!(sectors)
                )
            );
        }
        test_field_sectors();
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_blk_config() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_blk_config>(),
            60usize,
            concat!("Size of: ", stringify!(lkl_virtio_blk_config))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_blk_config>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_virtio_blk_config))
        );
        fn test_field_capacity() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(capacity)
                )
            );
        }
        test_field_capacity();
        fn test_field_size_max() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).size_max) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(size_max)
                )
            );
        }
        test_field_size_max();
        fn test_field_seg_max() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).seg_max) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(seg_max)
                )
            );
        }
        test_field_seg_max();
        fn test_field_geometry() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(geometry)
                )
            );
        }
        test_field_geometry();
        fn test_field_blk_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).blk_size) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(blk_size)
                )
            );
        }
        test_field_blk_size();
        fn test_field_physical_block_exp() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).physical_block_exp) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(physical_block_exp)
                )
            );
        }
        test_field_physical_block_exp();
        fn test_field_alignment_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).alignment_offset) as usize - ptr as usize
                },
                25usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(alignment_offset)
                )
            );
        }
        test_field_alignment_offset();
        fn test_field_min_io_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).min_io_size) as usize - ptr as usize
                },
                26usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(min_io_size)
                )
            );
        }
        test_field_min_io_size();
        fn test_field_opt_io_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).opt_io_size) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(opt_io_size)
                )
            );
        }
        test_field_opt_io_size();
        fn test_field_wce() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).wce) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(wce)
                )
            );
        }
        test_field_wce();
        fn test_field_unused() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize
                },
                33usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(unused)
                )
            );
        }
        test_field_unused();
        fn test_field_num_queues() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).num_queues) as usize - ptr as usize
                },
                34usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(num_queues)
                )
            );
        }
        test_field_num_queues();
        fn test_field_max_discard_sectors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_discard_sectors) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(max_discard_sectors)
                )
            );
        }
        test_field_max_discard_sectors();
        fn test_field_max_discard_seg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_discard_seg) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(max_discard_seg)
                )
            );
        }
        test_field_max_discard_seg();
        fn test_field_discard_sector_alignment() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).discard_sector_alignment) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(discard_sector_alignment)
                )
            );
        }
        test_field_discard_sector_alignment();
        fn test_field_max_write_zeroes_sectors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_write_zeroes_sectors) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(max_write_zeroes_sectors)
                )
            );
        }
        test_field_max_write_zeroes_sectors();
        fn test_field_max_write_zeroes_seg() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_write_zeroes_seg) as usize - ptr as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(max_write_zeroes_seg)
                )
            );
        }
        test_field_max_write_zeroes_seg();
        fn test_field_write_zeroes_may_unmap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).write_zeroes_may_unmap) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(write_zeroes_may_unmap)
                )
            );
        }
        test_field_write_zeroes_may_unmap();
        fn test_field_unused1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).unused1) as usize - ptr as usize
                },
                57usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_config),
                    "::",
                    stringify!(unused1)
                )
            );
        }
        test_field_unused1();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_blk_outhdr {
        pub type_: __lkl__virtio32,
        pub ioprio: __lkl__virtio32,
        pub sector: __lkl__virtio64,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_blk_outhdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_blk_outhdr>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_virtio_blk_outhdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_blk_outhdr>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_virtio_blk_outhdr))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_outhdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_outhdr),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
        fn test_field_ioprio() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_outhdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ioprio) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_outhdr),
                    "::",
                    stringify!(ioprio)
                )
            );
        }
        test_field_ioprio();
        fn test_field_sector() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_blk_outhdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sector) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_outhdr),
                    "::",
                    stringify!(sector)
                )
            );
        }
        test_field_sector();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_blk_discard_write_zeroes {
        pub sector: __lkl__le64,
        pub num_sectors: __lkl__le32,
        pub flags: __lkl__le32,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_blk_discard_write_zeroes() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_blk_discard_write_zeroes>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_virtio_blk_discard_write_zeroes))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_blk_discard_write_zeroes>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_virtio_blk_discard_write_zeroes)
            )
        );
        fn test_field_sector() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_virtio_blk_discard_write_zeroes>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sector) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_discard_write_zeroes),
                    "::",
                    stringify!(sector)
                )
            );
        }
        test_field_sector();
        fn test_field_num_sectors() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_virtio_blk_discard_write_zeroes>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).num_sectors) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_discard_write_zeroes),
                    "::",
                    stringify!(num_sectors)
                )
            );
        }
        test_field_num_sectors();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_virtio_blk_discard_write_zeroes>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_blk_discard_write_zeroes),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_scsi_inhdr {
        pub errors: __lkl__virtio32,
        pub data_len: __lkl__virtio32,
        pub sense_len: __lkl__virtio32,
        pub residual: __lkl__virtio32,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_scsi_inhdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_scsi_inhdr>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_virtio_scsi_inhdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_scsi_inhdr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_virtio_scsi_inhdr))
        );
        fn test_field_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_scsi_inhdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).errors) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_scsi_inhdr),
                    "::",
                    stringify!(errors)
                )
            );
        }
        test_field_errors();
        fn test_field_data_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_scsi_inhdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).data_len) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_scsi_inhdr),
                    "::",
                    stringify!(data_len)
                )
            );
        }
        test_field_data_len();
        fn test_field_sense_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_scsi_inhdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sense_len) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_scsi_inhdr),
                    "::",
                    stringify!(sense_len)
                )
            );
        }
        test_field_sense_len();
        fn test_field_residual() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_scsi_inhdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).residual) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_scsi_inhdr),
                    "::",
                    stringify!(residual)
                )
            );
        }
        test_field_residual();
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ethhdr {
        pub h_dest: [::std::os::raw::c_uchar; 6usize],
        pub h_source: [::std::os::raw::c_uchar; 6usize],
        pub h_proto: __lkl__be16,
    }
    #[test]
    fn bindgen_test_layout_lkl_ethhdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ethhdr>(),
            14usize,
            concat!("Size of: ", stringify!(lkl_ethhdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ethhdr>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_ethhdr))
        );
        fn test_field_h_dest() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ethhdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).h_dest) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ethhdr),
                    "::",
                    stringify!(h_dest)
                )
            );
        }
        test_field_h_dest();
        fn test_field_h_source() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ethhdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).h_source) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ethhdr),
                    "::",
                    stringify!(h_source)
                )
            );
        }
        test_field_h_source();
        fn test_field_h_proto() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ethhdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).h_proto) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ethhdr),
                    "::",
                    stringify!(h_proto)
                )
            );
        }
        test_field_h_proto();
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_net_config {
        pub mac: [__lkl__u8; 6usize],
        pub status: __lkl__virtio16,
        pub max_virtqueue_pairs: __lkl__virtio16,
        pub mtu: __lkl__virtio16,
        pub speed: __lkl__le32,
        pub duplex: __lkl__u8,
        pub rss_max_key_size: __lkl__u8,
        pub rss_max_indirection_table_length: __lkl__le16,
        pub supported_hash_types: __lkl__le32,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_config() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_config>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_config))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_config>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_virtio_net_config))
        );
        fn test_field_mac() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mac) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_config),
                    "::",
                    stringify!(mac)
                )
            );
        }
        test_field_mac();
        fn test_field_status() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_config),
                    "::",
                    stringify!(status)
                )
            );
        }
        test_field_status();
        fn test_field_max_virtqueue_pairs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_virtqueue_pairs) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_config),
                    "::",
                    stringify!(max_virtqueue_pairs)
                )
            );
        }
        test_field_max_virtqueue_pairs();
        fn test_field_mtu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_config),
                    "::",
                    stringify!(mtu)
                )
            );
        }
        test_field_mtu();
        fn test_field_speed() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_config),
                    "::",
                    stringify!(speed)
                )
            );
        }
        test_field_speed();
        fn test_field_duplex() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).duplex) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_config),
                    "::",
                    stringify!(duplex)
                )
            );
        }
        test_field_duplex();
        fn test_field_rss_max_key_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rss_max_key_size) as usize - ptr as usize
                },
                17usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_config),
                    "::",
                    stringify!(rss_max_key_size)
                )
            );
        }
        test_field_rss_max_key_size();
        fn test_field_rss_max_indirection_table_length() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rss_max_indirection_table_length) as usize
                        - ptr as usize
                },
                18usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_config),
                    "::",
                    stringify!(rss_max_indirection_table_length)
                )
            );
        }
        test_field_rss_max_indirection_table_length();
        fn test_field_supported_hash_types() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).supported_hash_types) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_config),
                    "::",
                    stringify!(supported_hash_types)
                )
            );
        }
        test_field_supported_hash_types();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_virtio_net_hdr_v1 {
        pub flags: __lkl__u8,
        pub gso_type: __lkl__u8,
        pub hdr_len: __lkl__virtio16,
        pub gso_size: __lkl__virtio16,
        pub __bindgen_anon_1: lkl_virtio_net_hdr_v1__bindgen_ty_1,
        pub num_buffers: __lkl__virtio16,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_virtio_net_hdr_v1__bindgen_ty_1 {
        pub __bindgen_anon_1: lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1,
        pub csum: lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2,
        pub rsc: lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1 {
        pub csum_start: __lkl__virtio16,
        pub csum_offset: __lkl__virtio16,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1>(),
            2usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field_csum_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).csum_start) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(csum_start)
                )
            );
        }
        test_field_csum_start();
        fn test_field_csum_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).csum_offset) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(csum_offset)
                )
            );
        }
        test_field_csum_offset();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2 {
        pub start: __lkl__virtio16,
        pub offset: __lkl__virtio16,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2>(),
            2usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2)
            )
        );
        fn test_field_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(start)
                )
            );
        }
        test_field_start();
        fn test_field_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_2),
                    "::",
                    stringify!(offset)
                )
            );
        }
        test_field_offset();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3 {
        pub segments: __lkl__le16,
        pub dup_acks: __lkl__le16,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3>(),
            4usize,
            concat!(
                "Size of: ",
                stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3>(),
            2usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3)
            )
        );
        fn test_field_segments() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).segments) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3),
                    "::",
                    stringify!(segments)
                )
            );
        }
        test_field_segments();
        fn test_field_dup_acks() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dup_acks) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1__bindgen_ty_3),
                    "::",
                    stringify!(dup_acks)
                )
            );
        }
        test_field_dup_acks();
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_hdr_v1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_hdr_v1__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_hdr_v1__bindgen_ty_1>(),
            2usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1)
            )
        );
        fn test_field_csum() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).csum) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1),
                    "::",
                    stringify!(csum)
                )
            );
        }
        test_field_csum();
        fn test_field_rsc() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rsc) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1__bindgen_ty_1),
                    "::",
                    stringify!(rsc)
                )
            );
        }
        test_field_rsc();
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_hdr_v1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_hdr_v1>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_hdr_v1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_hdr_v1>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_virtio_net_hdr_v1))
        );
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_gso_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gso_type) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1),
                    "::",
                    stringify!(gso_type)
                )
            );
        }
        test_field_gso_type();
        fn test_field_hdr_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hdr_len) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1),
                    "::",
                    stringify!(hdr_len)
                )
            );
        }
        test_field_hdr_len();
        fn test_field_gso_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gso_size) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1),
                    "::",
                    stringify!(gso_size)
                )
            );
        }
        test_field_gso_size();
        fn test_field_num_buffers() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).num_buffers) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1),
                    "::",
                    stringify!(num_buffers)
                )
            );
        }
        test_field_num_buffers();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_virtio_net_hdr_v1_hash {
        pub hdr: lkl_virtio_net_hdr_v1,
        pub hash_value: __lkl__le32,
        pub hash_report: __lkl__le16,
        pub padding: __lkl__le16,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_hdr_v1_hash() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_hdr_v1_hash>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_hdr_v1_hash))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_hdr_v1_hash>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_virtio_net_hdr_v1_hash))
        );
        fn test_field_hdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1_hash>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1_hash),
                    "::",
                    stringify!(hdr)
                )
            );
        }
        test_field_hdr();
        fn test_field_hash_value() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1_hash>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hash_value) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1_hash),
                    "::",
                    stringify!(hash_value)
                )
            );
        }
        test_field_hash_value();
        fn test_field_hash_report() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1_hash>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hash_report) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1_hash),
                    "::",
                    stringify!(hash_report)
                )
            );
        }
        test_field_hash_report();
        fn test_field_padding() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_v1_hash>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
                },
                18usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_v1_hash),
                    "::",
                    stringify!(padding)
                )
            );
        }
        test_field_padding();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_net_hdr {
        pub flags: __lkl__u8,
        pub gso_type: __lkl__u8,
        pub hdr_len: __lkl__virtio16,
        pub gso_size: __lkl__virtio16,
        pub csum_start: __lkl__virtio16,
        pub csum_offset: __lkl__virtio16,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_hdr>(),
            10usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_hdr>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_virtio_net_hdr))
        );
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_gso_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gso_type) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr),
                    "::",
                    stringify!(gso_type)
                )
            );
        }
        test_field_gso_type();
        fn test_field_hdr_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hdr_len) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr),
                    "::",
                    stringify!(hdr_len)
                )
            );
        }
        test_field_hdr_len();
        fn test_field_gso_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gso_size) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr),
                    "::",
                    stringify!(gso_size)
                )
            );
        }
        test_field_gso_size();
        fn test_field_csum_start() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).csum_start) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr),
                    "::",
                    stringify!(csum_start)
                )
            );
        }
        test_field_csum_start();
        fn test_field_csum_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).csum_offset) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr),
                    "::",
                    stringify!(csum_offset)
                )
            );
        }
        test_field_csum_offset();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_net_hdr_mrg_rxbuf {
        pub hdr: lkl_virtio_net_hdr,
        pub num_buffers: __lkl__virtio16,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_hdr_mrg_rxbuf() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_hdr_mrg_rxbuf>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_hdr_mrg_rxbuf))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_hdr_mrg_rxbuf>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_virtio_net_hdr_mrg_rxbuf))
        );
        fn test_field_hdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_mrg_rxbuf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_mrg_rxbuf),
                    "::",
                    stringify!(hdr)
                )
            );
        }
        test_field_hdr();
        fn test_field_num_buffers() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hdr_mrg_rxbuf>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).num_buffers) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hdr_mrg_rxbuf),
                    "::",
                    stringify!(num_buffers)
                )
            );
        }
        test_field_num_buffers();
    }
    #[repr(C, packed)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_net_ctrl_hdr {
        pub class: __lkl__u8,
        pub cmd: __lkl__u8,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_ctrl_hdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_ctrl_hdr>(),
            2usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_ctrl_hdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_ctrl_hdr>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_virtio_net_ctrl_hdr))
        );
        fn test_field_class() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_ctrl_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).class) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_ctrl_hdr),
                    "::",
                    stringify!(class)
                )
            );
        }
        test_field_class();
        fn test_field_cmd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_ctrl_hdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_ctrl_hdr),
                    "::",
                    stringify!(cmd)
                )
            );
        }
        test_field_cmd();
    }
    pub type lkl_virtio_net_ctrl_ack = __lkl__u8;
    #[repr(C, packed)]
    pub struct lkl_virtio_net_ctrl_mac {
        pub entries: __lkl__virtio32,
        pub macs: __IncompleteArrayField<[__lkl__u8; 6usize]>,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_ctrl_mac() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_ctrl_mac>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_ctrl_mac))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_ctrl_mac>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_virtio_net_ctrl_mac))
        );
        fn test_field_entries() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_ctrl_mac>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_ctrl_mac),
                    "::",
                    stringify!(entries)
                )
            );
        }
        test_field_entries();
        fn test_field_macs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_ctrl_mac>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).macs) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_ctrl_mac),
                    "::",
                    stringify!(macs)
                )
            );
        }
        test_field_macs();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_virtio_net_ctrl_mq {
        pub virtqueue_pairs: __lkl__virtio16,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_ctrl_mq() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_ctrl_mq>(),
            2usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_ctrl_mq))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_ctrl_mq>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_virtio_net_ctrl_mq))
        );
        fn test_field_virtqueue_pairs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_ctrl_mq>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).virtqueue_pairs) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_ctrl_mq),
                    "::",
                    stringify!(virtqueue_pairs)
                )
            );
        }
        test_field_virtqueue_pairs();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_virtio_net_rss_config {
        pub hash_types: __lkl__le32,
        pub indirection_table_mask: __lkl__le16,
        pub unclassified_queue: __lkl__le16,
        pub indirection_table: [__lkl__le16; 1usize],
        pub max_tx_vq: __lkl__le16,
        pub hash_key_length: __lkl__u8,
        pub hash_key_data: __IncompleteArrayField<__lkl__u8>,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_rss_config() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_rss_config>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_rss_config))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_rss_config>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_virtio_net_rss_config))
        );
        fn test_field_hash_types() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_rss_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hash_types) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_rss_config),
                    "::",
                    stringify!(hash_types)
                )
            );
        }
        test_field_hash_types();
        fn test_field_indirection_table_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_rss_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).indirection_table_mask) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_rss_config),
                    "::",
                    stringify!(indirection_table_mask)
                )
            );
        }
        test_field_indirection_table_mask();
        fn test_field_unclassified_queue() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_rss_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).unclassified_queue) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_rss_config),
                    "::",
                    stringify!(unclassified_queue)
                )
            );
        }
        test_field_unclassified_queue();
        fn test_field_indirection_table() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_rss_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).indirection_table) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_rss_config),
                    "::",
                    stringify!(indirection_table)
                )
            );
        }
        test_field_indirection_table();
        fn test_field_max_tx_vq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_rss_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_tx_vq) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_rss_config),
                    "::",
                    stringify!(max_tx_vq)
                )
            );
        }
        test_field_max_tx_vq();
        fn test_field_hash_key_length() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_rss_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hash_key_length) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_rss_config),
                    "::",
                    stringify!(hash_key_length)
                )
            );
        }
        test_field_hash_key_length();
        fn test_field_hash_key_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_rss_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hash_key_data) as usize - ptr as usize
                },
                13usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_rss_config),
                    "::",
                    stringify!(hash_key_data)
                )
            );
        }
        test_field_hash_key_data();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_virtio_net_hash_config {
        pub hash_types: __lkl__le32,
        pub reserved: [__lkl__le16; 4usize],
        pub hash_key_length: __lkl__u8,
        pub hash_key_data: __IncompleteArrayField<__lkl__u8>,
    }
    #[test]
    fn bindgen_test_layout_lkl_virtio_net_hash_config() {
        assert_eq!(
            ::std::mem::size_of::<lkl_virtio_net_hash_config>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_virtio_net_hash_config))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_virtio_net_hash_config>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_virtio_net_hash_config))
        );
        fn test_field_hash_types() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hash_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hash_types) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hash_config),
                    "::",
                    stringify!(hash_types)
                )
            );
        }
        test_field_hash_types();
        fn test_field_reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hash_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hash_config),
                    "::",
                    stringify!(reserved)
                )
            );
        }
        test_field_reserved();
        fn test_field_hash_key_length() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hash_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hash_key_length) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hash_config),
                    "::",
                    stringify!(hash_key_length)
                )
            );
        }
        test_field_hash_key_length();
        fn test_field_hash_key_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_virtio_net_hash_config>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hash_key_data) as usize - ptr as usize
                },
                13usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_virtio_net_hash_config),
                    "::",
                    stringify!(hash_key_data)
                )
            );
        }
        test_field_hash_key_data();
    }
    pub type int_least8_t = __int_least8_t;
    pub type int_least16_t = __int_least16_t;
    pub type int_least32_t = __int_least32_t;
    pub type int_least64_t = __int_least64_t;
    pub type uint_least8_t = __uint_least8_t;
    pub type uint_least16_t = __uint_least16_t;
    pub type uint_least32_t = __uint_least32_t;
    pub type uint_least64_t = __uint_least64_t;
    pub type int_fast8_t = ::std::os::raw::c_schar;
    pub type int_fast16_t = ::std::os::raw::c_long;
    pub type int_fast32_t = ::std::os::raw::c_long;
    pub type int_fast64_t = ::std::os::raw::c_long;
    pub type uint_fast8_t = ::std::os::raw::c_uchar;
    pub type uint_fast16_t = ::std::os::raw::c_ulong;
    pub type uint_fast32_t = ::std::os::raw::c_ulong;
    pub type uint_fast64_t = ::std::os::raw::c_ulong;
    pub type intmax_t = __intmax_t;
    pub type uintmax_t = __uintmax_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_vring_desc {
        pub addr: __lkl__virtio64,
        pub len: __lkl__virtio32,
        pub flags: __lkl__virtio16,
        pub next: __lkl__virtio16,
    }
    #[test]
    fn bindgen_test_layout_lkl_vring_desc() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vring_desc>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_vring_desc))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vring_desc>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_vring_desc))
        );
        fn test_field_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_desc>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_desc),
                    "::",
                    stringify!(addr)
                )
            );
        }
        test_field_addr();
        fn test_field_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_desc>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_desc),
                    "::",
                    stringify!(len)
                )
            );
        }
        test_field_len();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_desc>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_desc),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_next() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_desc>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
                },
                14usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_desc),
                    "::",
                    stringify!(next)
                )
            );
        }
        test_field_next();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_vring_avail {
        pub flags: __lkl__virtio16,
        pub idx: __lkl__virtio16,
        pub ring: __IncompleteArrayField<__lkl__virtio16>,
    }
    #[test]
    fn bindgen_test_layout_lkl_vring_avail() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vring_avail>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_vring_avail))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vring_avail>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_vring_avail))
        );
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_avail>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_avail),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_idx() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_avail>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_avail),
                    "::",
                    stringify!(idx)
                )
            );
        }
        test_field_idx();
        fn test_field_ring() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_avail>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ring) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_avail),
                    "::",
                    stringify!(ring)
                )
            );
        }
        test_field_ring();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_vring_used_elem {
        pub id: __lkl__virtio32,
        pub len: __lkl__virtio32,
    }
    #[test]
    fn bindgen_test_layout_lkl_vring_used_elem() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vring_used_elem>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_vring_used_elem))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vring_used_elem>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_vring_used_elem))
        );
        fn test_field_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_used_elem>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_used_elem),
                    "::",
                    stringify!(id)
                )
            );
        }
        test_field_id();
        fn test_field_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_used_elem>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_used_elem),
                    "::",
                    stringify!(len)
                )
            );
        }
        test_field_len();
    }
    pub type vring_used_elem_t = lkl_vring_used_elem;
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_vring_used {
        pub flags: __lkl__virtio16,
        pub idx: __lkl__virtio16,
        pub ring: __IncompleteArrayField<vring_used_elem_t>,
    }
    #[test]
    fn bindgen_test_layout_lkl_vring_used() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vring_used>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_vring_used))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vring_used>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_vring_used))
        );
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_used>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_used),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_idx() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_used>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_used),
                    "::",
                    stringify!(idx)
                )
            );
        }
        test_field_idx();
        fn test_field_ring() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_used>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ring) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_used),
                    "::",
                    stringify!(ring)
                )
            );
        }
        test_field_ring();
    }
    pub type vring_desc_t = lkl_vring_desc;
    pub type vring_avail_t = lkl_vring_avail;
    pub type vring_used_t = lkl_vring_used;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_vring {
        pub num: ::std::os::raw::c_uint,
        pub desc: *mut vring_desc_t,
        pub avail: *mut vring_avail_t,
        pub used: *mut vring_used_t,
    }
    #[test]
    fn bindgen_test_layout_lkl_vring() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vring>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_vring))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vring>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_vring))
        );
        fn test_field_num() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring),
                    "::",
                    stringify!(num)
                )
            );
        }
        test_field_num();
        fn test_field_desc() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring),
                    "::",
                    stringify!(desc)
                )
            );
        }
        test_field_desc();
        fn test_field_avail() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).avail) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring),
                    "::",
                    stringify!(avail)
                )
            );
        }
        test_field_avail();
        fn test_field_used() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring),
                    "::",
                    stringify!(used)
                )
            );
        }
        test_field_used();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_vring_packed_desc_event {
        pub off_wrap: __lkl__le16,
        pub flags: __lkl__le16,
    }
    #[test]
    fn bindgen_test_layout_lkl_vring_packed_desc_event() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vring_packed_desc_event>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_vring_packed_desc_event))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vring_packed_desc_event>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_vring_packed_desc_event))
        );
        fn test_field_off_wrap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_packed_desc_event>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).off_wrap) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_packed_desc_event),
                    "::",
                    stringify!(off_wrap)
                )
            );
        }
        test_field_off_wrap();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_packed_desc_event>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_packed_desc_event),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_vring_packed_desc {
        pub addr: __lkl__le64,
        pub len: __lkl__le32,
        pub id: __lkl__le16,
        pub flags: __lkl__le16,
    }
    #[test]
    fn bindgen_test_layout_lkl_vring_packed_desc() {
        assert_eq!(
            ::std::mem::size_of::<lkl_vring_packed_desc>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_vring_packed_desc))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_vring_packed_desc>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_vring_packed_desc))
        );
        fn test_field_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_packed_desc>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_packed_desc),
                    "::",
                    stringify!(addr)
                )
            );
        }
        test_field_addr();
        fn test_field_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_packed_desc>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_packed_desc),
                    "::",
                    stringify!(len)
                )
            );
        }
        test_field_len();
        fn test_field_id() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_packed_desc>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_packed_desc),
                    "::",
                    stringify!(id)
                )
            );
        }
        test_field_id();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_vring_packed_desc>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                14usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_vring_packed_desc),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_stats {
        pub bytes: __lkl__u64,
        pub packets: __lkl__u32,
        pub drops: __lkl__u32,
        pub overlimits: __lkl__u32,
        pub bps: __lkl__u32,
        pub pps: __lkl__u32,
        pub qlen: __lkl__u32,
        pub backlog: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_stats>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_tc_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_stats>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_tc_stats))
        );
        fn test_field_bytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_stats),
                    "::",
                    stringify!(bytes)
                )
            );
        }
        test_field_bytes();
        fn test_field_packets() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).packets) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_stats),
                    "::",
                    stringify!(packets)
                )
            );
        }
        test_field_packets();
        fn test_field_drops() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).drops) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_stats),
                    "::",
                    stringify!(drops)
                )
            );
        }
        test_field_drops();
        fn test_field_overlimits() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).overlimits) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_stats),
                    "::",
                    stringify!(overlimits)
                )
            );
        }
        test_field_overlimits();
        fn test_field_bps() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bps) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_stats),
                    "::",
                    stringify!(bps)
                )
            );
        }
        test_field_bps();
        fn test_field_pps() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pps) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_stats),
                    "::",
                    stringify!(pps)
                )
            );
        }
        test_field_pps();
        fn test_field_qlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qlen) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_stats),
                    "::",
                    stringify!(qlen)
                )
            );
        }
        test_field_qlen();
        fn test_field_backlog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).backlog) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_stats),
                    "::",
                    stringify!(backlog)
                )
            );
        }
        test_field_backlog();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_estimator {
        pub interval: ::std::os::raw::c_schar,
        pub ewma_log: ::std::os::raw::c_uchar,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_estimator() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_estimator>(),
            2usize,
            concat!("Size of: ", stringify!(lkl_tc_estimator))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_estimator>(),
            1usize,
            concat!("Alignment of ", stringify!(lkl_tc_estimator))
        );
        fn test_field_interval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_estimator>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_estimator),
                    "::",
                    stringify!(interval)
                )
            );
        }
        test_field_interval();
        fn test_field_ewma_log() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_estimator>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ewma_log) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_estimator),
                    "::",
                    stringify!(ewma_log)
                )
            );
        }
        test_field_ewma_log();
    }
    pub const lkl_tc_link_layer_LKL_TC_LINKLAYER_UNAWARE: lkl_tc_link_layer = 0;
    pub const lkl_tc_link_layer_LKL_TC_LINKLAYER_ETHERNET: lkl_tc_link_layer = 1;
    pub const lkl_tc_link_layer_LKL_TC_LINKLAYER_ATM: lkl_tc_link_layer = 2;
    pub type lkl_tc_link_layer = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_ratespec {
        pub cell_log: ::std::os::raw::c_uchar,
        pub linklayer: __lkl__u8,
        pub overhead: ::std::os::raw::c_ushort,
        pub cell_align: ::std::os::raw::c_short,
        pub mpu: ::std::os::raw::c_ushort,
        pub rate: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_ratespec() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_ratespec>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_tc_ratespec))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_ratespec>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_ratespec))
        );
        fn test_field_cell_log() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_ratespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cell_log) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_ratespec),
                    "::",
                    stringify!(cell_log)
                )
            );
        }
        test_field_cell_log();
        fn test_field_linklayer() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_ratespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).linklayer) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_ratespec),
                    "::",
                    stringify!(linklayer)
                )
            );
        }
        test_field_linklayer();
        fn test_field_overhead() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_ratespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).overhead) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_ratespec),
                    "::",
                    stringify!(overhead)
                )
            );
        }
        test_field_overhead();
        fn test_field_cell_align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_ratespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cell_align) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_ratespec),
                    "::",
                    stringify!(cell_align)
                )
            );
        }
        test_field_cell_align();
        fn test_field_mpu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_ratespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mpu) as usize - ptr as usize
                },
                6usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_ratespec),
                    "::",
                    stringify!(mpu)
                )
            );
        }
        test_field_mpu();
        fn test_field_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_ratespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_ratespec),
                    "::",
                    stringify!(rate)
                )
            );
        }
        test_field_rate();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_sizespec {
        pub cell_log: ::std::os::raw::c_uchar,
        pub size_log: ::std::os::raw::c_uchar,
        pub cell_align: ::std::os::raw::c_short,
        pub overhead: ::std::os::raw::c_int,
        pub linklayer: ::std::os::raw::c_uint,
        pub mpu: ::std::os::raw::c_uint,
        pub mtu: ::std::os::raw::c_uint,
        pub tsize: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_sizespec() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_sizespec>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_tc_sizespec))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_sizespec>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_sizespec))
        );
        fn test_field_cell_log() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sizespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cell_log) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sizespec),
                    "::",
                    stringify!(cell_log)
                )
            );
        }
        test_field_cell_log();
        fn test_field_size_log() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sizespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).size_log) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sizespec),
                    "::",
                    stringify!(size_log)
                )
            );
        }
        test_field_size_log();
        fn test_field_cell_align() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sizespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cell_align) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sizespec),
                    "::",
                    stringify!(cell_align)
                )
            );
        }
        test_field_cell_align();
        fn test_field_overhead() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sizespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).overhead) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sizespec),
                    "::",
                    stringify!(overhead)
                )
            );
        }
        test_field_overhead();
        fn test_field_linklayer() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sizespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).linklayer) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sizespec),
                    "::",
                    stringify!(linklayer)
                )
            );
        }
        test_field_linklayer();
        fn test_field_mpu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sizespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mpu) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sizespec),
                    "::",
                    stringify!(mpu)
                )
            );
        }
        test_field_mpu();
        fn test_field_mtu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sizespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sizespec),
                    "::",
                    stringify!(mtu)
                )
            );
        }
        test_field_mtu();
        fn test_field_tsize() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sizespec>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tsize) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sizespec),
                    "::",
                    stringify!(tsize)
                )
            );
        }
        test_field_tsize();
    }
    pub const LKL_TCA_STAB_UNSPEC: _bindgen_ty_111 = 0;
    pub const LKL_TCA_STAB_BASE: _bindgen_ty_111 = 1;
    pub const LKL_TCA_STAB_DATA: _bindgen_ty_111 = 2;
    pub const __LKL__TCA_STAB_MAX: _bindgen_ty_111 = 3;
    pub type _bindgen_ty_111 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_fifo_qopt {
        pub limit: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_fifo_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_fifo_qopt>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_tc_fifo_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_fifo_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_fifo_qopt))
        );
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fifo_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fifo_qopt),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_skbprio_qopt {
        pub limit: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_skbprio_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_skbprio_qopt>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_tc_skbprio_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_skbprio_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_skbprio_qopt))
        );
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_skbprio_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_skbprio_qopt),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_prio_qopt {
        pub bands: ::std::os::raw::c_int,
        pub priomap: [__lkl__u8; 16usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_prio_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_prio_qopt>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_tc_prio_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_prio_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_prio_qopt))
        );
        fn test_field_bands() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_prio_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bands) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_prio_qopt),
                    "::",
                    stringify!(bands)
                )
            );
        }
        test_field_bands();
        fn test_field_priomap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_prio_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).priomap) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_prio_qopt),
                    "::",
                    stringify!(priomap)
                )
            );
        }
        test_field_priomap();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_multiq_qopt {
        pub bands: __lkl__u16,
        pub max_bands: __lkl__u16,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_multiq_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_multiq_qopt>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_tc_multiq_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_multiq_qopt>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_tc_multiq_qopt))
        );
        fn test_field_bands() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_multiq_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bands) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_multiq_qopt),
                    "::",
                    stringify!(bands)
                )
            );
        }
        test_field_bands();
        fn test_field_max_bands() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_multiq_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_bands) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_multiq_qopt),
                    "::",
                    stringify!(max_bands)
                )
            );
        }
        test_field_max_bands();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_plug_qopt {
        pub action: ::std::os::raw::c_int,
        pub limit: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_plug_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_plug_qopt>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_tc_plug_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_plug_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_plug_qopt))
        );
        fn test_field_action() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_plug_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_plug_qopt),
                    "::",
                    stringify!(action)
                )
            );
        }
        test_field_action();
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_plug_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_plug_qopt),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_tbf_qopt {
        pub rate: lkl_tc_ratespec,
        pub peakrate: lkl_tc_ratespec,
        pub limit: __lkl__u32,
        pub buffer: __lkl__u32,
        pub mtu: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_tbf_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_tbf_qopt>(),
            36usize,
            concat!("Size of: ", stringify!(lkl_tc_tbf_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_tbf_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_tbf_qopt))
        );
        fn test_field_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_tbf_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_tbf_qopt),
                    "::",
                    stringify!(rate)
                )
            );
        }
        test_field_rate();
        fn test_field_peakrate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_tbf_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).peakrate) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_tbf_qopt),
                    "::",
                    stringify!(peakrate)
                )
            );
        }
        test_field_peakrate();
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_tbf_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_tbf_qopt),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
        fn test_field_buffer() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_tbf_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_tbf_qopt),
                    "::",
                    stringify!(buffer)
                )
            );
        }
        test_field_buffer();
        fn test_field_mtu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_tbf_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_tbf_qopt),
                    "::",
                    stringify!(mtu)
                )
            );
        }
        test_field_mtu();
    }
    pub const LKL_TCA_TBF_UNSPEC: _bindgen_ty_112 = 0;
    pub const LKL_TCA_TBF_PARMS: _bindgen_ty_112 = 1;
    pub const LKL_TCA_TBF_RTAB: _bindgen_ty_112 = 2;
    pub const LKL_TCA_TBF_PTAB: _bindgen_ty_112 = 3;
    pub const LKL_TCA_TBF_RATE64: _bindgen_ty_112 = 4;
    pub const LKL_TCA_TBF_PRATE64: _bindgen_ty_112 = 5;
    pub const LKL_TCA_TBF_BURST: _bindgen_ty_112 = 6;
    pub const LKL_TCA_TBF_PBURST: _bindgen_ty_112 = 7;
    pub const LKL_TCA_TBF_PAD: _bindgen_ty_112 = 8;
    pub const __LKL__TCA_TBF_MAX: _bindgen_ty_112 = 9;
    pub type _bindgen_ty_112 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_sfq_qopt {
        pub quantum: ::std::os::raw::c_uint,
        pub perturb_period: ::std::os::raw::c_int,
        pub limit: __lkl__u32,
        pub divisor: ::std::os::raw::c_uint,
        pub flows: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_sfq_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_sfq_qopt>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_tc_sfq_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_sfq_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_sfq_qopt))
        );
        fn test_field_quantum() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).quantum) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt),
                    "::",
                    stringify!(quantum)
                )
            );
        }
        test_field_quantum();
        fn test_field_perturb_period() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).perturb_period) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt),
                    "::",
                    stringify!(perturb_period)
                )
            );
        }
        test_field_perturb_period();
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
        fn test_field_divisor() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).divisor) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt),
                    "::",
                    stringify!(divisor)
                )
            );
        }
        test_field_divisor();
        fn test_field_flows() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flows) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt),
                    "::",
                    stringify!(flows)
                )
            );
        }
        test_field_flows();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_sfqred_stats {
        pub prob_drop: __lkl__u32,
        pub forced_drop: __lkl__u32,
        pub prob_mark: __lkl__u32,
        pub forced_mark: __lkl__u32,
        pub prob_mark_head: __lkl__u32,
        pub forced_mark_head: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_sfqred_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_sfqred_stats>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_tc_sfqred_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_sfqred_stats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_sfqred_stats))
        );
        fn test_field_prob_drop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfqred_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prob_drop) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfqred_stats),
                    "::",
                    stringify!(prob_drop)
                )
            );
        }
        test_field_prob_drop();
        fn test_field_forced_drop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfqred_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).forced_drop) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfqred_stats),
                    "::",
                    stringify!(forced_drop)
                )
            );
        }
        test_field_forced_drop();
        fn test_field_prob_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfqred_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prob_mark) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfqred_stats),
                    "::",
                    stringify!(prob_mark)
                )
            );
        }
        test_field_prob_mark();
        fn test_field_forced_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfqred_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).forced_mark) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfqred_stats),
                    "::",
                    stringify!(forced_mark)
                )
            );
        }
        test_field_forced_mark();
        fn test_field_prob_mark_head() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfqred_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prob_mark_head) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfqred_stats),
                    "::",
                    stringify!(prob_mark_head)
                )
            );
        }
        test_field_prob_mark_head();
        fn test_field_forced_mark_head() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfqred_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).forced_mark_head) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfqred_stats),
                    "::",
                    stringify!(forced_mark_head)
                )
            );
        }
        test_field_forced_mark_head();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_sfq_qopt_v1 {
        pub v0: lkl_tc_sfq_qopt,
        pub depth: ::std::os::raw::c_uint,
        pub headdrop: ::std::os::raw::c_uint,
        pub limit: __lkl__u32,
        pub qth_min: __lkl__u32,
        pub qth_max: __lkl__u32,
        pub Wlog: ::std::os::raw::c_uchar,
        pub Plog: ::std::os::raw::c_uchar,
        pub Scell_log: ::std::os::raw::c_uchar,
        pub flags: ::std::os::raw::c_uchar,
        pub max_P: __lkl__u32,
        pub stats: lkl_tc_sfqred_stats,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_sfq_qopt_v1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_sfq_qopt_v1>(),
            72usize,
            concat!("Size of: ", stringify!(lkl_tc_sfq_qopt_v1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_sfq_qopt_v1>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_sfq_qopt_v1))
        );
        fn test_field_v0() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).v0) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(v0)
                )
            );
        }
        test_field_v0();
        fn test_field_depth() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(depth)
                )
            );
        }
        test_field_depth();
        fn test_field_headdrop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).headdrop) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(headdrop)
                )
            );
        }
        test_field_headdrop();
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
        fn test_field_qth_min() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qth_min) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(qth_min)
                )
            );
        }
        test_field_qth_min();
        fn test_field_qth_max() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qth_max) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(qth_max)
                )
            );
        }
        test_field_qth_max();
        fn test_field_Wlog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Wlog) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(Wlog)
                )
            );
        }
        test_field_Wlog();
        fn test_field_Plog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Plog) as usize - ptr as usize
                },
                41usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(Plog)
                )
            );
        }
        test_field_Plog();
        fn test_field_Scell_log() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Scell_log) as usize - ptr as usize
                },
                42usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(Scell_log)
                )
            );
        }
        test_field_Scell_log();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                43usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_max_P() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_P) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(max_P)
                )
            );
        }
        test_field_max_P();
        fn test_field_stats() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_qopt_v1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).stats) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_qopt_v1),
                    "::",
                    stringify!(stats)
                )
            );
        }
        test_field_stats();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_sfq_xstats {
        pub allot: __lkl__s32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_sfq_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_sfq_xstats>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_tc_sfq_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_sfq_xstats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_sfq_xstats))
        );
        fn test_field_allot() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfq_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).allot) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfq_xstats),
                    "::",
                    stringify!(allot)
                )
            );
        }
        test_field_allot();
    }
    pub const LKL_TCA_RED_UNSPEC: _bindgen_ty_113 = 0;
    pub const LKL_TCA_RED_PARMS: _bindgen_ty_113 = 1;
    pub const LKL_TCA_RED_STAB: _bindgen_ty_113 = 2;
    pub const LKL_TCA_RED_MAX_P: _bindgen_ty_113 = 3;
    pub const LKL_TCA_RED_FLAGS: _bindgen_ty_113 = 4;
    pub const LKL_TCA_RED_EARLY_DROP_BLOCK: _bindgen_ty_113 = 5;
    pub const LKL_TCA_RED_MARK_BLOCK: _bindgen_ty_113 = 6;
    pub const __LKL__TCA_RED_MAX: _bindgen_ty_113 = 7;
    pub type _bindgen_ty_113 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_red_qopt {
        pub limit: __lkl__u32,
        pub qth_min: __lkl__u32,
        pub qth_max: __lkl__u32,
        pub Wlog: ::std::os::raw::c_uchar,
        pub Plog: ::std::os::raw::c_uchar,
        pub Scell_log: ::std::os::raw::c_uchar,
        pub flags: ::std::os::raw::c_uchar,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_red_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_red_qopt>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_tc_red_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_red_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_red_qopt))
        );
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_qopt),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
        fn test_field_qth_min() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qth_min) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_qopt),
                    "::",
                    stringify!(qth_min)
                )
            );
        }
        test_field_qth_min();
        fn test_field_qth_max() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qth_max) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_qopt),
                    "::",
                    stringify!(qth_max)
                )
            );
        }
        test_field_qth_max();
        fn test_field_Wlog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Wlog) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_qopt),
                    "::",
                    stringify!(Wlog)
                )
            );
        }
        test_field_Wlog();
        fn test_field_Plog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Plog) as usize - ptr as usize
                },
                13usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_qopt),
                    "::",
                    stringify!(Plog)
                )
            );
        }
        test_field_Plog();
        fn test_field_Scell_log() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Scell_log) as usize - ptr as usize
                },
                14usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_qopt),
                    "::",
                    stringify!(Scell_log)
                )
            );
        }
        test_field_Scell_log();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                15usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_qopt),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_red_xstats {
        pub early: __lkl__u32,
        pub pdrop: __lkl__u32,
        pub other: __lkl__u32,
        pub marked: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_red_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_red_xstats>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_tc_red_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_red_xstats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_red_xstats))
        );
        fn test_field_early() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).early) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_xstats),
                    "::",
                    stringify!(early)
                )
            );
        }
        test_field_early();
        fn test_field_pdrop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pdrop) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_xstats),
                    "::",
                    stringify!(pdrop)
                )
            );
        }
        test_field_pdrop();
        fn test_field_other() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).other) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_xstats),
                    "::",
                    stringify!(other)
                )
            );
        }
        test_field_other();
        fn test_field_marked() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_red_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).marked) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_red_xstats),
                    "::",
                    stringify!(marked)
                )
            );
        }
        test_field_marked();
    }
    pub const LKL_TCA_GRED_UNSPEC: _bindgen_ty_114 = 0;
    pub const LKL_TCA_GRED_PARMS: _bindgen_ty_114 = 1;
    pub const LKL_TCA_GRED_STAB: _bindgen_ty_114 = 2;
    pub const LKL_TCA_GRED_DPS: _bindgen_ty_114 = 3;
    pub const LKL_TCA_GRED_MAX_P: _bindgen_ty_114 = 4;
    pub const LKL_TCA_GRED_LIMIT: _bindgen_ty_114 = 5;
    pub const LKL_TCA_GRED_VQ_LIST: _bindgen_ty_114 = 6;
    pub const __LKL__TCA_GRED_MAX: _bindgen_ty_114 = 7;
    pub type _bindgen_ty_114 = ::std::os::raw::c_uint;
    pub const LKL_TCA_GRED_VQ_ENTRY_UNSPEC: _bindgen_ty_115 = 0;
    pub const LKL_TCA_GRED_VQ_ENTRY: _bindgen_ty_115 = 1;
    pub const __LKL__TCA_GRED_VQ_ENTRY_MAX: _bindgen_ty_115 = 2;
    pub type _bindgen_ty_115 = ::std::os::raw::c_uint;
    pub const LKL_TCA_GRED_VQ_UNSPEC: _bindgen_ty_116 = 0;
    pub const LKL_TCA_GRED_VQ_PAD: _bindgen_ty_116 = 1;
    pub const LKL_TCA_GRED_VQ_DP: _bindgen_ty_116 = 2;
    pub const LKL_TCA_GRED_VQ_STAT_BYTES: _bindgen_ty_116 = 3;
    pub const LKL_TCA_GRED_VQ_STAT_PACKETS: _bindgen_ty_116 = 4;
    pub const LKL_TCA_GRED_VQ_STAT_BACKLOG: _bindgen_ty_116 = 5;
    pub const LKL_TCA_GRED_VQ_STAT_PROB_DROP: _bindgen_ty_116 = 6;
    pub const LKL_TCA_GRED_VQ_STAT_PROB_MARK: _bindgen_ty_116 = 7;
    pub const LKL_TCA_GRED_VQ_STAT_FORCED_DROP: _bindgen_ty_116 = 8;
    pub const LKL_TCA_GRED_VQ_STAT_FORCED_MARK: _bindgen_ty_116 = 9;
    pub const LKL_TCA_GRED_VQ_STAT_PDROP: _bindgen_ty_116 = 10;
    pub const LKL_TCA_GRED_VQ_STAT_OTHER: _bindgen_ty_116 = 11;
    pub const LKL_TCA_GRED_VQ_FLAGS: _bindgen_ty_116 = 12;
    pub const __LKL__TCA_GRED_VQ_MAX: _bindgen_ty_116 = 13;
    pub type _bindgen_ty_116 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_gred_qopt {
        pub limit: __lkl__u32,
        pub qth_min: __lkl__u32,
        pub qth_max: __lkl__u32,
        pub DP: __lkl__u32,
        pub backlog: __lkl__u32,
        pub qave: __lkl__u32,
        pub forced: __lkl__u32,
        pub early: __lkl__u32,
        pub other: __lkl__u32,
        pub pdrop: __lkl__u32,
        pub Wlog: __lkl__u8,
        pub Plog: __lkl__u8,
        pub Scell_log: __lkl__u8,
        pub prio: __lkl__u8,
        pub packets: __lkl__u32,
        pub bytesin: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_gred_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_gred_qopt>(),
            52usize,
            concat!("Size of: ", stringify!(lkl_tc_gred_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_gred_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_gred_qopt))
        );
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
        fn test_field_qth_min() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qth_min) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(qth_min)
                )
            );
        }
        test_field_qth_min();
        fn test_field_qth_max() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qth_max) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(qth_max)
                )
            );
        }
        test_field_qth_max();
        fn test_field_DP() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).DP) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(DP)
                )
            );
        }
        test_field_DP();
        fn test_field_backlog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).backlog) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(backlog)
                )
            );
        }
        test_field_backlog();
        fn test_field_qave() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qave) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(qave)
                )
            );
        }
        test_field_qave();
        fn test_field_forced() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).forced) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(forced)
                )
            );
        }
        test_field_forced();
        fn test_field_early() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).early) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(early)
                )
            );
        }
        test_field_early();
        fn test_field_other() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).other) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(other)
                )
            );
        }
        test_field_other();
        fn test_field_pdrop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pdrop) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(pdrop)
                )
            );
        }
        test_field_pdrop();
        fn test_field_Wlog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Wlog) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(Wlog)
                )
            );
        }
        test_field_Wlog();
        fn test_field_Plog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Plog) as usize - ptr as usize
                },
                41usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(Plog)
                )
            );
        }
        test_field_Plog();
        fn test_field_Scell_log() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Scell_log) as usize - ptr as usize
                },
                42usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(Scell_log)
                )
            );
        }
        test_field_Scell_log();
        fn test_field_prio() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prio) as usize - ptr as usize
                },
                43usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(prio)
                )
            );
        }
        test_field_prio();
        fn test_field_packets() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).packets) as usize - ptr as usize
                },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(packets)
                )
            );
        }
        test_field_packets();
        fn test_field_bytesin() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bytesin) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_qopt),
                    "::",
                    stringify!(bytesin)
                )
            );
        }
        test_field_bytesin();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_gred_sopt {
        pub DPs: __lkl__u32,
        pub def_DP: __lkl__u32,
        pub grio: __lkl__u8,
        pub flags: __lkl__u8,
        pub pad1: __lkl__u16,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_gred_sopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_gred_sopt>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_tc_gred_sopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_gred_sopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_gred_sopt))
        );
        fn test_field_DPs() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_sopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).DPs) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_sopt),
                    "::",
                    stringify!(DPs)
                )
            );
        }
        test_field_DPs();
        fn test_field_def_DP() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_sopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).def_DP) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_sopt),
                    "::",
                    stringify!(def_DP)
                )
            );
        }
        test_field_def_DP();
        fn test_field_grio() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_sopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).grio) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_sopt),
                    "::",
                    stringify!(grio)
                )
            );
        }
        test_field_grio();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_sopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                9usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_sopt),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_pad1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_gred_sopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
                },
                10usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_gred_sopt),
                    "::",
                    stringify!(pad1)
                )
            );
        }
        test_field_pad1();
    }
    pub const LKL_TCA_CHOKE_UNSPEC: _bindgen_ty_117 = 0;
    pub const LKL_TCA_CHOKE_PARMS: _bindgen_ty_117 = 1;
    pub const LKL_TCA_CHOKE_STAB: _bindgen_ty_117 = 2;
    pub const LKL_TCA_CHOKE_MAX_P: _bindgen_ty_117 = 3;
    pub const __LKL__TCA_CHOKE_MAX: _bindgen_ty_117 = 4;
    pub type _bindgen_ty_117 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_choke_qopt {
        pub limit: __lkl__u32,
        pub qth_min: __lkl__u32,
        pub qth_max: __lkl__u32,
        pub Wlog: ::std::os::raw::c_uchar,
        pub Plog: ::std::os::raw::c_uchar,
        pub Scell_log: ::std::os::raw::c_uchar,
        pub flags: ::std::os::raw::c_uchar,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_choke_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_choke_qopt>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_tc_choke_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_choke_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_choke_qopt))
        );
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_qopt),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
        fn test_field_qth_min() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qth_min) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_qopt),
                    "::",
                    stringify!(qth_min)
                )
            );
        }
        test_field_qth_min();
        fn test_field_qth_max() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qth_max) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_qopt),
                    "::",
                    stringify!(qth_max)
                )
            );
        }
        test_field_qth_max();
        fn test_field_Wlog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Wlog) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_qopt),
                    "::",
                    stringify!(Wlog)
                )
            );
        }
        test_field_Wlog();
        fn test_field_Plog() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Plog) as usize - ptr as usize
                },
                13usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_qopt),
                    "::",
                    stringify!(Plog)
                )
            );
        }
        test_field_Plog();
        fn test_field_Scell_log() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).Scell_log) as usize - ptr as usize
                },
                14usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_qopt),
                    "::",
                    stringify!(Scell_log)
                )
            );
        }
        test_field_Scell_log();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                15usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_qopt),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_choke_xstats {
        pub early: __lkl__u32,
        pub pdrop: __lkl__u32,
        pub other: __lkl__u32,
        pub marked: __lkl__u32,
        pub matched: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_choke_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_choke_xstats>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_tc_choke_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_choke_xstats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_choke_xstats))
        );
        fn test_field_early() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).early) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_xstats),
                    "::",
                    stringify!(early)
                )
            );
        }
        test_field_early();
        fn test_field_pdrop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pdrop) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_xstats),
                    "::",
                    stringify!(pdrop)
                )
            );
        }
        test_field_pdrop();
        fn test_field_other() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).other) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_xstats),
                    "::",
                    stringify!(other)
                )
            );
        }
        test_field_other();
        fn test_field_marked() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).marked) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_xstats),
                    "::",
                    stringify!(marked)
                )
            );
        }
        test_field_marked();
        fn test_field_matched() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_choke_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).matched) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_choke_xstats),
                    "::",
                    stringify!(matched)
                )
            );
        }
        test_field_matched();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_htb_opt {
        pub rate: lkl_tc_ratespec,
        pub ceil: lkl_tc_ratespec,
        pub buffer: __lkl__u32,
        pub cbuffer: __lkl__u32,
        pub quantum: __lkl__u32,
        pub level: __lkl__u32,
        pub prio: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_htb_opt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_htb_opt>(),
            44usize,
            concat!("Size of: ", stringify!(lkl_tc_htb_opt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_htb_opt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_htb_opt))
        );
        fn test_field_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_opt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_opt),
                    "::",
                    stringify!(rate)
                )
            );
        }
        test_field_rate();
        fn test_field_ceil() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_opt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ceil) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_opt),
                    "::",
                    stringify!(ceil)
                )
            );
        }
        test_field_ceil();
        fn test_field_buffer() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_opt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_opt),
                    "::",
                    stringify!(buffer)
                )
            );
        }
        test_field_buffer();
        fn test_field_cbuffer() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_opt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cbuffer) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_opt),
                    "::",
                    stringify!(cbuffer)
                )
            );
        }
        test_field_cbuffer();
        fn test_field_quantum() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_opt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).quantum) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_opt),
                    "::",
                    stringify!(quantum)
                )
            );
        }
        test_field_quantum();
        fn test_field_level() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_opt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_opt),
                    "::",
                    stringify!(level)
                )
            );
        }
        test_field_level();
        fn test_field_prio() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_opt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prio) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_opt),
                    "::",
                    stringify!(prio)
                )
            );
        }
        test_field_prio();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_htb_glob {
        pub version: __lkl__u32,
        pub rate2quantum: __lkl__u32,
        pub defcls: __lkl__u32,
        pub debug: __lkl__u32,
        pub direct_pkts: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_htb_glob() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_htb_glob>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_tc_htb_glob))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_htb_glob>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_htb_glob))
        );
        fn test_field_version() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_glob>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_glob),
                    "::",
                    stringify!(version)
                )
            );
        }
        test_field_version();
        fn test_field_rate2quantum() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_glob>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rate2quantum) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_glob),
                    "::",
                    stringify!(rate2quantum)
                )
            );
        }
        test_field_rate2quantum();
        fn test_field_defcls() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_glob>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).defcls) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_glob),
                    "::",
                    stringify!(defcls)
                )
            );
        }
        test_field_defcls();
        fn test_field_debug() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_glob>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).debug) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_glob),
                    "::",
                    stringify!(debug)
                )
            );
        }
        test_field_debug();
        fn test_field_direct_pkts() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_glob>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).direct_pkts) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_glob),
                    "::",
                    stringify!(direct_pkts)
                )
            );
        }
        test_field_direct_pkts();
    }
    pub const LKL_TCA_HTB_UNSPEC: _bindgen_ty_118 = 0;
    pub const LKL_TCA_HTB_PARMS: _bindgen_ty_118 = 1;
    pub const LKL_TCA_HTB_INIT: _bindgen_ty_118 = 2;
    pub const LKL_TCA_HTB_CTAB: _bindgen_ty_118 = 3;
    pub const LKL_TCA_HTB_RTAB: _bindgen_ty_118 = 4;
    pub const LKL_TCA_HTB_DIRECT_QLEN: _bindgen_ty_118 = 5;
    pub const LKL_TCA_HTB_RATE64: _bindgen_ty_118 = 6;
    pub const LKL_TCA_HTB_CEIL64: _bindgen_ty_118 = 7;
    pub const LKL_TCA_HTB_PAD: _bindgen_ty_118 = 8;
    pub const __LKL__TCA_HTB_MAX: _bindgen_ty_118 = 9;
    pub type _bindgen_ty_118 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_htb_xstats {
        pub lends: __lkl__u32,
        pub borrows: __lkl__u32,
        pub giants: __lkl__u32,
        pub tokens: __lkl__s32,
        pub ctokens: __lkl__s32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_htb_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_htb_xstats>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_tc_htb_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_htb_xstats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_htb_xstats))
        );
        fn test_field_lends() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lends) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_xstats),
                    "::",
                    stringify!(lends)
                )
            );
        }
        test_field_lends();
        fn test_field_borrows() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).borrows) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_xstats),
                    "::",
                    stringify!(borrows)
                )
            );
        }
        test_field_borrows();
        fn test_field_giants() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).giants) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_xstats),
                    "::",
                    stringify!(giants)
                )
            );
        }
        test_field_giants();
        fn test_field_tokens() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tokens) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_xstats),
                    "::",
                    stringify!(tokens)
                )
            );
        }
        test_field_tokens();
        fn test_field_ctokens() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_htb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ctokens) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_htb_xstats),
                    "::",
                    stringify!(ctokens)
                )
            );
        }
        test_field_ctokens();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_hfsc_qopt {
        pub defcls: __lkl__u16,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_hfsc_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_hfsc_qopt>(),
            2usize,
            concat!("Size of: ", stringify!(lkl_tc_hfsc_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_hfsc_qopt>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_tc_hfsc_qopt))
        );
        fn test_field_defcls() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_hfsc_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).defcls) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_hfsc_qopt),
                    "::",
                    stringify!(defcls)
                )
            );
        }
        test_field_defcls();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_service_curve {
        pub m1: __lkl__u32,
        pub d: __lkl__u32,
        pub m2: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_service_curve() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_service_curve>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_tc_service_curve))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_service_curve>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_service_curve))
        );
        fn test_field_m1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_service_curve>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).m1) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_service_curve),
                    "::",
                    stringify!(m1)
                )
            );
        }
        test_field_m1();
        fn test_field_d() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_service_curve>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_service_curve),
                    "::",
                    stringify!(d)
                )
            );
        }
        test_field_d();
        fn test_field_m2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_service_curve>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).m2) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_service_curve),
                    "::",
                    stringify!(m2)
                )
            );
        }
        test_field_m2();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_hfsc_stats {
        pub work: __lkl__u64,
        pub rtwork: __lkl__u64,
        pub period: __lkl__u32,
        pub level: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_hfsc_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_hfsc_stats>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_tc_hfsc_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_hfsc_stats>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_tc_hfsc_stats))
        );
        fn test_field_work() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_hfsc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).work) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_hfsc_stats),
                    "::",
                    stringify!(work)
                )
            );
        }
        test_field_work();
        fn test_field_rtwork() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_hfsc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rtwork) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_hfsc_stats),
                    "::",
                    stringify!(rtwork)
                )
            );
        }
        test_field_rtwork();
        fn test_field_period() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_hfsc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_hfsc_stats),
                    "::",
                    stringify!(period)
                )
            );
        }
        test_field_period();
        fn test_field_level() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_hfsc_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_hfsc_stats),
                    "::",
                    stringify!(level)
                )
            );
        }
        test_field_level();
    }
    pub const LKL_TCA_HFSC_UNSPEC: _bindgen_ty_119 = 0;
    pub const LKL_TCA_HFSC_RSC: _bindgen_ty_119 = 1;
    pub const LKL_TCA_HFSC_FSC: _bindgen_ty_119 = 2;
    pub const LKL_TCA_HFSC_USC: _bindgen_ty_119 = 3;
    pub const __LKL__TCA_HFSC_MAX: _bindgen_ty_119 = 4;
    pub type _bindgen_ty_119 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_cbq_lssopt {
        pub change: ::std::os::raw::c_uchar,
        pub flags: ::std::os::raw::c_uchar,
        pub ewma_log: ::std::os::raw::c_uchar,
        pub level: ::std::os::raw::c_uchar,
        pub maxidle: __lkl__u32,
        pub minidle: __lkl__u32,
        pub offtime: __lkl__u32,
        pub avpkt: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_cbq_lssopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_cbq_lssopt>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_tc_cbq_lssopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_cbq_lssopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_cbq_lssopt))
        );
        fn test_field_change() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_lssopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).change) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_lssopt),
                    "::",
                    stringify!(change)
                )
            );
        }
        test_field_change();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_lssopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_lssopt),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_ewma_log() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_lssopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ewma_log) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_lssopt),
                    "::",
                    stringify!(ewma_log)
                )
            );
        }
        test_field_ewma_log();
        fn test_field_level() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_lssopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_lssopt),
                    "::",
                    stringify!(level)
                )
            );
        }
        test_field_level();
        fn test_field_maxidle() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_lssopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).maxidle) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_lssopt),
                    "::",
                    stringify!(maxidle)
                )
            );
        }
        test_field_maxidle();
        fn test_field_minidle() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_lssopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).minidle) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_lssopt),
                    "::",
                    stringify!(minidle)
                )
            );
        }
        test_field_minidle();
        fn test_field_offtime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_lssopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offtime) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_lssopt),
                    "::",
                    stringify!(offtime)
                )
            );
        }
        test_field_offtime();
        fn test_field_avpkt() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_lssopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).avpkt) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_lssopt),
                    "::",
                    stringify!(avpkt)
                )
            );
        }
        test_field_avpkt();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_cbq_wrropt {
        pub flags: ::std::os::raw::c_uchar,
        pub priority: ::std::os::raw::c_uchar,
        pub cpriority: ::std::os::raw::c_uchar,
        pub __reserved: ::std::os::raw::c_uchar,
        pub allot: __lkl__u32,
        pub weight: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_cbq_wrropt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_cbq_wrropt>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_tc_cbq_wrropt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_cbq_wrropt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_cbq_wrropt))
        );
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_wrropt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_wrropt),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_priority() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_wrropt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_wrropt),
                    "::",
                    stringify!(priority)
                )
            );
        }
        test_field_priority();
        fn test_field_cpriority() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_wrropt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cpriority) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_wrropt),
                    "::",
                    stringify!(cpriority)
                )
            );
        }
        test_field_cpriority();
        fn test_field___reserved() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_wrropt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_wrropt),
                    "::",
                    stringify!(__reserved)
                )
            );
        }
        test_field___reserved();
        fn test_field_allot() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_wrropt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).allot) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_wrropt),
                    "::",
                    stringify!(allot)
                )
            );
        }
        test_field_allot();
        fn test_field_weight() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_wrropt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_wrropt),
                    "::",
                    stringify!(weight)
                )
            );
        }
        test_field_weight();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_cbq_ovl {
        pub strategy: ::std::os::raw::c_uchar,
        pub priority2: ::std::os::raw::c_uchar,
        pub pad: __lkl__u16,
        pub penalty: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_cbq_ovl() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_cbq_ovl>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_tc_cbq_ovl))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_cbq_ovl>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_cbq_ovl))
        );
        fn test_field_strategy() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_ovl>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).strategy) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_ovl),
                    "::",
                    stringify!(strategy)
                )
            );
        }
        test_field_strategy();
        fn test_field_priority2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_ovl>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).priority2) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_ovl),
                    "::",
                    stringify!(priority2)
                )
            );
        }
        test_field_priority2();
        fn test_field_pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_ovl>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_ovl),
                    "::",
                    stringify!(pad)
                )
            );
        }
        test_field_pad();
        fn test_field_penalty() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_ovl>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).penalty) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_ovl),
                    "::",
                    stringify!(penalty)
                )
            );
        }
        test_field_penalty();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_cbq_police {
        pub police: ::std::os::raw::c_uchar,
        pub __res1: ::std::os::raw::c_uchar,
        pub __res2: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_cbq_police() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_cbq_police>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_tc_cbq_police))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_cbq_police>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_tc_cbq_police))
        );
        fn test_field_police() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_police>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).police) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_police),
                    "::",
                    stringify!(police)
                )
            );
        }
        test_field_police();
        fn test_field___res1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_police>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__res1) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_police),
                    "::",
                    stringify!(__res1)
                )
            );
        }
        test_field___res1();
        fn test_field___res2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_police>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__res2) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_police),
                    "::",
                    stringify!(__res2)
                )
            );
        }
        test_field___res2();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_cbq_fopt {
        pub split: __lkl__u32,
        pub defmap: __lkl__u32,
        pub defchange: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_cbq_fopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_cbq_fopt>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_tc_cbq_fopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_cbq_fopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_cbq_fopt))
        );
        fn test_field_split() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_fopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).split) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_fopt),
                    "::",
                    stringify!(split)
                )
            );
        }
        test_field_split();
        fn test_field_defmap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_fopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).defmap) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_fopt),
                    "::",
                    stringify!(defmap)
                )
            );
        }
        test_field_defmap();
        fn test_field_defchange() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_fopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).defchange) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_fopt),
                    "::",
                    stringify!(defchange)
                )
            );
        }
        test_field_defchange();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_cbq_xstats {
        pub borrows: __lkl__u32,
        pub overactions: __lkl__u32,
        pub avgidle: __lkl__s32,
        pub undertime: __lkl__s32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_cbq_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_cbq_xstats>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_tc_cbq_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_cbq_xstats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_cbq_xstats))
        );
        fn test_field_borrows() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).borrows) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_xstats),
                    "::",
                    stringify!(borrows)
                )
            );
        }
        test_field_borrows();
        fn test_field_overactions() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).overactions) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_xstats),
                    "::",
                    stringify!(overactions)
                )
            );
        }
        test_field_overactions();
        fn test_field_avgidle() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).avgidle) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_xstats),
                    "::",
                    stringify!(avgidle)
                )
            );
        }
        test_field_avgidle();
        fn test_field_undertime() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbq_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).undertime) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbq_xstats),
                    "::",
                    stringify!(undertime)
                )
            );
        }
        test_field_undertime();
    }
    pub const LKL_TCA_CBQ_UNSPEC: _bindgen_ty_120 = 0;
    pub const LKL_TCA_CBQ_LSSOPT: _bindgen_ty_120 = 1;
    pub const LKL_TCA_CBQ_WRROPT: _bindgen_ty_120 = 2;
    pub const LKL_TCA_CBQ_FOPT: _bindgen_ty_120 = 3;
    pub const LKL_TCA_CBQ_OVL_STRATEGY: _bindgen_ty_120 = 4;
    pub const LKL_TCA_CBQ_RATE: _bindgen_ty_120 = 5;
    pub const LKL_TCA_CBQ_RTAB: _bindgen_ty_120 = 6;
    pub const LKL_TCA_CBQ_POLICE: _bindgen_ty_120 = 7;
    pub const __LKL__TCA_CBQ_MAX: _bindgen_ty_120 = 8;
    pub type _bindgen_ty_120 = ::std::os::raw::c_uint;
    pub const LKL_TCA_DSMARK_UNSPEC: _bindgen_ty_121 = 0;
    pub const LKL_TCA_DSMARK_INDICES: _bindgen_ty_121 = 1;
    pub const LKL_TCA_DSMARK_DEFAULT_INDEX: _bindgen_ty_121 = 2;
    pub const LKL_TCA_DSMARK_SET_TC_INDEX: _bindgen_ty_121 = 3;
    pub const LKL_TCA_DSMARK_MASK: _bindgen_ty_121 = 4;
    pub const LKL_TCA_DSMARK_VALUE: _bindgen_ty_121 = 5;
    pub const __LKL__TCA_DSMARK_MAX: _bindgen_ty_121 = 6;
    pub type _bindgen_ty_121 = ::std::os::raw::c_uint;
    pub const LKL_TCA_ATM_UNSPEC: _bindgen_ty_122 = 0;
    pub const LKL_TCA_ATM_FD: _bindgen_ty_122 = 1;
    pub const LKL_TCA_ATM_PTR: _bindgen_ty_122 = 2;
    pub const LKL_TCA_ATM_HDR: _bindgen_ty_122 = 3;
    pub const LKL_TCA_ATM_EXCESS: _bindgen_ty_122 = 4;
    pub const LKL_TCA_ATM_ADDR: _bindgen_ty_122 = 5;
    pub const LKL_TCA_ATM_STATE: _bindgen_ty_122 = 6;
    pub const __LKL__TCA_ATM_MAX: _bindgen_ty_122 = 7;
    pub type _bindgen_ty_122 = ::std::os::raw::c_uint;
    pub const LKL_TCA_NETEM_UNSPEC: _bindgen_ty_123 = 0;
    pub const LKL_TCA_NETEM_CORR: _bindgen_ty_123 = 1;
    pub const LKL_TCA_NETEM_DELAY_DIST: _bindgen_ty_123 = 2;
    pub const LKL_TCA_NETEM_REORDER: _bindgen_ty_123 = 3;
    pub const LKL_TCA_NETEM_CORRUPT: _bindgen_ty_123 = 4;
    pub const LKL_TCA_NETEM_LOSS: _bindgen_ty_123 = 5;
    pub const LKL_TCA_NETEM_RATE: _bindgen_ty_123 = 6;
    pub const LKL_TCA_NETEM_ECN: _bindgen_ty_123 = 7;
    pub const LKL_TCA_NETEM_RATE64: _bindgen_ty_123 = 8;
    pub const LKL_TCA_NETEM_PAD: _bindgen_ty_123 = 9;
    pub const LKL_TCA_NETEM_LATENCY64: _bindgen_ty_123 = 10;
    pub const LKL_TCA_NETEM_JITTER64: _bindgen_ty_123 = 11;
    pub const LKL_TCA_NETEM_SLOT: _bindgen_ty_123 = 12;
    pub const LKL_TCA_NETEM_SLOT_DIST: _bindgen_ty_123 = 13;
    pub const __LKL__TCA_NETEM_MAX: _bindgen_ty_123 = 14;
    pub type _bindgen_ty_123 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_netem_qopt {
        pub latency: __lkl__u32,
        pub limit: __lkl__u32,
        pub loss: __lkl__u32,
        pub gap: __lkl__u32,
        pub duplicate: __lkl__u32,
        pub jitter: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_netem_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_netem_qopt>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_tc_netem_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_netem_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_netem_qopt))
        );
        fn test_field_latency() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).latency) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_qopt),
                    "::",
                    stringify!(latency)
                )
            );
        }
        test_field_latency();
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_qopt),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
        fn test_field_loss() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).loss) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_qopt),
                    "::",
                    stringify!(loss)
                )
            );
        }
        test_field_loss();
        fn test_field_gap() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gap) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_qopt),
                    "::",
                    stringify!(gap)
                )
            );
        }
        test_field_gap();
        fn test_field_duplicate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).duplicate) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_qopt),
                    "::",
                    stringify!(duplicate)
                )
            );
        }
        test_field_duplicate();
        fn test_field_jitter() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).jitter) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_qopt),
                    "::",
                    stringify!(jitter)
                )
            );
        }
        test_field_jitter();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_netem_corr {
        pub delay_corr: __lkl__u32,
        pub loss_corr: __lkl__u32,
        pub dup_corr: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_netem_corr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_netem_corr>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_tc_netem_corr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_netem_corr>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_netem_corr))
        );
        fn test_field_delay_corr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_corr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).delay_corr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_corr),
                    "::",
                    stringify!(delay_corr)
                )
            );
        }
        test_field_delay_corr();
        fn test_field_loss_corr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_corr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).loss_corr) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_corr),
                    "::",
                    stringify!(loss_corr)
                )
            );
        }
        test_field_loss_corr();
        fn test_field_dup_corr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_corr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dup_corr) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_corr),
                    "::",
                    stringify!(dup_corr)
                )
            );
        }
        test_field_dup_corr();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_netem_reorder {
        pub probability: __lkl__u32,
        pub correlation: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_netem_reorder() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_netem_reorder>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_tc_netem_reorder))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_netem_reorder>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_netem_reorder))
        );
        fn test_field_probability() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_reorder>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).probability) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_reorder),
                    "::",
                    stringify!(probability)
                )
            );
        }
        test_field_probability();
        fn test_field_correlation() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_reorder>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).correlation) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_reorder),
                    "::",
                    stringify!(correlation)
                )
            );
        }
        test_field_correlation();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_netem_corrupt {
        pub probability: __lkl__u32,
        pub correlation: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_netem_corrupt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_netem_corrupt>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_tc_netem_corrupt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_netem_corrupt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_netem_corrupt))
        );
        fn test_field_probability() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_corrupt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).probability) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_corrupt),
                    "::",
                    stringify!(probability)
                )
            );
        }
        test_field_probability();
        fn test_field_correlation() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_corrupt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).correlation) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_corrupt),
                    "::",
                    stringify!(correlation)
                )
            );
        }
        test_field_correlation();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_netem_rate {
        pub rate: __lkl__u32,
        pub packet_overhead: __lkl__s32,
        pub cell_size: __lkl__u32,
        pub cell_overhead: __lkl__s32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_netem_rate() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_netem_rate>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_tc_netem_rate))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_netem_rate>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_netem_rate))
        );
        fn test_field_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_rate>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_rate),
                    "::",
                    stringify!(rate)
                )
            );
        }
        test_field_rate();
        fn test_field_packet_overhead() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_rate>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).packet_overhead) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_rate),
                    "::",
                    stringify!(packet_overhead)
                )
            );
        }
        test_field_packet_overhead();
        fn test_field_cell_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_rate>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cell_size) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_rate),
                    "::",
                    stringify!(cell_size)
                )
            );
        }
        test_field_cell_size();
        fn test_field_cell_overhead() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_rate>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cell_overhead) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_rate),
                    "::",
                    stringify!(cell_overhead)
                )
            );
        }
        test_field_cell_overhead();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_netem_slot {
        pub min_delay: __lkl__s64,
        pub max_delay: __lkl__s64,
        pub max_packets: __lkl__s32,
        pub max_bytes: __lkl__s32,
        pub dist_delay: __lkl__s64,
        pub dist_jitter: __lkl__s64,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_netem_slot() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_netem_slot>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_tc_netem_slot))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_netem_slot>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_tc_netem_slot))
        );
        fn test_field_min_delay() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_slot>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).min_delay) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_slot),
                    "::",
                    stringify!(min_delay)
                )
            );
        }
        test_field_min_delay();
        fn test_field_max_delay() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_slot>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_delay) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_slot),
                    "::",
                    stringify!(max_delay)
                )
            );
        }
        test_field_max_delay();
        fn test_field_max_packets() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_slot>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_packets) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_slot),
                    "::",
                    stringify!(max_packets)
                )
            );
        }
        test_field_max_packets();
        fn test_field_max_bytes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_slot>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max_bytes) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_slot),
                    "::",
                    stringify!(max_bytes)
                )
            );
        }
        test_field_max_bytes();
        fn test_field_dist_delay() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_slot>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dist_delay) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_slot),
                    "::",
                    stringify!(dist_delay)
                )
            );
        }
        test_field_dist_delay();
        fn test_field_dist_jitter() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_slot>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dist_jitter) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_slot),
                    "::",
                    stringify!(dist_jitter)
                )
            );
        }
        test_field_dist_jitter();
    }
    pub const LKL_NETEM_LOSS_UNSPEC: _bindgen_ty_124 = 0;
    pub const LKL_NETEM_LOSS_GI: _bindgen_ty_124 = 1;
    pub const LKL_NETEM_LOSS_GE: _bindgen_ty_124 = 2;
    pub const __LKL__NETEM_LOSS_MAX: _bindgen_ty_124 = 3;
    pub type _bindgen_ty_124 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_netem_gimodel {
        pub p13: __lkl__u32,
        pub p31: __lkl__u32,
        pub p32: __lkl__u32,
        pub p14: __lkl__u32,
        pub p23: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_netem_gimodel() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_netem_gimodel>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_tc_netem_gimodel))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_netem_gimodel>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_netem_gimodel))
        );
        fn test_field_p13() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_gimodel>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).p13) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_gimodel),
                    "::",
                    stringify!(p13)
                )
            );
        }
        test_field_p13();
        fn test_field_p31() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_gimodel>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).p31) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_gimodel),
                    "::",
                    stringify!(p31)
                )
            );
        }
        test_field_p31();
        fn test_field_p32() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_gimodel>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).p32) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_gimodel),
                    "::",
                    stringify!(p32)
                )
            );
        }
        test_field_p32();
        fn test_field_p14() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_gimodel>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).p14) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_gimodel),
                    "::",
                    stringify!(p14)
                )
            );
        }
        test_field_p14();
        fn test_field_p23() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_gimodel>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).p23) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_gimodel),
                    "::",
                    stringify!(p23)
                )
            );
        }
        test_field_p23();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_netem_gemodel {
        pub p: __lkl__u32,
        pub r: __lkl__u32,
        pub h: __lkl__u32,
        pub k1: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_netem_gemodel() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_netem_gemodel>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_tc_netem_gemodel))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_netem_gemodel>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_netem_gemodel))
        );
        fn test_field_p() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_gemodel>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_gemodel),
                    "::",
                    stringify!(p)
                )
            );
        }
        test_field_p();
        fn test_field_r() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_gemodel>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_gemodel),
                    "::",
                    stringify!(r)
                )
            );
        }
        test_field_r();
        fn test_field_h() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_gemodel>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_gemodel),
                    "::",
                    stringify!(h)
                )
            );
        }
        test_field_h();
        fn test_field_k1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_netem_gemodel>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).k1) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_netem_gemodel),
                    "::",
                    stringify!(k1)
                )
            );
        }
        test_field_k1();
    }
    pub const LKL_TCA_DRR_UNSPEC: _bindgen_ty_125 = 0;
    pub const LKL_TCA_DRR_QUANTUM: _bindgen_ty_125 = 1;
    pub const __LKL__TCA_DRR_MAX: _bindgen_ty_125 = 2;
    pub type _bindgen_ty_125 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_drr_stats {
        pub deficit: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_drr_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_drr_stats>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_tc_drr_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_drr_stats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_drr_stats))
        );
        fn test_field_deficit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_drr_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).deficit) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_drr_stats),
                    "::",
                    stringify!(deficit)
                )
            );
        }
        test_field_deficit();
    }
    pub const LKL_TC_MQPRIO_HW_OFFLOAD_NONE: _bindgen_ty_126 = 0;
    pub const LKL_TC_MQPRIO_HW_OFFLOAD_TCS: _bindgen_ty_126 = 1;
    pub const __LKL__TC_MQPRIO_HW_OFFLOAD_MAX: _bindgen_ty_126 = 2;
    pub type _bindgen_ty_126 = ::std::os::raw::c_uint;
    pub const LKL_TC_MQPRIO_MODE_DCB: _bindgen_ty_127 = 0;
    pub const LKL_TC_MQPRIO_MODE_CHANNEL: _bindgen_ty_127 = 1;
    pub const __LKL__TC_MQPRIO_MODE_MAX: _bindgen_ty_127 = 2;
    pub type _bindgen_ty_127 = ::std::os::raw::c_uint;
    pub const LKL_TC_MQPRIO_SHAPER_DCB: _bindgen_ty_128 = 0;
    pub const LKL_TC_MQPRIO_SHAPER_BW_RATE: _bindgen_ty_128 = 1;
    pub const __LKL__TC_MQPRIO_SHAPER_MAX: _bindgen_ty_128 = 2;
    pub type _bindgen_ty_128 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_mqprio_qopt {
        pub num_tc: __lkl__u8,
        pub prio_tc_map: [__lkl__u8; 16usize],
        pub hw: __lkl__u8,
        pub count: [__lkl__u16; 16usize],
        pub offset: [__lkl__u16; 16usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_mqprio_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_mqprio_qopt>(),
            82usize,
            concat!("Size of: ", stringify!(lkl_tc_mqprio_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_mqprio_qopt>(),
            2usize,
            concat!("Alignment of ", stringify!(lkl_tc_mqprio_qopt))
        );
        fn test_field_num_tc() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_mqprio_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).num_tc) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_mqprio_qopt),
                    "::",
                    stringify!(num_tc)
                )
            );
        }
        test_field_num_tc();
        fn test_field_prio_tc_map() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_mqprio_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prio_tc_map) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_mqprio_qopt),
                    "::",
                    stringify!(prio_tc_map)
                )
            );
        }
        test_field_prio_tc_map();
        fn test_field_hw() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_mqprio_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hw) as usize - ptr as usize
                },
                17usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_mqprio_qopt),
                    "::",
                    stringify!(hw)
                )
            );
        }
        test_field_hw();
        fn test_field_count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_mqprio_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
                },
                18usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_mqprio_qopt),
                    "::",
                    stringify!(count)
                )
            );
        }
        test_field_count();
        fn test_field_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_mqprio_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
                },
                50usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_mqprio_qopt),
                    "::",
                    stringify!(offset)
                )
            );
        }
        test_field_offset();
    }
    pub const LKL_TCA_MQPRIO_UNSPEC: _bindgen_ty_129 = 0;
    pub const LKL_TCA_MQPRIO_MODE: _bindgen_ty_129 = 1;
    pub const LKL_TCA_MQPRIO_SHAPER: _bindgen_ty_129 = 2;
    pub const LKL_TCA_MQPRIO_MIN_RATE64: _bindgen_ty_129 = 3;
    pub const LKL_TCA_MQPRIO_MAX_RATE64: _bindgen_ty_129 = 4;
    pub const __LKL__TCA_MQPRIO_MAX: _bindgen_ty_129 = 5;
    pub type _bindgen_ty_129 = ::std::os::raw::c_uint;
    pub const LKL_TCA_SFB_UNSPEC: _bindgen_ty_130 = 0;
    pub const LKL_TCA_SFB_PARMS: _bindgen_ty_130 = 1;
    pub const __LKL__TCA_SFB_MAX: _bindgen_ty_130 = 2;
    pub type _bindgen_ty_130 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_sfb_qopt {
        pub rehash_interval: __lkl__u32,
        pub warmup_time: __lkl__u32,
        pub max: __lkl__u32,
        pub bin_size: __lkl__u32,
        pub increment: __lkl__u32,
        pub decrement: __lkl__u32,
        pub limit: __lkl__u32,
        pub penalty_rate: __lkl__u32,
        pub penalty_burst: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_sfb_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_sfb_qopt>(),
            36usize,
            concat!("Size of: ", stringify!(lkl_tc_sfb_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_sfb_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_sfb_qopt))
        );
        fn test_field_rehash_interval() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rehash_interval) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_qopt),
                    "::",
                    stringify!(rehash_interval)
                )
            );
        }
        test_field_rehash_interval();
        fn test_field_warmup_time() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).warmup_time) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_qopt),
                    "::",
                    stringify!(warmup_time)
                )
            );
        }
        test_field_warmup_time();
        fn test_field_max() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_qopt),
                    "::",
                    stringify!(max)
                )
            );
        }
        test_field_max();
        fn test_field_bin_size() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bin_size) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_qopt),
                    "::",
                    stringify!(bin_size)
                )
            );
        }
        test_field_bin_size();
        fn test_field_increment() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).increment) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_qopt),
                    "::",
                    stringify!(increment)
                )
            );
        }
        test_field_increment();
        fn test_field_decrement() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).decrement) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_qopt),
                    "::",
                    stringify!(decrement)
                )
            );
        }
        test_field_decrement();
        fn test_field_limit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_qopt),
                    "::",
                    stringify!(limit)
                )
            );
        }
        test_field_limit();
        fn test_field_penalty_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).penalty_rate) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_qopt),
                    "::",
                    stringify!(penalty_rate)
                )
            );
        }
        test_field_penalty_rate();
        fn test_field_penalty_burst() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).penalty_burst) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_qopt),
                    "::",
                    stringify!(penalty_burst)
                )
            );
        }
        test_field_penalty_burst();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_sfb_xstats {
        pub earlydrop: __lkl__u32,
        pub penaltydrop: __lkl__u32,
        pub bucketdrop: __lkl__u32,
        pub queuedrop: __lkl__u32,
        pub childdrop: __lkl__u32,
        pub marked: __lkl__u32,
        pub maxqlen: __lkl__u32,
        pub maxprob: __lkl__u32,
        pub avgprob: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_sfb_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_sfb_xstats>(),
            36usize,
            concat!("Size of: ", stringify!(lkl_tc_sfb_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_sfb_xstats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_sfb_xstats))
        );
        fn test_field_earlydrop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).earlydrop) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_xstats),
                    "::",
                    stringify!(earlydrop)
                )
            );
        }
        test_field_earlydrop();
        fn test_field_penaltydrop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).penaltydrop) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_xstats),
                    "::",
                    stringify!(penaltydrop)
                )
            );
        }
        test_field_penaltydrop();
        fn test_field_bucketdrop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).bucketdrop) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_xstats),
                    "::",
                    stringify!(bucketdrop)
                )
            );
        }
        test_field_bucketdrop();
        fn test_field_queuedrop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).queuedrop) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_xstats),
                    "::",
                    stringify!(queuedrop)
                )
            );
        }
        test_field_queuedrop();
        fn test_field_childdrop() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).childdrop) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_xstats),
                    "::",
                    stringify!(childdrop)
                )
            );
        }
        test_field_childdrop();
        fn test_field_marked() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).marked) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_xstats),
                    "::",
                    stringify!(marked)
                )
            );
        }
        test_field_marked();
        fn test_field_maxqlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).maxqlen) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_xstats),
                    "::",
                    stringify!(maxqlen)
                )
            );
        }
        test_field_maxqlen();
        fn test_field_maxprob() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).maxprob) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_xstats),
                    "::",
                    stringify!(maxprob)
                )
            );
        }
        test_field_maxprob();
        fn test_field_avgprob() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_sfb_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).avgprob) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_sfb_xstats),
                    "::",
                    stringify!(avgprob)
                )
            );
        }
        test_field_avgprob();
    }
    pub const LKL_TCA_QFQ_UNSPEC: _bindgen_ty_131 = 0;
    pub const LKL_TCA_QFQ_WEIGHT: _bindgen_ty_131 = 1;
    pub const LKL_TCA_QFQ_LMAX: _bindgen_ty_131 = 2;
    pub const __LKL__TCA_QFQ_MAX: _bindgen_ty_131 = 3;
    pub type _bindgen_ty_131 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_qfq_stats {
        pub weight: __lkl__u32,
        pub lmax: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_qfq_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_qfq_stats>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_tc_qfq_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_qfq_stats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_qfq_stats))
        );
        fn test_field_weight() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_qfq_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_qfq_stats),
                    "::",
                    stringify!(weight)
                )
            );
        }
        test_field_weight();
        fn test_field_lmax() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_qfq_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lmax) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_qfq_stats),
                    "::",
                    stringify!(lmax)
                )
            );
        }
        test_field_lmax();
    }
    pub const LKL_TCA_CODEL_UNSPEC: _bindgen_ty_132 = 0;
    pub const LKL_TCA_CODEL_TARGET: _bindgen_ty_132 = 1;
    pub const LKL_TCA_CODEL_LIMIT: _bindgen_ty_132 = 2;
    pub const LKL_TCA_CODEL_INTERVAL: _bindgen_ty_132 = 3;
    pub const LKL_TCA_CODEL_ECN: _bindgen_ty_132 = 4;
    pub const LKL_TCA_CODEL_CE_THRESHOLD: _bindgen_ty_132 = 5;
    pub const __LKL__TCA_CODEL_MAX: _bindgen_ty_132 = 6;
    pub type _bindgen_ty_132 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_codel_xstats {
        pub maxpacket: __lkl__u32,
        pub count: __lkl__u32,
        pub lastcount: __lkl__u32,
        pub ldelay: __lkl__u32,
        pub drop_next: __lkl__s32,
        pub drop_overlimit: __lkl__u32,
        pub ecn_mark: __lkl__u32,
        pub dropping: __lkl__u32,
        pub ce_mark: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_codel_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_codel_xstats>(),
            36usize,
            concat!("Size of: ", stringify!(lkl_tc_codel_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_codel_xstats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_codel_xstats))
        );
        fn test_field_maxpacket() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_codel_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).maxpacket) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_codel_xstats),
                    "::",
                    stringify!(maxpacket)
                )
            );
        }
        test_field_maxpacket();
        fn test_field_count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_codel_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_codel_xstats),
                    "::",
                    stringify!(count)
                )
            );
        }
        test_field_count();
        fn test_field_lastcount() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_codel_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lastcount) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_codel_xstats),
                    "::",
                    stringify!(lastcount)
                )
            );
        }
        test_field_lastcount();
        fn test_field_ldelay() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_codel_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ldelay) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_codel_xstats),
                    "::",
                    stringify!(ldelay)
                )
            );
        }
        test_field_ldelay();
        fn test_field_drop_next() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_codel_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).drop_next) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_codel_xstats),
                    "::",
                    stringify!(drop_next)
                )
            );
        }
        test_field_drop_next();
        fn test_field_drop_overlimit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_codel_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).drop_overlimit) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_codel_xstats),
                    "::",
                    stringify!(drop_overlimit)
                )
            );
        }
        test_field_drop_overlimit();
        fn test_field_ecn_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_codel_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ecn_mark) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_codel_xstats),
                    "::",
                    stringify!(ecn_mark)
                )
            );
        }
        test_field_ecn_mark();
        fn test_field_dropping() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_codel_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dropping) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_codel_xstats),
                    "::",
                    stringify!(dropping)
                )
            );
        }
        test_field_dropping();
        fn test_field_ce_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_codel_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ce_mark) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_codel_xstats),
                    "::",
                    stringify!(ce_mark)
                )
            );
        }
        test_field_ce_mark();
    }
    pub const LKL_TCA_FQ_CODEL_UNSPEC: _bindgen_ty_133 = 0;
    pub const LKL_TCA_FQ_CODEL_TARGET: _bindgen_ty_133 = 1;
    pub const LKL_TCA_FQ_CODEL_LIMIT: _bindgen_ty_133 = 2;
    pub const LKL_TCA_FQ_CODEL_INTERVAL: _bindgen_ty_133 = 3;
    pub const LKL_TCA_FQ_CODEL_ECN: _bindgen_ty_133 = 4;
    pub const LKL_TCA_FQ_CODEL_FLOWS: _bindgen_ty_133 = 5;
    pub const LKL_TCA_FQ_CODEL_QUANTUM: _bindgen_ty_133 = 6;
    pub const LKL_TCA_FQ_CODEL_CE_THRESHOLD: _bindgen_ty_133 = 7;
    pub const LKL_TCA_FQ_CODEL_DROP_BATCH_SIZE: _bindgen_ty_133 = 8;
    pub const LKL_TCA_FQ_CODEL_MEMORY_LIMIT: _bindgen_ty_133 = 9;
    pub const __LKL__TCA_FQ_CODEL_MAX: _bindgen_ty_133 = 10;
    pub type _bindgen_ty_133 = ::std::os::raw::c_uint;
    pub const LKL_TCA_FQ_CODEL_XSTATS_QDISC: _bindgen_ty_134 = 0;
    pub const LKL_TCA_FQ_CODEL_XSTATS_CLASS: _bindgen_ty_134 = 1;
    pub type _bindgen_ty_134 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_fq_codel_qd_stats {
        pub maxpacket: __lkl__u32,
        pub drop_overlimit: __lkl__u32,
        pub ecn_mark: __lkl__u32,
        pub new_flow_count: __lkl__u32,
        pub new_flows_len: __lkl__u32,
        pub old_flows_len: __lkl__u32,
        pub ce_mark: __lkl__u32,
        pub memory_usage: __lkl__u32,
        pub drop_overmemory: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_fq_codel_qd_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_fq_codel_qd_stats>(),
            36usize,
            concat!("Size of: ", stringify!(lkl_tc_fq_codel_qd_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_fq_codel_qd_stats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_fq_codel_qd_stats))
        );
        fn test_field_maxpacket() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).maxpacket) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_qd_stats),
                    "::",
                    stringify!(maxpacket)
                )
            );
        }
        test_field_maxpacket();
        fn test_field_drop_overlimit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).drop_overlimit) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_qd_stats),
                    "::",
                    stringify!(drop_overlimit)
                )
            );
        }
        test_field_drop_overlimit();
        fn test_field_ecn_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ecn_mark) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_qd_stats),
                    "::",
                    stringify!(ecn_mark)
                )
            );
        }
        test_field_ecn_mark();
        fn test_field_new_flow_count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).new_flow_count) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_qd_stats),
                    "::",
                    stringify!(new_flow_count)
                )
            );
        }
        test_field_new_flow_count();
        fn test_field_new_flows_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).new_flows_len) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_qd_stats),
                    "::",
                    stringify!(new_flows_len)
                )
            );
        }
        test_field_new_flows_len();
        fn test_field_old_flows_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).old_flows_len) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_qd_stats),
                    "::",
                    stringify!(old_flows_len)
                )
            );
        }
        test_field_old_flows_len();
        fn test_field_ce_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ce_mark) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_qd_stats),
                    "::",
                    stringify!(ce_mark)
                )
            );
        }
        test_field_ce_mark();
        fn test_field_memory_usage() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).memory_usage) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_qd_stats),
                    "::",
                    stringify!(memory_usage)
                )
            );
        }
        test_field_memory_usage();
        fn test_field_drop_overmemory() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).drop_overmemory) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_qd_stats),
                    "::",
                    stringify!(drop_overmemory)
                )
            );
        }
        test_field_drop_overmemory();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_fq_codel_cl_stats {
        pub deficit: __lkl__s32,
        pub ldelay: __lkl__u32,
        pub count: __lkl__u32,
        pub lastcount: __lkl__u32,
        pub dropping: __lkl__u32,
        pub drop_next: __lkl__s32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_fq_codel_cl_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_fq_codel_cl_stats>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_tc_fq_codel_cl_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_fq_codel_cl_stats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_fq_codel_cl_stats))
        );
        fn test_field_deficit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_cl_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).deficit) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_cl_stats),
                    "::",
                    stringify!(deficit)
                )
            );
        }
        test_field_deficit();
        fn test_field_ldelay() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_cl_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ldelay) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_cl_stats),
                    "::",
                    stringify!(ldelay)
                )
            );
        }
        test_field_ldelay();
        fn test_field_count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_cl_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_cl_stats),
                    "::",
                    stringify!(count)
                )
            );
        }
        test_field_count();
        fn test_field_lastcount() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_cl_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).lastcount) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_cl_stats),
                    "::",
                    stringify!(lastcount)
                )
            );
        }
        test_field_lastcount();
        fn test_field_dropping() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_cl_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dropping) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_cl_stats),
                    "::",
                    stringify!(dropping)
                )
            );
        }
        test_field_dropping();
        fn test_field_drop_next() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_cl_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).drop_next) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_cl_stats),
                    "::",
                    stringify!(drop_next)
                )
            );
        }
        test_field_drop_next();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_tc_fq_codel_xstats {
        pub type_: __lkl__u32,
        pub __bindgen_anon_1: lkl_tc_fq_codel_xstats__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_tc_fq_codel_xstats__bindgen_ty_1 {
        pub qdisc_stats: lkl_tc_fq_codel_qd_stats,
        pub class_stats: lkl_tc_fq_codel_cl_stats,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_fq_codel_xstats__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_fq_codel_xstats__bindgen_ty_1>(),
            36usize,
            concat!(
                "Size of: ",
                stringify!(lkl_tc_fq_codel_xstats__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_fq_codel_xstats__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_tc_fq_codel_xstats__bindgen_ty_1)
            )
        );
        fn test_field_qdisc_stats() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_tc_fq_codel_xstats__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).qdisc_stats) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_xstats__bindgen_ty_1),
                    "::",
                    stringify!(qdisc_stats)
                )
            );
        }
        test_field_qdisc_stats();
        fn test_field_class_stats() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_tc_fq_codel_xstats__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).class_stats) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_xstats__bindgen_ty_1),
                    "::",
                    stringify!(class_stats)
                )
            );
        }
        test_field_class_stats();
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_fq_codel_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_fq_codel_xstats>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_tc_fq_codel_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_fq_codel_xstats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_fq_codel_xstats))
        );
        fn test_field_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_codel_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_codel_xstats),
                    "::",
                    stringify!(type_)
                )
            );
        }
        test_field_type();
    }
    pub const LKL_TCA_FQ_UNSPEC: _bindgen_ty_135 = 0;
    pub const LKL_TCA_FQ_PLIMIT: _bindgen_ty_135 = 1;
    pub const LKL_TCA_FQ_FLOW_PLIMIT: _bindgen_ty_135 = 2;
    pub const LKL_TCA_FQ_QUANTUM: _bindgen_ty_135 = 3;
    pub const LKL_TCA_FQ_INITIAL_QUANTUM: _bindgen_ty_135 = 4;
    pub const LKL_TCA_FQ_RATE_ENABLE: _bindgen_ty_135 = 5;
    pub const LKL_TCA_FQ_FLOW_DEFAULT_RATE: _bindgen_ty_135 = 6;
    pub const LKL_TCA_FQ_FLOW_MAX_RATE: _bindgen_ty_135 = 7;
    pub const LKL_TCA_FQ_BUCKETS_LOG: _bindgen_ty_135 = 8;
    pub const LKL_TCA_FQ_FLOW_REFILL_DELAY: _bindgen_ty_135 = 9;
    pub const LKL_TCA_FQ_ORPHAN_MASK: _bindgen_ty_135 = 10;
    pub const LKL_TCA_FQ_LOW_RATE_THRESHOLD: _bindgen_ty_135 = 11;
    pub const LKL_TCA_FQ_CE_THRESHOLD: _bindgen_ty_135 = 12;
    pub const LKL_TCA_FQ_TIMER_SLACK: _bindgen_ty_135 = 13;
    pub const LKL_TCA_FQ_HORIZON: _bindgen_ty_135 = 14;
    pub const LKL_TCA_FQ_HORIZON_DROP: _bindgen_ty_135 = 15;
    pub const __LKL__TCA_FQ_MAX: _bindgen_ty_135 = 16;
    pub type _bindgen_ty_135 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_fq_qd_stats {
        pub gc_flows: __lkl__u64,
        pub highprio_packets: __lkl__u64,
        pub tcp_retrans: __lkl__u64,
        pub throttled: __lkl__u64,
        pub flows_plimit: __lkl__u64,
        pub pkts_too_long: __lkl__u64,
        pub allocation_errors: __lkl__u64,
        pub time_next_delayed_flow: __lkl__s64,
        pub flows: __lkl__u32,
        pub inactive_flows: __lkl__u32,
        pub throttled_flows: __lkl__u32,
        pub unthrottle_latency_ns: __lkl__u32,
        pub ce_mark: __lkl__u64,
        pub horizon_drops: __lkl__u64,
        pub horizon_caps: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_fq_qd_stats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_fq_qd_stats>(),
            104usize,
            concat!("Size of: ", stringify!(lkl_tc_fq_qd_stats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_fq_qd_stats>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_tc_fq_qd_stats))
        );
        fn test_field_gc_flows() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).gc_flows) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(gc_flows)
                )
            );
        }
        test_field_gc_flows();
        fn test_field_highprio_packets() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).highprio_packets) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(highprio_packets)
                )
            );
        }
        test_field_highprio_packets();
        fn test_field_tcp_retrans() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tcp_retrans) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(tcp_retrans)
                )
            );
        }
        test_field_tcp_retrans();
        fn test_field_throttled() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).throttled) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(throttled)
                )
            );
        }
        test_field_throttled();
        fn test_field_flows_plimit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flows_plimit) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(flows_plimit)
                )
            );
        }
        test_field_flows_plimit();
        fn test_field_pkts_too_long() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).pkts_too_long) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(pkts_too_long)
                )
            );
        }
        test_field_pkts_too_long();
        fn test_field_allocation_errors() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).allocation_errors) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(allocation_errors)
                )
            );
        }
        test_field_allocation_errors();
        fn test_field_time_next_delayed_flow() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).time_next_delayed_flow) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(time_next_delayed_flow)
                )
            );
        }
        test_field_time_next_delayed_flow();
        fn test_field_flows() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flows) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(flows)
                )
            );
        }
        test_field_flows();
        fn test_field_inactive_flows() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).inactive_flows) as usize - ptr as usize
                },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(inactive_flows)
                )
            );
        }
        test_field_inactive_flows();
        fn test_field_throttled_flows() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).throttled_flows) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(throttled_flows)
                )
            );
        }
        test_field_throttled_flows();
        fn test_field_unthrottle_latency_ns() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).unthrottle_latency_ns) as usize - ptr as usize
                },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(unthrottle_latency_ns)
                )
            );
        }
        test_field_unthrottle_latency_ns();
        fn test_field_ce_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ce_mark) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(ce_mark)
                )
            );
        }
        test_field_ce_mark();
        fn test_field_horizon_drops() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).horizon_drops) as usize - ptr as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(horizon_drops)
                )
            );
        }
        test_field_horizon_drops();
        fn test_field_horizon_caps() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_qd_stats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).horizon_caps) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_qd_stats),
                    "::",
                    stringify!(horizon_caps)
                )
            );
        }
        test_field_horizon_caps();
    }
    pub const LKL_TCA_HHF_UNSPEC: _bindgen_ty_136 = 0;
    pub const LKL_TCA_HHF_BACKLOG_LIMIT: _bindgen_ty_136 = 1;
    pub const LKL_TCA_HHF_QUANTUM: _bindgen_ty_136 = 2;
    pub const LKL_TCA_HHF_HH_FLOWS_LIMIT: _bindgen_ty_136 = 3;
    pub const LKL_TCA_HHF_RESET_TIMEOUT: _bindgen_ty_136 = 4;
    pub const LKL_TCA_HHF_ADMIT_BYTES: _bindgen_ty_136 = 5;
    pub const LKL_TCA_HHF_EVICT_TIMEOUT: _bindgen_ty_136 = 6;
    pub const LKL_TCA_HHF_NON_HH_WEIGHT: _bindgen_ty_136 = 7;
    pub const __LKL__TCA_HHF_MAX: _bindgen_ty_136 = 8;
    pub type _bindgen_ty_136 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_hhf_xstats {
        pub drop_overlimit: __lkl__u32,
        pub hh_overlimit: __lkl__u32,
        pub hh_tot_count: __lkl__u32,
        pub hh_cur_count: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_hhf_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_hhf_xstats>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_tc_hhf_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_hhf_xstats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_hhf_xstats))
        );
        fn test_field_drop_overlimit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_hhf_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).drop_overlimit) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_hhf_xstats),
                    "::",
                    stringify!(drop_overlimit)
                )
            );
        }
        test_field_drop_overlimit();
        fn test_field_hh_overlimit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_hhf_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hh_overlimit) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_hhf_xstats),
                    "::",
                    stringify!(hh_overlimit)
                )
            );
        }
        test_field_hh_overlimit();
        fn test_field_hh_tot_count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_hhf_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hh_tot_count) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_hhf_xstats),
                    "::",
                    stringify!(hh_tot_count)
                )
            );
        }
        test_field_hh_tot_count();
        fn test_field_hh_cur_count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_hhf_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hh_cur_count) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_hhf_xstats),
                    "::",
                    stringify!(hh_cur_count)
                )
            );
        }
        test_field_hh_cur_count();
    }
    pub const LKL_TCA_PIE_UNSPEC: _bindgen_ty_137 = 0;
    pub const LKL_TCA_PIE_TARGET: _bindgen_ty_137 = 1;
    pub const LKL_TCA_PIE_LIMIT: _bindgen_ty_137 = 2;
    pub const LKL_TCA_PIE_TUPDATE: _bindgen_ty_137 = 3;
    pub const LKL_TCA_PIE_ALPHA: _bindgen_ty_137 = 4;
    pub const LKL_TCA_PIE_BETA: _bindgen_ty_137 = 5;
    pub const LKL_TCA_PIE_ECN: _bindgen_ty_137 = 6;
    pub const LKL_TCA_PIE_BYTEMODE: _bindgen_ty_137 = 7;
    pub const LKL_TCA_PIE_DQ_RATE_ESTIMATOR: _bindgen_ty_137 = 8;
    pub const __LKL__TCA_PIE_MAX: _bindgen_ty_137 = 9;
    pub type _bindgen_ty_137 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_pie_xstats {
        pub prob: __lkl__u64,
        pub delay: __lkl__u32,
        pub avg_dq_rate: __lkl__u32,
        pub dq_rate_estimating: __lkl__u32,
        pub packets_in: __lkl__u32,
        pub dropped: __lkl__u32,
        pub overlimit: __lkl__u32,
        pub maxq: __lkl__u32,
        pub ecn_mark: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_pie_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_pie_xstats>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_tc_pie_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_pie_xstats>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_tc_pie_xstats))
        );
        fn test_field_prob() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).prob) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_pie_xstats),
                    "::",
                    stringify!(prob)
                )
            );
        }
        test_field_prob();
        fn test_field_delay() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_pie_xstats),
                    "::",
                    stringify!(delay)
                )
            );
        }
        test_field_delay();
        fn test_field_avg_dq_rate() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).avg_dq_rate) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_pie_xstats),
                    "::",
                    stringify!(avg_dq_rate)
                )
            );
        }
        test_field_avg_dq_rate();
        fn test_field_dq_rate_estimating() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dq_rate_estimating) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_pie_xstats),
                    "::",
                    stringify!(dq_rate_estimating)
                )
            );
        }
        test_field_dq_rate_estimating();
        fn test_field_packets_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).packets_in) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_pie_xstats),
                    "::",
                    stringify!(packets_in)
                )
            );
        }
        test_field_packets_in();
        fn test_field_dropped() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dropped) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_pie_xstats),
                    "::",
                    stringify!(dropped)
                )
            );
        }
        test_field_dropped();
        fn test_field_overlimit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).overlimit) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_pie_xstats),
                    "::",
                    stringify!(overlimit)
                )
            );
        }
        test_field_overlimit();
        fn test_field_maxq() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).maxq) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_pie_xstats),
                    "::",
                    stringify!(maxq)
                )
            );
        }
        test_field_maxq();
        fn test_field_ecn_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ecn_mark) as usize - ptr as usize
                },
                36usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_pie_xstats),
                    "::",
                    stringify!(ecn_mark)
                )
            );
        }
        test_field_ecn_mark();
    }
    pub const LKL_TCA_FQ_PIE_UNSPEC: _bindgen_ty_138 = 0;
    pub const LKL_TCA_FQ_PIE_LIMIT: _bindgen_ty_138 = 1;
    pub const LKL_TCA_FQ_PIE_FLOWS: _bindgen_ty_138 = 2;
    pub const LKL_TCA_FQ_PIE_TARGET: _bindgen_ty_138 = 3;
    pub const LKL_TCA_FQ_PIE_TUPDATE: _bindgen_ty_138 = 4;
    pub const LKL_TCA_FQ_PIE_ALPHA: _bindgen_ty_138 = 5;
    pub const LKL_TCA_FQ_PIE_BETA: _bindgen_ty_138 = 6;
    pub const LKL_TCA_FQ_PIE_QUANTUM: _bindgen_ty_138 = 7;
    pub const LKL_TCA_FQ_PIE_MEMORY_LIMIT: _bindgen_ty_138 = 8;
    pub const LKL_TCA_FQ_PIE_ECN_PROB: _bindgen_ty_138 = 9;
    pub const LKL_TCA_FQ_PIE_ECN: _bindgen_ty_138 = 10;
    pub const LKL_TCA_FQ_PIE_BYTEMODE: _bindgen_ty_138 = 11;
    pub const LKL_TCA_FQ_PIE_DQ_RATE_ESTIMATOR: _bindgen_ty_138 = 12;
    pub const __LKL__TCA_FQ_PIE_MAX: _bindgen_ty_138 = 13;
    pub type _bindgen_ty_138 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_fq_pie_xstats {
        pub packets_in: __lkl__u32,
        pub dropped: __lkl__u32,
        pub overlimit: __lkl__u32,
        pub overmemory: __lkl__u32,
        pub ecn_mark: __lkl__u32,
        pub new_flow_count: __lkl__u32,
        pub new_flows_len: __lkl__u32,
        pub old_flows_len: __lkl__u32,
        pub memory_usage: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_fq_pie_xstats() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_fq_pie_xstats>(),
            36usize,
            concat!("Size of: ", stringify!(lkl_tc_fq_pie_xstats))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_fq_pie_xstats>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_fq_pie_xstats))
        );
        fn test_field_packets_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).packets_in) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_pie_xstats),
                    "::",
                    stringify!(packets_in)
                )
            );
        }
        test_field_packets_in();
        fn test_field_dropped() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dropped) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_pie_xstats),
                    "::",
                    stringify!(dropped)
                )
            );
        }
        test_field_dropped();
        fn test_field_overlimit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).overlimit) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_pie_xstats),
                    "::",
                    stringify!(overlimit)
                )
            );
        }
        test_field_overlimit();
        fn test_field_overmemory() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).overmemory) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_pie_xstats),
                    "::",
                    stringify!(overmemory)
                )
            );
        }
        test_field_overmemory();
        fn test_field_ecn_mark() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ecn_mark) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_pie_xstats),
                    "::",
                    stringify!(ecn_mark)
                )
            );
        }
        test_field_ecn_mark();
        fn test_field_new_flow_count() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).new_flow_count) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_pie_xstats),
                    "::",
                    stringify!(new_flow_count)
                )
            );
        }
        test_field_new_flow_count();
        fn test_field_new_flows_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).new_flows_len) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_pie_xstats),
                    "::",
                    stringify!(new_flows_len)
                )
            );
        }
        test_field_new_flows_len();
        fn test_field_old_flows_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).old_flows_len) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_pie_xstats),
                    "::",
                    stringify!(old_flows_len)
                )
            );
        }
        test_field_old_flows_len();
        fn test_field_memory_usage() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_fq_pie_xstats>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).memory_usage) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_fq_pie_xstats),
                    "::",
                    stringify!(memory_usage)
                )
            );
        }
        test_field_memory_usage();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_cbs_qopt {
        pub offload: __lkl__u8,
        pub _pad: [__lkl__u8; 3usize],
        pub hicredit: __lkl__s32,
        pub locredit: __lkl__s32,
        pub idleslope: __lkl__s32,
        pub sendslope: __lkl__s32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_cbs_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_cbs_qopt>(),
            20usize,
            concat!("Size of: ", stringify!(lkl_tc_cbs_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_cbs_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_cbs_qopt))
        );
        fn test_field_offload() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbs_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offload) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbs_qopt),
                    "::",
                    stringify!(offload)
                )
            );
        }
        test_field_offload();
        fn test_field__pad() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbs_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbs_qopt),
                    "::",
                    stringify!(_pad)
                )
            );
        }
        test_field__pad();
        fn test_field_hicredit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbs_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).hicredit) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbs_qopt),
                    "::",
                    stringify!(hicredit)
                )
            );
        }
        test_field_hicredit();
        fn test_field_locredit() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbs_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).locredit) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbs_qopt),
                    "::",
                    stringify!(locredit)
                )
            );
        }
        test_field_locredit();
        fn test_field_idleslope() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbs_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).idleslope) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbs_qopt),
                    "::",
                    stringify!(idleslope)
                )
            );
        }
        test_field_idleslope();
        fn test_field_sendslope() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_cbs_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sendslope) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_cbs_qopt),
                    "::",
                    stringify!(sendslope)
                )
            );
        }
        test_field_sendslope();
    }
    pub const LKL_TCA_CBS_UNSPEC: _bindgen_ty_139 = 0;
    pub const LKL_TCA_CBS_PARMS: _bindgen_ty_139 = 1;
    pub const __LKL__TCA_CBS_MAX: _bindgen_ty_139 = 2;
    pub type _bindgen_ty_139 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_tc_etf_qopt {
        pub delta: __lkl__s32,
        pub clockid: __lkl__s32,
        pub flags: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_tc_etf_qopt() {
        assert_eq!(
            ::std::mem::size_of::<lkl_tc_etf_qopt>(),
            12usize,
            concat!("Size of: ", stringify!(lkl_tc_etf_qopt))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_tc_etf_qopt>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_tc_etf_qopt))
        );
        fn test_field_delta() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_etf_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_etf_qopt),
                    "::",
                    stringify!(delta)
                )
            );
        }
        test_field_delta();
        fn test_field_clockid() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_etf_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).clockid) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_etf_qopt),
                    "::",
                    stringify!(clockid)
                )
            );
        }
        test_field_clockid();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_tc_etf_qopt>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_tc_etf_qopt),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    pub const LKL_TCA_ETF_UNSPEC: _bindgen_ty_140 = 0;
    pub const LKL_TCA_ETF_PARMS: _bindgen_ty_140 = 1;
    pub const __LKL__TCA_ETF_MAX: _bindgen_ty_140 = 2;
    pub type _bindgen_ty_140 = ::std::os::raw::c_uint;
    pub const LKL_TCA_CAKE_UNSPEC: _bindgen_ty_141 = 0;
    pub const LKL_TCA_CAKE_PAD: _bindgen_ty_141 = 1;
    pub const LKL_TCA_CAKE_BASE_RATE64: _bindgen_ty_141 = 2;
    pub const LKL_TCA_CAKE_DIFFSERV_MODE: _bindgen_ty_141 = 3;
    pub const LKL_TCA_CAKE_ATM: _bindgen_ty_141 = 4;
    pub const LKL_TCA_CAKE_FLOW_MODE: _bindgen_ty_141 = 5;
    pub const LKL_TCA_CAKE_OVERHEAD: _bindgen_ty_141 = 6;
    pub const LKL_TCA_CAKE_RTT: _bindgen_ty_141 = 7;
    pub const LKL_TCA_CAKE_TARGET: _bindgen_ty_141 = 8;
    pub const LKL_TCA_CAKE_AUTORATE: _bindgen_ty_141 = 9;
    pub const LKL_TCA_CAKE_MEMORY: _bindgen_ty_141 = 10;
    pub const LKL_TCA_CAKE_NAT: _bindgen_ty_141 = 11;
    pub const LKL_TCA_CAKE_RAW: _bindgen_ty_141 = 12;
    pub const LKL_TCA_CAKE_WASH: _bindgen_ty_141 = 13;
    pub const LKL_TCA_CAKE_MPU: _bindgen_ty_141 = 14;
    pub const LKL_TCA_CAKE_INGRESS: _bindgen_ty_141 = 15;
    pub const LKL_TCA_CAKE_ACK_FILTER: _bindgen_ty_141 = 16;
    pub const LKL_TCA_CAKE_SPLIT_GSO: _bindgen_ty_141 = 17;
    pub const LKL_TCA_CAKE_FWMARK: _bindgen_ty_141 = 18;
    pub const __LKL__TCA_CAKE_MAX: _bindgen_ty_141 = 19;
    pub type _bindgen_ty_141 = ::std::os::raw::c_uint;
    pub const __LKL__TCA_CAKE_STATS_INVALID: _bindgen_ty_142 = 0;
    pub const LKL_TCA_CAKE_STATS_PAD: _bindgen_ty_142 = 1;
    pub const LKL_TCA_CAKE_STATS_CAPACITY_ESTIMATE64: _bindgen_ty_142 = 2;
    pub const LKL_TCA_CAKE_STATS_MEMORY_LIMIT: _bindgen_ty_142 = 3;
    pub const LKL_TCA_CAKE_STATS_MEMORY_USED: _bindgen_ty_142 = 4;
    pub const LKL_TCA_CAKE_STATS_AVG_NETOFF: _bindgen_ty_142 = 5;
    pub const LKL_TCA_CAKE_STATS_MIN_NETLEN: _bindgen_ty_142 = 6;
    pub const LKL_TCA_CAKE_STATS_MAX_NETLEN: _bindgen_ty_142 = 7;
    pub const LKL_TCA_CAKE_STATS_MIN_ADJLEN: _bindgen_ty_142 = 8;
    pub const LKL_TCA_CAKE_STATS_MAX_ADJLEN: _bindgen_ty_142 = 9;
    pub const LKL_TCA_CAKE_STATS_TIN_STATS: _bindgen_ty_142 = 10;
    pub const LKL_TCA_CAKE_STATS_DEFICIT: _bindgen_ty_142 = 11;
    pub const LKL_TCA_CAKE_STATS_COBALT_COUNT: _bindgen_ty_142 = 12;
    pub const LKL_TCA_CAKE_STATS_DROPPING: _bindgen_ty_142 = 13;
    pub const LKL_TCA_CAKE_STATS_DROP_NEXT_US: _bindgen_ty_142 = 14;
    pub const LKL_TCA_CAKE_STATS_P_DROP: _bindgen_ty_142 = 15;
    pub const LKL_TCA_CAKE_STATS_BLUE_TIMER_US: _bindgen_ty_142 = 16;
    pub const __LKL__TCA_CAKE_STATS_MAX: _bindgen_ty_142 = 17;
    pub type _bindgen_ty_142 = ::std::os::raw::c_uint;
    pub const __LKL__TCA_CAKE_TIN_STATS_INVALID: _bindgen_ty_143 = 0;
    pub const LKL_TCA_CAKE_TIN_STATS_PAD: _bindgen_ty_143 = 1;
    pub const LKL_TCA_CAKE_TIN_STATS_SENT_PACKETS: _bindgen_ty_143 = 2;
    pub const LKL_TCA_CAKE_TIN_STATS_SENT_BYTES64: _bindgen_ty_143 = 3;
    pub const LKL_TCA_CAKE_TIN_STATS_DROPPED_PACKETS: _bindgen_ty_143 = 4;
    pub const LKL_TCA_CAKE_TIN_STATS_DROPPED_BYTES64: _bindgen_ty_143 = 5;
    pub const LKL_TCA_CAKE_TIN_STATS_ACKS_DROPPED_PACKETS: _bindgen_ty_143 = 6;
    pub const LKL_TCA_CAKE_TIN_STATS_ACKS_DROPPED_BYTES64: _bindgen_ty_143 = 7;
    pub const LKL_TCA_CAKE_TIN_STATS_ECN_MARKED_PACKETS: _bindgen_ty_143 = 8;
    pub const LKL_TCA_CAKE_TIN_STATS_ECN_MARKED_BYTES64: _bindgen_ty_143 = 9;
    pub const LKL_TCA_CAKE_TIN_STATS_BACKLOG_PACKETS: _bindgen_ty_143 = 10;
    pub const LKL_TCA_CAKE_TIN_STATS_BACKLOG_BYTES: _bindgen_ty_143 = 11;
    pub const LKL_TCA_CAKE_TIN_STATS_THRESHOLD_RATE64: _bindgen_ty_143 = 12;
    pub const LKL_TCA_CAKE_TIN_STATS_TARGET_US: _bindgen_ty_143 = 13;
    pub const LKL_TCA_CAKE_TIN_STATS_INTERVAL_US: _bindgen_ty_143 = 14;
    pub const LKL_TCA_CAKE_TIN_STATS_WAY_INDIRECT_HITS: _bindgen_ty_143 = 15;
    pub const LKL_TCA_CAKE_TIN_STATS_WAY_MISSES: _bindgen_ty_143 = 16;
    pub const LKL_TCA_CAKE_TIN_STATS_WAY_COLLISIONS: _bindgen_ty_143 = 17;
    pub const LKL_TCA_CAKE_TIN_STATS_PEAK_DELAY_US: _bindgen_ty_143 = 18;
    pub const LKL_TCA_CAKE_TIN_STATS_AVG_DELAY_US: _bindgen_ty_143 = 19;
    pub const LKL_TCA_CAKE_TIN_STATS_BASE_DELAY_US: _bindgen_ty_143 = 20;
    pub const LKL_TCA_CAKE_TIN_STATS_SPARSE_FLOWS: _bindgen_ty_143 = 21;
    pub const LKL_TCA_CAKE_TIN_STATS_BULK_FLOWS: _bindgen_ty_143 = 22;
    pub const LKL_TCA_CAKE_TIN_STATS_UNRESPONSIVE_FLOWS: _bindgen_ty_143 = 23;
    pub const LKL_TCA_CAKE_TIN_STATS_MAX_SKBLEN: _bindgen_ty_143 = 24;
    pub const LKL_TCA_CAKE_TIN_STATS_FLOW_QUANTUM: _bindgen_ty_143 = 25;
    pub const __LKL__TCA_CAKE_TIN_STATS_MAX: _bindgen_ty_143 = 26;
    pub type _bindgen_ty_143 = ::std::os::raw::c_uint;
    pub const LKL_CAKE_FLOW_NONE: _bindgen_ty_144 = 0;
    pub const LKL_CAKE_FLOW_SRC_IP: _bindgen_ty_144 = 1;
    pub const LKL_CAKE_FLOW_DST_IP: _bindgen_ty_144 = 2;
    pub const LKL_CAKE_FLOW_HOSTS: _bindgen_ty_144 = 3;
    pub const LKL_CAKE_FLOW_FLOWS: _bindgen_ty_144 = 4;
    pub const LKL_CAKE_FLOW_DUAL_SRC: _bindgen_ty_144 = 5;
    pub const LKL_CAKE_FLOW_DUAL_DST: _bindgen_ty_144 = 6;
    pub const LKL_CAKE_FLOW_TRIPLE: _bindgen_ty_144 = 7;
    pub const LKL_CAKE_FLOW_MAX: _bindgen_ty_144 = 8;
    pub type _bindgen_ty_144 = ::std::os::raw::c_uint;
    pub const LKL_CAKE_DIFFSERV_DIFFSERV3: _bindgen_ty_145 = 0;
    pub const LKL_CAKE_DIFFSERV_DIFFSERV4: _bindgen_ty_145 = 1;
    pub const LKL_CAKE_DIFFSERV_DIFFSERV8: _bindgen_ty_145 = 2;
    pub const LKL_CAKE_DIFFSERV_BESTEFFORT: _bindgen_ty_145 = 3;
    pub const LKL_CAKE_DIFFSERV_PRECEDENCE: _bindgen_ty_145 = 4;
    pub const LKL_CAKE_DIFFSERV_MAX: _bindgen_ty_145 = 5;
    pub type _bindgen_ty_145 = ::std::os::raw::c_uint;
    pub const LKL_CAKE_ACK_NONE: _bindgen_ty_146 = 0;
    pub const LKL_CAKE_ACK_FILTER: _bindgen_ty_146 = 1;
    pub const LKL_CAKE_ACK_AGGRESSIVE: _bindgen_ty_146 = 2;
    pub const LKL_CAKE_ACK_MAX: _bindgen_ty_146 = 3;
    pub type _bindgen_ty_146 = ::std::os::raw::c_uint;
    pub const LKL_CAKE_ATM_NONE: _bindgen_ty_147 = 0;
    pub const LKL_CAKE_ATM_ATM: _bindgen_ty_147 = 1;
    pub const LKL_CAKE_ATM_PTM: _bindgen_ty_147 = 2;
    pub const LKL_CAKE_ATM_MAX: _bindgen_ty_147 = 3;
    pub type _bindgen_ty_147 = ::std::os::raw::c_uint;
    pub const LKL_TC_TAPRIO_CMD_SET_GATES: _bindgen_ty_148 = 0;
    pub const LKL_TC_TAPRIO_CMD_SET_AND_HOLD: _bindgen_ty_148 = 1;
    pub const LKL_TC_TAPRIO_CMD_SET_AND_RELEASE: _bindgen_ty_148 = 2;
    pub type _bindgen_ty_148 = ::std::os::raw::c_uint;
    pub const LKL_TCA_TAPRIO_SCHED_ENTRY_UNSPEC: _bindgen_ty_149 = 0;
    pub const LKL_TCA_TAPRIO_SCHED_ENTRY_INDEX: _bindgen_ty_149 = 1;
    pub const LKL_TCA_TAPRIO_SCHED_ENTRY_CMD: _bindgen_ty_149 = 2;
    pub const LKL_TCA_TAPRIO_SCHED_ENTRY_GATE_MASK: _bindgen_ty_149 = 3;
    pub const LKL_TCA_TAPRIO_SCHED_ENTRY_INTERVAL: _bindgen_ty_149 = 4;
    pub const __LKL__TCA_TAPRIO_SCHED_ENTRY_MAX: _bindgen_ty_149 = 5;
    pub type _bindgen_ty_149 = ::std::os::raw::c_uint;
    pub const LKL_TCA_TAPRIO_SCHED_UNSPEC: _bindgen_ty_150 = 0;
    pub const LKL_TCA_TAPRIO_SCHED_ENTRY: _bindgen_ty_150 = 1;
    pub const __LKL__TCA_TAPRIO_SCHED_MAX: _bindgen_ty_150 = 2;
    pub type _bindgen_ty_150 = ::std::os::raw::c_uint;
    pub const LKL_TCA_TAPRIO_ATTR_UNSPEC: _bindgen_ty_151 = 0;
    pub const LKL_TCA_TAPRIO_ATTR_PRIOMAP: _bindgen_ty_151 = 1;
    pub const LKL_TCA_TAPRIO_ATTR_SCHED_ENTRY_LIST: _bindgen_ty_151 = 2;
    pub const LKL_TCA_TAPRIO_ATTR_SCHED_BASE_TIME: _bindgen_ty_151 = 3;
    pub const LKL_TCA_TAPRIO_ATTR_SCHED_SINGLE_ENTRY: _bindgen_ty_151 = 4;
    pub const LKL_TCA_TAPRIO_ATTR_SCHED_CLOCKID: _bindgen_ty_151 = 5;
    pub const LKL_TCA_TAPRIO_PAD: _bindgen_ty_151 = 6;
    pub const LKL_TCA_TAPRIO_ATTR_ADMIN_SCHED: _bindgen_ty_151 = 7;
    pub const LKL_TCA_TAPRIO_ATTR_SCHED_CYCLE_TIME: _bindgen_ty_151 = 8;
    pub const LKL_TCA_TAPRIO_ATTR_SCHED_CYCLE_TIME_EXTENSION: _bindgen_ty_151 = 9;
    pub const LKL_TCA_TAPRIO_ATTR_FLAGS: _bindgen_ty_151 = 10;
    pub const LKL_TCA_TAPRIO_ATTR_TXTIME_DELAY: _bindgen_ty_151 = 11;
    pub const __LKL__TCA_TAPRIO_ATTR_MAX: _bindgen_ty_151 = 12;
    pub type _bindgen_ty_151 = ::std::os::raw::c_uint;
    pub const LKL_TCA_ETS_UNSPEC: _bindgen_ty_152 = 0;
    pub const LKL_TCA_ETS_NBANDS: _bindgen_ty_152 = 1;
    pub const LKL_TCA_ETS_NSTRICT: _bindgen_ty_152 = 2;
    pub const LKL_TCA_ETS_QUANTA: _bindgen_ty_152 = 3;
    pub const LKL_TCA_ETS_QUANTA_BAND: _bindgen_ty_152 = 4;
    pub const LKL_TCA_ETS_PRIOMAP: _bindgen_ty_152 = 5;
    pub const LKL_TCA_ETS_PRIOMAP_BAND: _bindgen_ty_152 = 6;
    pub const __LKL__TCA_ETS_MAX: _bindgen_ty_152 = 7;
    pub type _bindgen_ty_152 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_io_uring_sqe {
        pub opcode: __lkl__u8,
        pub flags: __lkl__u8,
        pub ioprio: __lkl__u16,
        pub fd: __lkl__s32,
        pub __bindgen_anon_1: lkl_io_uring_sqe__bindgen_ty_1,
        pub __bindgen_anon_2: lkl_io_uring_sqe__bindgen_ty_2,
        pub len: __lkl__u32,
        pub __bindgen_anon_3: lkl_io_uring_sqe__bindgen_ty_3,
        pub user_data: __lkl__u64,
        pub __bindgen_anon_4: lkl_io_uring_sqe__bindgen_ty_4,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_io_uring_sqe__bindgen_ty_1 {
        pub off: __lkl__u64,
        pub addr2: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_sqe__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_sqe__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_io_uring_sqe__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_sqe__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_sqe__bindgen_ty_1))
        );
        fn test_field_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_1),
                    "::",
                    stringify!(off)
                )
            );
        }
        test_field_off();
        fn test_field_addr2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).addr2) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_1),
                    "::",
                    stringify!(addr2)
                )
            );
        }
        test_field_addr2();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_io_uring_sqe__bindgen_ty_2 {
        pub addr: __lkl__u64,
        pub splice_off_in: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_sqe__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_sqe__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_io_uring_sqe__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_sqe__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_sqe__bindgen_ty_2))
        );
        fn test_field_addr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_2),
                    "::",
                    stringify!(addr)
                )
            );
        }
        test_field_addr();
        fn test_field_splice_off_in() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_2>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).splice_off_in) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_2),
                    "::",
                    stringify!(splice_off_in)
                )
            );
        }
        test_field_splice_off_in();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_io_uring_sqe__bindgen_ty_3 {
        pub rw_flags: __lkl__kernel_rwf_t,
        pub fsync_flags: __lkl__u32,
        pub poll_events: __lkl__u16,
        pub poll32_events: __lkl__u32,
        pub sync_range_flags: __lkl__u32,
        pub msg_flags: __lkl__u32,
        pub timeout_flags: __lkl__u32,
        pub accept_flags: __lkl__u32,
        pub cancel_flags: __lkl__u32,
        pub open_flags: __lkl__u32,
        pub statx_flags: __lkl__u32,
        pub fadvise_advice: __lkl__u32,
        pub splice_flags: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_sqe__bindgen_ty_3() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_sqe__bindgen_ty_3>(),
            4usize,
            concat!("Size of: ", stringify!(lkl_io_uring_sqe__bindgen_ty_3))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_sqe__bindgen_ty_3>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_sqe__bindgen_ty_3))
        );
        fn test_field_rw_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).rw_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(rw_flags)
                )
            );
        }
        test_field_rw_flags();
        fn test_field_fsync_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fsync_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(fsync_flags)
                )
            );
        }
        test_field_fsync_flags();
        fn test_field_poll_events() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).poll_events) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(poll_events)
                )
            );
        }
        test_field_poll_events();
        fn test_field_poll32_events() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).poll32_events) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(poll32_events)
                )
            );
        }
        test_field_poll32_events();
        fn test_field_sync_range_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sync_range_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(sync_range_flags)
                )
            );
        }
        test_field_sync_range_flags();
        fn test_field_msg_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(msg_flags)
                )
            );
        }
        test_field_msg_flags();
        fn test_field_timeout_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).timeout_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(timeout_flags)
                )
            );
        }
        test_field_timeout_flags();
        fn test_field_accept_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).accept_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(accept_flags)
                )
            );
        }
        test_field_accept_flags();
        fn test_field_cancel_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cancel_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(cancel_flags)
                )
            );
        }
        test_field_cancel_flags();
        fn test_field_open_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).open_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(open_flags)
                )
            );
        }
        test_field_open_flags();
        fn test_field_statx_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).statx_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(statx_flags)
                )
            );
        }
        test_field_statx_flags();
        fn test_field_fadvise_advice() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fadvise_advice) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(fadvise_advice)
                )
            );
        }
        test_field_fadvise_advice();
        fn test_field_splice_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_3>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).splice_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_3),
                    "::",
                    stringify!(splice_flags)
                )
            );
        }
        test_field_splice_flags();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_io_uring_sqe__bindgen_ty_4 {
        pub __bindgen_anon_1: lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1,
        pub __pad2: [__lkl__u64; 3usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1 {
        pub __bindgen_anon_1: lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
        pub personality: __lkl__u16,
        pub splice_fd_in: __lkl__s32,
    }
    #[repr(C, packed)]
    #[derive(Copy, Clone)]
    pub union lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 {
        pub buf_index: __lkl__u16,
        pub buf_group: __lkl__u16,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1>(),
            2usize,
            concat!(
                "Size of: ",
                stringify!(lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1>(),
            1usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1)
            )
        );
        fn test_field_buf_index() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).buf_index) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(buf_index)
                )
            );
        }
        test_field_buf_index();
        fn test_field_buf_group() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<
                        lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
                    >::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).buf_group) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1),
                    "::",
                    stringify!(buf_group)
                )
            );
        }
        test_field_buf_group();
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1)
            )
        );
        fn test_field_personality() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).personality) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1),
                    "::",
                    stringify!(personality)
                )
            );
        }
        test_field_personality();
        fn test_field_splice_fd_in() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1>::uninit(
                        );
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).splice_fd_in) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_4__bindgen_ty_1),
                    "::",
                    stringify!(splice_fd_in)
                )
            );
        }
        test_field_splice_fd_in();
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_sqe__bindgen_ty_4() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_sqe__bindgen_ty_4>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_io_uring_sqe__bindgen_ty_4))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_sqe__bindgen_ty_4>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_sqe__bindgen_ty_4))
        );
        fn test_field___pad2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe__bindgen_ty_4>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe__bindgen_ty_4),
                    "::",
                    stringify!(__pad2)
                )
            );
        }
        test_field___pad2();
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_sqe() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_sqe>(),
            64usize,
            concat!("Size of: ", stringify!(lkl_io_uring_sqe))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_sqe>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_sqe))
        );
        fn test_field_opcode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe),
                    "::",
                    stringify!(opcode)
                )
            );
        }
        test_field_opcode();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_ioprio() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ioprio) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe),
                    "::",
                    stringify!(ioprio)
                )
            );
        }
        test_field_ioprio();
        fn test_field_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe),
                    "::",
                    stringify!(fd)
                )
            );
        }
        test_field_fd();
        fn test_field_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe),
                    "::",
                    stringify!(len)
                )
            );
        }
        test_field_len();
        fn test_field_user_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_sqe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_sqe),
                    "::",
                    stringify!(user_data)
                )
            );
        }
        test_field_user_data();
    }
    pub const LKL_IOSQE_FIXED_FILE_BIT: _bindgen_ty_153 = 0;
    pub const LKL_IOSQE_IO_DRAIN_BIT: _bindgen_ty_153 = 1;
    pub const LKL_IOSQE_IO_LINK_BIT: _bindgen_ty_153 = 2;
    pub const LKL_IOSQE_IO_HARDLINK_BIT: _bindgen_ty_153 = 3;
    pub const LKL_IOSQE_ASYNC_BIT: _bindgen_ty_153 = 4;
    pub const LKL_IOSQE_BUFFER_SELECT_BIT: _bindgen_ty_153 = 5;
    pub type _bindgen_ty_153 = ::std::os::raw::c_uint;
    pub const LKL_IORING_OP_NOP: _bindgen_ty_154 = 0;
    pub const LKL_IORING_OP_READV: _bindgen_ty_154 = 1;
    pub const LKL_IORING_OP_WRITEV: _bindgen_ty_154 = 2;
    pub const LKL_IORING_OP_FSYNC: _bindgen_ty_154 = 3;
    pub const LKL_IORING_OP_READ_FIXED: _bindgen_ty_154 = 4;
    pub const LKL_IORING_OP_WRITE_FIXED: _bindgen_ty_154 = 5;
    pub const LKL_IORING_OP_POLL_ADD: _bindgen_ty_154 = 6;
    pub const LKL_IORING_OP_POLL_REMOVE: _bindgen_ty_154 = 7;
    pub const LKL_IORING_OP_SYNC_FILE_RANGE: _bindgen_ty_154 = 8;
    pub const LKL_IORING_OP_SENDMSG: _bindgen_ty_154 = 9;
    pub const LKL_IORING_OP_RECVMSG: _bindgen_ty_154 = 10;
    pub const LKL_IORING_OP_TIMEOUT: _bindgen_ty_154 = 11;
    pub const LKL_IORING_OP_TIMEOUT_REMOVE: _bindgen_ty_154 = 12;
    pub const LKL_IORING_OP_ACCEPT: _bindgen_ty_154 = 13;
    pub const LKL_IORING_OP_ASYNC_CANCEL: _bindgen_ty_154 = 14;
    pub const LKL_IORING_OP_LINK_TIMEOUT: _bindgen_ty_154 = 15;
    pub const LKL_IORING_OP_CONNECT: _bindgen_ty_154 = 16;
    pub const LKL_IORING_OP_FALLOCATE: _bindgen_ty_154 = 17;
    pub const LKL_IORING_OP_OPENAT: _bindgen_ty_154 = 18;
    pub const LKL_IORING_OP_CLOSE: _bindgen_ty_154 = 19;
    pub const LKL_IORING_OP_FILES_UPDATE: _bindgen_ty_154 = 20;
    pub const LKL_IORING_OP_STATX: _bindgen_ty_154 = 21;
    pub const LKL_IORING_OP_READ: _bindgen_ty_154 = 22;
    pub const LKL_IORING_OP_WRITE: _bindgen_ty_154 = 23;
    pub const LKL_IORING_OP_FADVISE: _bindgen_ty_154 = 24;
    pub const LKL_IORING_OP_MADVISE: _bindgen_ty_154 = 25;
    pub const LKL_IORING_OP_SEND: _bindgen_ty_154 = 26;
    pub const LKL_IORING_OP_RECV: _bindgen_ty_154 = 27;
    pub const LKL_IORING_OP_OPENAT2: _bindgen_ty_154 = 28;
    pub const LKL_IORING_OP_EPOLL_CTL: _bindgen_ty_154 = 29;
    pub const LKL_IORING_OP_SPLICE: _bindgen_ty_154 = 30;
    pub const LKL_IORING_OP_PROVIDE_BUFFERS: _bindgen_ty_154 = 31;
    pub const LKL_IORING_OP_REMOVE_BUFFERS: _bindgen_ty_154 = 32;
    pub const LKL_IORING_OP_TEE: _bindgen_ty_154 = 33;
    pub const LKL_IORING_OP_LAST: _bindgen_ty_154 = 34;
    pub type _bindgen_ty_154 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_io_uring_cqe {
        pub user_data: __lkl__u64,
        pub res: __lkl__s32,
        pub flags: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_cqe() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_cqe>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_io_uring_cqe))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_cqe>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_cqe))
        );
        fn test_field_user_data() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_cqe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_cqe),
                    "::",
                    stringify!(user_data)
                )
            );
        }
        test_field_user_data();
        fn test_field_res() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_cqe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_cqe),
                    "::",
                    stringify!(res)
                )
            );
        }
        test_field_res();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_cqe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_cqe),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
    }
    pub const LKL_IORING_CQE_BUFFER_SHIFT: _bindgen_ty_155 = 16;
    pub type _bindgen_ty_155 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_io_sqring_offsets {
        pub head: __lkl__u32,
        pub tail: __lkl__u32,
        pub ring_mask: __lkl__u32,
        pub ring_entries: __lkl__u32,
        pub flags: __lkl__u32,
        pub dropped: __lkl__u32,
        pub array: __lkl__u32,
        pub resv1: __lkl__u32,
        pub resv2: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_sqring_offsets() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_sqring_offsets>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_io_sqring_offsets))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_sqring_offsets>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_io_sqring_offsets))
        );
        fn test_field_head() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_sqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_sqring_offsets),
                    "::",
                    stringify!(head)
                )
            );
        }
        test_field_head();
        fn test_field_tail() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_sqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_sqring_offsets),
                    "::",
                    stringify!(tail)
                )
            );
        }
        test_field_tail();
        fn test_field_ring_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_sqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ring_mask) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_sqring_offsets),
                    "::",
                    stringify!(ring_mask)
                )
            );
        }
        test_field_ring_mask();
        fn test_field_ring_entries() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_sqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ring_entries) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_sqring_offsets),
                    "::",
                    stringify!(ring_entries)
                )
            );
        }
        test_field_ring_entries();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_sqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_sqring_offsets),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_dropped() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_sqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dropped) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_sqring_offsets),
                    "::",
                    stringify!(dropped)
                )
            );
        }
        test_field_dropped();
        fn test_field_array() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_sqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_sqring_offsets),
                    "::",
                    stringify!(array)
                )
            );
        }
        test_field_array();
        fn test_field_resv1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_sqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv1) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_sqring_offsets),
                    "::",
                    stringify!(resv1)
                )
            );
        }
        test_field_resv1();
        fn test_field_resv2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_sqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_sqring_offsets),
                    "::",
                    stringify!(resv2)
                )
            );
        }
        test_field_resv2();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_io_cqring_offsets {
        pub head: __lkl__u32,
        pub tail: __lkl__u32,
        pub ring_mask: __lkl__u32,
        pub ring_entries: __lkl__u32,
        pub overflow: __lkl__u32,
        pub cqes: __lkl__u32,
        pub flags: __lkl__u32,
        pub resv1: __lkl__u32,
        pub resv2: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_cqring_offsets() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_cqring_offsets>(),
            40usize,
            concat!("Size of: ", stringify!(lkl_io_cqring_offsets))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_cqring_offsets>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_io_cqring_offsets))
        );
        fn test_field_head() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_cqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_cqring_offsets),
                    "::",
                    stringify!(head)
                )
            );
        }
        test_field_head();
        fn test_field_tail() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_cqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_cqring_offsets),
                    "::",
                    stringify!(tail)
                )
            );
        }
        test_field_tail();
        fn test_field_ring_mask() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_cqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ring_mask) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_cqring_offsets),
                    "::",
                    stringify!(ring_mask)
                )
            );
        }
        test_field_ring_mask();
        fn test_field_ring_entries() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_cqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ring_entries) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_cqring_offsets),
                    "::",
                    stringify!(ring_entries)
                )
            );
        }
        test_field_ring_entries();
        fn test_field_overflow() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_cqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).overflow) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_cqring_offsets),
                    "::",
                    stringify!(overflow)
                )
            );
        }
        test_field_overflow();
        fn test_field_cqes() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_cqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cqes) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_cqring_offsets),
                    "::",
                    stringify!(cqes)
                )
            );
        }
        test_field_cqes();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_cqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_cqring_offsets),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_resv1() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_cqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv1) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_cqring_offsets),
                    "::",
                    stringify!(resv1)
                )
            );
        }
        test_field_resv1();
        fn test_field_resv2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_cqring_offsets>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_cqring_offsets),
                    "::",
                    stringify!(resv2)
                )
            );
        }
        test_field_resv2();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_io_uring_params {
        pub sq_entries: __lkl__u32,
        pub cq_entries: __lkl__u32,
        pub flags: __lkl__u32,
        pub sq_thread_cpu: __lkl__u32,
        pub sq_thread_idle: __lkl__u32,
        pub features: __lkl__u32,
        pub wq_fd: __lkl__u32,
        pub resv: [__lkl__u32; 3usize],
        pub sq_off: lkl_io_sqring_offsets,
        pub cq_off: lkl_io_cqring_offsets,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_params() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_params>(),
            120usize,
            concat!("Size of: ", stringify!(lkl_io_uring_params))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_params>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_params))
        );
        fn test_field_sq_entries() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_params>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sq_entries) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_params),
                    "::",
                    stringify!(sq_entries)
                )
            );
        }
        test_field_sq_entries();
        fn test_field_cq_entries() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_params>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cq_entries) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_params),
                    "::",
                    stringify!(cq_entries)
                )
            );
        }
        test_field_cq_entries();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_params>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_params),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_sq_thread_cpu() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_params>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sq_thread_cpu) as usize - ptr as usize
                },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_params),
                    "::",
                    stringify!(sq_thread_cpu)
                )
            );
        }
        test_field_sq_thread_cpu();
        fn test_field_sq_thread_idle() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_params>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sq_thread_idle) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_params),
                    "::",
                    stringify!(sq_thread_idle)
                )
            );
        }
        test_field_sq_thread_idle();
        fn test_field_features() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_params>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_params),
                    "::",
                    stringify!(features)
                )
            );
        }
        test_field_features();
        fn test_field_wq_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_params>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).wq_fd) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_params),
                    "::",
                    stringify!(wq_fd)
                )
            );
        }
        test_field_wq_fd();
        fn test_field_resv() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_params>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
                },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_params),
                    "::",
                    stringify!(resv)
                )
            );
        }
        test_field_resv();
        fn test_field_sq_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_params>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sq_off) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_params),
                    "::",
                    stringify!(sq_off)
                )
            );
        }
        test_field_sq_off();
        fn test_field_cq_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_params>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).cq_off) as usize - ptr as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_params),
                    "::",
                    stringify!(cq_off)
                )
            );
        }
        test_field_cq_off();
    }
    pub const LKL_IORING_REGISTER_BUFFERS: _bindgen_ty_156 = 0;
    pub const LKL_IORING_UNREGISTER_BUFFERS: _bindgen_ty_156 = 1;
    pub const LKL_IORING_REGISTER_FILES: _bindgen_ty_156 = 2;
    pub const LKL_IORING_UNREGISTER_FILES: _bindgen_ty_156 = 3;
    pub const LKL_IORING_REGISTER_EVENTFD: _bindgen_ty_156 = 4;
    pub const LKL_IORING_UNREGISTER_EVENTFD: _bindgen_ty_156 = 5;
    pub const LKL_IORING_REGISTER_FILES_UPDATE: _bindgen_ty_156 = 6;
    pub const LKL_IORING_REGISTER_EVENTFD_ASYNC: _bindgen_ty_156 = 7;
    pub const LKL_IORING_REGISTER_PROBE: _bindgen_ty_156 = 8;
    pub const LKL_IORING_REGISTER_PERSONALITY: _bindgen_ty_156 = 9;
    pub const LKL_IORING_UNREGISTER_PERSONALITY: _bindgen_ty_156 = 10;
    pub const LKL_IORING_REGISTER_RESTRICTIONS: _bindgen_ty_156 = 11;
    pub const LKL_IORING_REGISTER_ENABLE_RINGS: _bindgen_ty_156 = 12;
    pub const LKL_IORING_REGISTER_LAST: _bindgen_ty_156 = 13;
    pub type _bindgen_ty_156 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_io_uring_files_update {
        pub offset: __lkl__u32,
        pub resv: __lkl__u32,
        pub fds: __lkl__u64,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_files_update() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_files_update>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_io_uring_files_update))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_files_update>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_files_update))
        );
        fn test_field_offset() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_files_update>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_files_update),
                    "::",
                    stringify!(offset)
                )
            );
        }
        test_field_offset();
        fn test_field_resv() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_files_update>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_files_update),
                    "::",
                    stringify!(resv)
                )
            );
        }
        test_field_resv();
        fn test_field_fds() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_files_update>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fds) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_files_update),
                    "::",
                    stringify!(fds)
                )
            );
        }
        test_field_fds();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_io_uring_probe_op {
        pub op: __lkl__u8,
        pub resv: __lkl__u8,
        pub flags: __lkl__u16,
        pub resv2: __lkl__u32,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_probe_op() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_probe_op>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_io_uring_probe_op))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_probe_op>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_probe_op))
        );
        fn test_field_op() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_probe_op>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_probe_op),
                    "::",
                    stringify!(op)
                )
            );
        }
        test_field_op();
        fn test_field_resv() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_probe_op>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_probe_op),
                    "::",
                    stringify!(resv)
                )
            );
        }
        test_field_resv();
        fn test_field_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_probe_op>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_probe_op),
                    "::",
                    stringify!(flags)
                )
            );
        }
        test_field_flags();
        fn test_field_resv2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_probe_op>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_probe_op),
                    "::",
                    stringify!(resv2)
                )
            );
        }
        test_field_resv2();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_io_uring_probe {
        pub last_op: __lkl__u8,
        pub ops_len: __lkl__u8,
        pub resv: __lkl__u16,
        pub resv2: [__lkl__u32; 3usize],
        pub ops: __IncompleteArrayField<lkl_io_uring_probe_op>,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_probe() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_probe>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_io_uring_probe))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_probe>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_probe))
        );
        fn test_field_last_op() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_probe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).last_op) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_probe),
                    "::",
                    stringify!(last_op)
                )
            );
        }
        test_field_last_op();
        fn test_field_ops_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_probe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ops_len) as usize - ptr as usize
                },
                1usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_probe),
                    "::",
                    stringify!(ops_len)
                )
            );
        }
        test_field_ops_len();
        fn test_field_resv() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_probe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
                },
                2usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_probe),
                    "::",
                    stringify!(resv)
                )
            );
        }
        test_field_resv();
        fn test_field_resv2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_probe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_probe),
                    "::",
                    stringify!(resv2)
                )
            );
        }
        test_field_resv2();
        fn test_field_ops() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_probe>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ops) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_probe),
                    "::",
                    stringify!(ops)
                )
            );
        }
        test_field_ops();
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_io_uring_restriction {
        pub opcode: __lkl__u16,
        pub __bindgen_anon_1: lkl_io_uring_restriction__bindgen_ty_1,
        pub resv: __lkl__u8,
        pub resv2: [__lkl__u32; 3usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_io_uring_restriction__bindgen_ty_1 {
        pub register_op: __lkl__u8,
        pub sqe_op: __lkl__u8,
        pub sqe_flags: __lkl__u8,
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_restriction__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_restriction__bindgen_ty_1>(),
            1usize,
            concat!(
                "Size of: ",
                stringify!(lkl_io_uring_restriction__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_restriction__bindgen_ty_1>(),
            1usize,
            concat!(
                "Alignment of ",
                stringify!(lkl_io_uring_restriction__bindgen_ty_1)
            )
        );
        fn test_field_register_op() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_io_uring_restriction__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).register_op) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_restriction__bindgen_ty_1),
                    "::",
                    stringify!(register_op)
                )
            );
        }
        test_field_register_op();
        fn test_field_sqe_op() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_io_uring_restriction__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sqe_op) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_restriction__bindgen_ty_1),
                    "::",
                    stringify!(sqe_op)
                )
            );
        }
        test_field_sqe_op();
        fn test_field_sqe_flags() {
            assert_eq!(
                unsafe {
                    let uninit =
                        ::std::mem::MaybeUninit::<lkl_io_uring_restriction__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).sqe_flags) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_restriction__bindgen_ty_1),
                    "::",
                    stringify!(sqe_flags)
                )
            );
        }
        test_field_sqe_flags();
    }
    #[test]
    fn bindgen_test_layout_lkl_io_uring_restriction() {
        assert_eq!(
            ::std::mem::size_of::<lkl_io_uring_restriction>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_io_uring_restriction))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_io_uring_restriction>(),
            4usize,
            concat!("Alignment of ", stringify!(lkl_io_uring_restriction))
        );
        fn test_field_opcode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_restriction>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_restriction),
                    "::",
                    stringify!(opcode)
                )
            );
        }
        test_field_opcode();
        fn test_field_resv() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_restriction>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
                },
                3usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_restriction),
                    "::",
                    stringify!(resv)
                )
            );
        }
        test_field_resv();
        fn test_field_resv2() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_io_uring_restriction>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
                },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_io_uring_restriction),
                    "::",
                    stringify!(resv2)
                )
            );
        }
        test_field_resv2();
    }
    pub const LKL_IORING_RESTRICTION_REGISTER_OP: _bindgen_ty_157 = 0;
    pub const LKL_IORING_RESTRICTION_SQE_OP: _bindgen_ty_157 = 1;
    pub const LKL_IORING_RESTRICTION_SQE_FLAGS_ALLOWED: _bindgen_ty_157 = 2;
    pub const LKL_IORING_RESTRICTION_SQE_FLAGS_REQUIRED: _bindgen_ty_157 = 3;
    pub const LKL_IORING_RESTRICTION_LAST: _bindgen_ty_157 = 4;
    pub type _bindgen_ty_157 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_user_msghdr {
        pub msg_name: *mut ::std::os::raw::c_void,
        pub msg_namelen: ::std::os::raw::c_int,
        pub msg_iov: *mut lkl_iovec,
        pub msg_iovlen: __lkl__kernel_size_t,
        pub msg_control: *mut ::std::os::raw::c_void,
        pub msg_controllen: __lkl__kernel_size_t,
        pub msg_flags: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_user_msghdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_user_msghdr>(),
            56usize,
            concat!("Size of: ", stringify!(lkl_user_msghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_user_msghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_user_msghdr))
        );
        fn test_field_msg_name() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_user_msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_user_msghdr),
                    "::",
                    stringify!(msg_name)
                )
            );
        }
        test_field_msg_name();
        fn test_field_msg_namelen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_user_msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_user_msghdr),
                    "::",
                    stringify!(msg_namelen)
                )
            );
        }
        test_field_msg_namelen();
        fn test_field_msg_iov() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_user_msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_user_msghdr),
                    "::",
                    stringify!(msg_iov)
                )
            );
        }
        test_field_msg_iov();
        fn test_field_msg_iovlen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_user_msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_user_msghdr),
                    "::",
                    stringify!(msg_iovlen)
                )
            );
        }
        test_field_msg_iovlen();
        fn test_field_msg_control() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_user_msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_user_msghdr),
                    "::",
                    stringify!(msg_control)
                )
            );
        }
        test_field_msg_control();
        fn test_field_msg_controllen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_user_msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_user_msghdr),
                    "::",
                    stringify!(msg_controllen)
                )
            );
        }
        test_field_msg_controllen();
        fn test_field_msg_flags() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_user_msghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_user_msghdr),
                    "::",
                    stringify!(msg_flags)
                )
            );
        }
        test_field_msg_flags();
    }
    pub type lkl_key_serial_t = __lkl__u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_mmsghdr {
        pub msg_hdr: lkl_user_msghdr,
        pub msg_len: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_mmsghdr() {
        assert_eq!(
            ::std::mem::size_of::<lkl_mmsghdr>(),
            64usize,
            concat!("Size of: ", stringify!(lkl_mmsghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_mmsghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_mmsghdr))
        );
        fn test_field_msg_hdr() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_mmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_hdr) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_mmsghdr),
                    "::",
                    stringify!(msg_hdr)
                )
            );
        }
        test_field_msg_hdr();
        fn test_field_msg_len() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_mmsghdr>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).msg_len) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_mmsghdr),
                    "::",
                    stringify!(msg_len)
                )
            );
        }
        test_field_msg_len();
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct lkl_linux_dirent64 {
        pub d_ino: lkl_u64,
        pub d_off: lkl_s64,
        pub d_reclen: ::std::os::raw::c_ushort,
        pub d_type: ::std::os::raw::c_uchar,
        pub d_name: __IncompleteArrayField<::std::os::raw::c_char>,
    }
    #[test]
    fn bindgen_test_layout_lkl_linux_dirent64() {
        assert_eq!(
            ::std::mem::size_of::<lkl_linux_dirent64>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_linux_dirent64))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_linux_dirent64>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_linux_dirent64))
        );
        fn test_field_d_ino() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_linux_dirent64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_linux_dirent64),
                    "::",
                    stringify!(d_ino)
                )
            );
        }
        test_field_d_ino();
        fn test_field_d_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_linux_dirent64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_linux_dirent64),
                    "::",
                    stringify!(d_off)
                )
            );
        }
        test_field_d_off();
        fn test_field_d_reclen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_linux_dirent64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_linux_dirent64),
                    "::",
                    stringify!(d_reclen)
                )
            );
        }
        test_field_d_reclen();
        fn test_field_d_type() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_linux_dirent64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize
                },
                18usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_linux_dirent64),
                    "::",
                    stringify!(d_type)
                )
            );
        }
        test_field_d_type();
        fn test_field_d_name() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_linux_dirent64>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize
                },
                19usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_linux_dirent64),
                    "::",
                    stringify!(d_name)
                )
            );
        }
        test_field_d_name();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_linux_dirent {
        pub d_ino: ::std::os::raw::c_ulong,
        pub d_off: ::std::os::raw::c_ulong,
        pub d_reclen: ::std::os::raw::c_ushort,
        pub d_name: [::std::os::raw::c_char; 1usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_linux_dirent() {
        assert_eq!(
            ::std::mem::size_of::<lkl_linux_dirent>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_linux_dirent))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_linux_dirent>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_linux_dirent))
        );
        fn test_field_d_ino() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_linux_dirent>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_linux_dirent),
                    "::",
                    stringify!(d_ino)
                )
            );
        }
        test_field_d_ino();
        fn test_field_d_off() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_linux_dirent>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_linux_dirent),
                    "::",
                    stringify!(d_off)
                )
            );
        }
        test_field_d_off();
        fn test_field_d_reclen() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_linux_dirent>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_linux_dirent),
                    "::",
                    stringify!(d_reclen)
                )
            );
        }
        test_field_d_reclen();
        fn test_field_d_name() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_linux_dirent>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize
                },
                18usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_linux_dirent),
                    "::",
                    stringify!(d_name)
                )
            );
        }
        test_field_d_name();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_ustat {
        pub f_tfree: __lkl__kernel_daddr_t,
        pub f_tinode: __lkl__kernel_ino_t,
        pub f_fname: [::std::os::raw::c_char; 6usize],
        pub f_fpack: [::std::os::raw::c_char; 6usize],
    }
    #[test]
    fn bindgen_test_layout_lkl_ustat() {
        assert_eq!(
            ::std::mem::size_of::<lkl_ustat>(),
            32usize,
            concat!("Size of: ", stringify!(lkl_ustat))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_ustat>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_ustat))
        );
        fn test_field_f_tfree() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ustat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_tfree) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ustat),
                    "::",
                    stringify!(f_tfree)
                )
            );
        }
        test_field_f_tfree();
        fn test_field_f_tinode() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ustat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_tinode) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ustat),
                    "::",
                    stringify!(f_tinode)
                )
            );
        }
        test_field_f_tinode();
        fn test_field_f_fname() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ustat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_fname) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ustat),
                    "::",
                    stringify!(f_fname)
                )
            );
        }
        test_field_f_fname();
        fn test_field_f_fpack() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_ustat>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).f_fpack) as usize - ptr as usize
                },
                22usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_ustat),
                    "::",
                    stringify!(f_fpack)
                )
            );
        }
        test_field_f_fpack();
    }
    pub type lkl_rwf_t = __lkl__kernel_rwf_t;
    extern "C" {
        pub fn lkl_syscall(
            no: ::std::os::raw::c_long,
            params: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lkl_sys_halt() -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = " lkl_strerror - returns a string describing the given error code"]
        #[doc = ""]
        #[doc = " @err - error code"]
        #[doc = " @returns - string for the given error code"]
        pub fn lkl_strerror(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[doc = " lkl_perror - prints a string describing the given error code"]
        #[doc = ""]
        #[doc = " @msg - prefix for the error message"]
        #[doc = " @err - error code"]
        pub fn lkl_perror(msg: *mut ::std::os::raw::c_char, err: ::std::os::raw::c_int);
    }
    #[doc = " struct lkl_dev_blk_ops - block device host operations, defined in lkl_host.h."]
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_dev_blk_ops {
        _unused: [u8; 0],
    }
    #[doc = " lkl_disk - host disk handle"]
    #[doc = ""]
    #[doc = " @dev - a pointer to 'virtio_blk_dev' structure for this disk"]
    #[doc = " @fd - a POSIX file descriptor that can be used by preadv/pwritev"]
    #[doc = " @handle - an NT file handle that can be used by ReadFile/WriteFile"]
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct lkl_disk {
        pub dev: *mut ::std::os::raw::c_void,
        pub __bindgen_anon_1: lkl_disk__bindgen_ty_1,
        pub ops: *mut lkl_dev_blk_ops,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union lkl_disk__bindgen_ty_1 {
        pub fd: ::std::os::raw::c_int,
        pub handle: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout_lkl_disk__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<lkl_disk__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(lkl_disk__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_disk__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_disk__bindgen_ty_1))
        );
        fn test_field_fd() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_disk__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_disk__bindgen_ty_1),
                    "::",
                    stringify!(fd)
                )
            );
        }
        test_field_fd();
        fn test_field_handle() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_disk__bindgen_ty_1>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_disk__bindgen_ty_1),
                    "::",
                    stringify!(handle)
                )
            );
        }
        test_field_handle();
    }
    #[test]
    fn bindgen_test_layout_lkl_disk() {
        assert_eq!(
            ::std::mem::size_of::<lkl_disk>(),
            24usize,
            concat!("Size of: ", stringify!(lkl_disk))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_disk>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_disk))
        );
        fn test_field_dev() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_disk>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_disk),
                    "::",
                    stringify!(dev)
                )
            );
        }
        test_field_dev();
        fn test_field_ops() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_disk>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).ops) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_disk),
                    "::",
                    stringify!(ops)
                )
            );
        }
        test_field_ops();
    }
    extern "C" {
        #[doc = " lkl_disk_add - add a new disk"]
        #[doc = ""]
        #[doc = " @disk - the host disk handle"]
        #[doc = " @returns a disk id (0 is valid) or a strictly negative value in case of error"]
        pub fn lkl_disk_add(disk: *mut lkl_disk) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_disk_remove - remove a disk"]
        #[doc = ""]
        #[doc = " This function makes a cleanup of the @disk's virtio_dev structure"]
        #[doc = " that was initialized by lkl_disk_add before."]
        #[doc = ""]
        #[doc = " @disk - the host disk handle"]
        pub fn lkl_disk_remove(disk: lkl_disk) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_get_virtiolkl_encode_dev_from_sysfs_blkdev - extract device id from sysfs"]
        #[doc = ""]
        #[doc = " This function returns the device id for the given sysfs dev node."]
        #[doc = " The content of the node has to be in the form 'MAJOR:MINOR'."]
        #[doc = " Also, this function expects an absolute path which means that sysfs"]
        #[doc = " already has to be mounted at the given path"]
        #[doc = ""]
        #[doc = " @sysfs_path - absolute path to the sysfs dev node"]
        #[doc = " @pdevid - pointer to memory where dev id will be returned"]
        #[doc = " @returns - 0 on success, a negative value on error"]
        pub fn lkl_encode_dev_from_sysfs(
            sysfs_path: *const ::std::os::raw::c_char,
            pdevid: *mut u32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_get_virtio_blkdev - get device id of a disk (partition)"]
        #[doc = ""]
        #[doc = " This function returns the device id for the given disk."]
        #[doc = ""]
        #[doc = " @disk_id - the disk id identifying the disk"]
        #[doc = " @part - disk partition or zero for full disk"]
        #[doc = " @pdevid - pointer to memory where dev id will be returned"]
        #[doc = " @returns - 0 on success, a negative value on error"]
        pub fn lkl_get_virtio_blkdev(
            disk_id: ::std::os::raw::c_int,
            part: ::std::os::raw::c_uint,
            pdevid: *mut u32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_mount_dev - mount a disk"]
        #[doc = ""]
        #[doc = " This functions creates a device file for the given disk, creates a mount"]
        #[doc = " point and mounts the device over the mount point."]
        #[doc = ""]
        #[doc = " @disk_id - the disk id identifying the disk to be mounted"]
        #[doc = " @part - disk partition or zero for full disk"]
        #[doc = " @fs_type - filesystem type"]
        #[doc = " @flags - mount flags"]
        #[doc = " @opts - additional filesystem specific mount options"]
        #[doc = " @mnt_str - a string that will be filled by this function with the path where"]
        #[doc = " the filesystem has been mounted"]
        #[doc = " @mnt_str_len - size of mnt_str"]
        #[doc = " @returns - 0 on success, a negative value on error"]
        pub fn lkl_mount_dev(
            disk_id: ::std::os::raw::c_uint,
            part: ::std::os::raw::c_uint,
            fs_type: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            opts: *const ::std::os::raw::c_char,
            mnt_str: *mut ::std::os::raw::c_char,
            mnt_str_len: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = " lkl_mount_blkdev - mount a block device"]
        #[doc = ""]
        #[doc = " Like lkl_mount_dev, but mounts the device specified by dev."]
        #[doc = ""]
        #[doc = " @dev - the device id (can be generated by LKL_MKDEV()) identifying the device"]
        #[doc = " to be mounted"]
        #[doc = " @fs_type - filesystem type"]
        #[doc = " @flags - mount flags"]
        #[doc = " @opts - additional filesystem specific mount options"]
        #[doc = " @mnt_str - a string that will be filled by this function with the path where"]
        #[doc = " the filesystem has been mounted"]
        #[doc = " @mnt_str_len - size of mnt_str"]
        #[doc = " @returns - 0 on success, a negative value on error"]
        pub fn lkl_mount_blkdev(
            dev: ::std::os::raw::c_uint,
            fs_type: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            opts: *const ::std::os::raw::c_char,
            mnt_str: *mut ::std::os::raw::c_char,
            mnt_str_len: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = " lkl_umount_dev - umount a disk"]
        #[doc = ""]
        #[doc = " This functions umounts the given disks and removes the device file and the"]
        #[doc = " mount point."]
        #[doc = ""]
        #[doc = " @disk_id - the disk id identifying the disk to be mounted"]
        #[doc = " @part - disk partition or zero for full disk"]
        #[doc = " @flags - umount flags"]
        #[doc = " @timeout_ms - timeout to wait for the kernel to flush closed files so that"]
        #[doc = " umount can succeed"]
        #[doc = " @returns - 0 on success, a negative value on error"]
        pub fn lkl_umount_dev(
            disk_id: ::std::os::raw::c_uint,
            part: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_int,
            timeout_ms: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = " lkl_umount_blkdev - umount a block device"]
        #[doc = ""]
        #[doc = " Like lkl_umount_dev, but unmounts the device specified by dev."]
        #[doc = ""]
        #[doc = " @dev - the device id identifying the device to be mounted"]
        #[doc = " @flags - umount flags"]
        #[doc = " @timeout_ms - timeout to wait for the kernel to flush closed files so that"]
        #[doc = " umount can succeed"]
        #[doc = " @returns - 0 on success, a negative value on error"]
        pub fn lkl_umount_blkdev(
            dev: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_int,
            timeout_ms: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = " lkl_umount_timeout - umount filesystem with timeout"]
        #[doc = ""]
        #[doc = " @path - the path to unmount"]
        #[doc = " @flags - umount flags"]
        #[doc = " @timeout_ms - timeout to wait for the kernel to flush closed files so that"]
        #[doc = " umount can succeed"]
        #[doc = " @returns - 0 on success, a negative value on error"]
        pub fn lkl_umount_timeout(
            path: *mut ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            timeout_ms: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_dir {
        _unused: [u8; 0],
    }
    extern "C" {
        #[doc = " lkl_opendir - open a directory"]
        #[doc = ""]
        #[doc = " @path - directory path"]
        #[doc = " @err - pointer to store the error in case of failure"]
        #[doc = " @returns - a handle to be used when calling lkl_readdir"]
        pub fn lkl_opendir(
            path: *const ::std::os::raw::c_char,
            err: *mut ::std::os::raw::c_int,
        ) -> *mut lkl_dir;
    }
    extern "C" {
        #[doc = " lkl_fdopendir - open a directory"]
        #[doc = ""]
        #[doc = " @fd - file descriptor"]
        #[doc = " @err - pointer to store the error in case of failure"]
        #[doc = " @returns - a handle to be used when calling lkl_readdir"]
        pub fn lkl_fdopendir(
            fd: ::std::os::raw::c_int,
            err: *mut ::std::os::raw::c_int,
        ) -> *mut lkl_dir;
    }
    extern "C" {
        #[doc = " lkl_rewinddir - reset directory stream"]
        #[doc = ""]
        #[doc = " @dir - the directory handler as returned by lkl_opendir"]
        pub fn lkl_rewinddir(dir: *mut lkl_dir);
    }
    extern "C" {
        #[doc = " lkl_closedir - close the directory"]
        #[doc = ""]
        #[doc = " @dir - the directory handler as returned by lkl_opendir"]
        pub fn lkl_closedir(dir: *mut lkl_dir) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_readdir - get the next available entry of the directory"]
        #[doc = ""]
        #[doc = " @dir - the directory handler as returned by lkl_opendir"]
        #[doc = " @returns - a lkl_dirent64 entry or NULL if the end of the directory stream is"]
        #[doc = " reached or if an error occurred; check lkl_errdir() to distinguish between"]
        #[doc = " errors or end of the directory stream"]
        pub fn lkl_readdir(dir: *mut lkl_dir) -> *mut lkl_linux_dirent64;
    }
    extern "C" {
        #[doc = " lkl_errdir - checks if an error occurred during the last lkl_readdir call"]
        #[doc = ""]
        #[doc = " @dir - the directory handler as returned by lkl_opendir"]
        #[doc = " @returns - 0 if no error occurred, or a negative value otherwise"]
        pub fn lkl_errdir(dir: *mut lkl_dir) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_dirfd - gets the file descriptor associated with the directory handle"]
        #[doc = ""]
        #[doc = " @dir - the directory handle as returned by lkl_opendir"]
        #[doc = " @returns - a positive value,which is the LKL file descriptor associated with"]
        #[doc = " the directory handle, or a negative value otherwise"]
        pub fn lkl_dirfd(dir: *mut lkl_dir) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_up - activate network interface"]
        #[doc = ""]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @returns - return 0 if no error: otherwise negative value returns"]
        pub fn lkl_if_up(ifindex: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_down - deactivate network interface"]
        #[doc = ""]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @returns - return 0 if no error: otherwise negative value returns"]
        pub fn lkl_if_down(ifindex: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_set_mtu - set MTU on interface"]
        #[doc = ""]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @mtu - the requested MTU size"]
        #[doc = " @returns - return 0 if no error: otherwise negative value returns"]
        pub fn lkl_if_set_mtu(
            ifindex: ::std::os::raw::c_int,
            mtu: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_set_ipv4 - set IPv4 address on interface"]
        #[doc = ""]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @addr - 4-byte IP address (i.e., struct in_addr)"]
        #[doc = " @netmask_len - prefix length of the @addr"]
        #[doc = " @returns - return 0 if no error: otherwise negative value returns"]
        pub fn lkl_if_set_ipv4(
            ifindex: ::std::os::raw::c_int,
            addr: ::std::os::raw::c_uint,
            netmask_len: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_set_ipv4_gateway - add an IPv4 default route"]
        #[doc = ""]
        #[doc = " @addr - 4-byte IP address of the gateway (i.e., struct in_addr)"]
        #[doc = " @returns - return 0 if no error: otherwise negative value returns"]
        pub fn lkl_set_ipv4_gateway(addr: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_set_ipv4_gateway - add an IPv4 default route in rule table"]
        #[doc = ""]
        #[doc = " @ifindex - the ifindex of the interface, used for tableid calculation"]
        #[doc = " @addr - 4-byte IP address of the interface"]
        #[doc = " @netmask_len - prefix length of the @addr"]
        #[doc = " @gw_addr - 4-byte IP address of the gateway"]
        #[doc = " @returns - return 0 if no error: otherwise negative value returns"]
        pub fn lkl_if_set_ipv4_gateway(
            ifindex: ::std::os::raw::c_int,
            addr: ::std::os::raw::c_uint,
            netmask_len: ::std::os::raw::c_uint,
            gw_addr: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_set_ipv6 - set IPv6 address on interface"]
        #[doc = " must be called after interface is up."]
        #[doc = ""]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @addr - 16-byte IPv6 address (i.e., struct in6_addr)"]
        #[doc = " @netprefix_len - prefix length of the @addr"]
        #[doc = " @returns - return 0 if no error: otherwise negative value returns"]
        pub fn lkl_if_set_ipv6(
            ifindex: ::std::os::raw::c_int,
            addr: *mut ::std::os::raw::c_void,
            netprefix_len: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_set_ipv6_gateway - add an IPv6 default route"]
        #[doc = ""]
        #[doc = " @addr - 16-byte IPv6 address of the gateway (i.e., struct in6_addr)"]
        #[doc = " @returns - return 0 if no error: otherwise negative value returns"]
        pub fn lkl_set_ipv6_gateway(addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_set_ipv6_gateway - add an IPv6 default route in rule table"]
        #[doc = ""]
        #[doc = " @ifindex - the ifindex of the interface, used for tableid calculation"]
        #[doc = " @addr - 16-byte IP address of the interface"]
        #[doc = " @netmask_len - prefix length of the @addr"]
        #[doc = " @gw_addr - 16-byte IP address of the gateway (i.e., struct in_addr)"]
        #[doc = " @returns - return 0 if no error: otherwise negative value returns"]
        pub fn lkl_if_set_ipv6_gateway(
            ifindex: ::std::os::raw::c_int,
            addr: *mut ::std::os::raw::c_void,
            netmask_len: ::std::os::raw::c_uint,
            gw_addr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_ifname_to_ifindex - obtain ifindex of an interface by name"]
        #[doc = ""]
        #[doc = " @name - string of an interface"]
        #[doc = " @returns - return an integer of ifindex if no error"]
        pub fn lkl_ifname_to_ifindex(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    #[doc = " lkl_netdev - host network device handle, defined in lkl_host.h."]
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_netdev {
        _unused: [u8; 0],
    }
    #[doc = " lkl_netdev_args - arguments to lkl_netdev_add"]
    #[doc = " @mac - optional MAC address for the device"]
    #[doc = " @offload - offload bits for the device"]
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lkl_netdev_args {
        pub mac: *mut ::std::os::raw::c_void,
        pub offload: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_lkl_netdev_args() {
        assert_eq!(
            ::std::mem::size_of::<lkl_netdev_args>(),
            16usize,
            concat!("Size of: ", stringify!(lkl_netdev_args))
        );
        assert_eq!(
            ::std::mem::align_of::<lkl_netdev_args>(),
            8usize,
            concat!("Alignment of ", stringify!(lkl_netdev_args))
        );
        fn test_field_mac() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_netdev_args>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).mac) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_netdev_args),
                    "::",
                    stringify!(mac)
                )
            );
        }
        test_field_mac();
        fn test_field_offload() {
            assert_eq!(
                unsafe {
                    let uninit = ::std::mem::MaybeUninit::<lkl_netdev_args>::uninit();
                    let ptr = uninit.as_ptr();
                    ::std::ptr::addr_of!((*ptr).offload) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(lkl_netdev_args),
                    "::",
                    stringify!(offload)
                )
            );
        }
        test_field_offload();
    }
    extern "C" {
        pub fn lkl_netdev_add(nd: *mut lkl_netdev, args: *mut lkl_netdev_args)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lkl_netdev_remove(id: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn lkl_netdev_free(nd: *mut lkl_netdev);
    }
    extern "C" {
        #[doc = " lkl_netdev_get_ifindex - retrieve the interface index for a given network"]
        #[doc = " device id"]
        #[doc = ""]
        #[doc = " @id - the network device id"]
        #[doc = " @returns the interface index or a stricly negative value in case of error"]
        pub fn lkl_netdev_get_ifindex(id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lkl_netdev_tap_create(
            ifname: *const ::std::os::raw::c_char,
            offload: ::std::os::raw::c_int,
        ) -> *mut lkl_netdev;
    }
    extern "C" {
        pub fn lkl_netdev_raw_create(ifname: *const ::std::os::raw::c_char) -> *mut lkl_netdev;
    }
    extern "C" {
        pub fn lkl_netdev_macvtap_create(
            path: *const ::std::os::raw::c_char,
            offload: ::std::os::raw::c_int,
        ) -> *mut lkl_netdev;
    }
    extern "C" {
        pub fn lkl_netdev_pipe_create(
            ifname: *const ::std::os::raw::c_char,
            offload: ::std::os::raw::c_int,
        ) -> *mut lkl_netdev;
    }
    extern "C" {
        pub fn lkl_register_dbg_handler();
    }
    extern "C" {
        #[doc = " lkl_add_neighbor - add a permanent arp entry"]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @af - address family of the ip address. Must be LKL_AF_INET or LKL_AF_INET6"]
        #[doc = " @ip - ip address of the entry in network byte order"]
        #[doc = " @mac - mac address of the entry"]
        pub fn lkl_add_neighbor(
            ifindex: ::std::os::raw::c_int,
            af: ::std::os::raw::c_int,
            addr: *mut ::std::os::raw::c_void,
            mac: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_mount_fs - mount a file system type like proc, sys"]
        #[doc = " @fstype - file system type. e.g. proc, sys"]
        #[doc = " @returns - 0 on success. 1 if it's already mounted. negative on failure."]
        pub fn lkl_mount_fs(fstype: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_add_ip - add an ip address"]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @af - address family of the ip address. Must be LKL_AF_INET or LKL_AF_INET6"]
        #[doc = " @addr - ip address of the entry in network byte order"]
        #[doc = " @netprefix_len - prefix length of the @addr"]
        pub fn lkl_if_add_ip(
            ifindex: ::std::os::raw::c_int,
            af: ::std::os::raw::c_int,
            addr: *mut ::std::os::raw::c_void,
            netprefix_len: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_del_ip - add an ip address"]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @af - address family of the ip address. Must be LKL_AF_INET or LKL_AF_INET6"]
        #[doc = " @addr - ip address of the entry in network byte order"]
        #[doc = " @netprefix_len - prefix length of the @addr"]
        pub fn lkl_if_del_ip(
            ifindex: ::std::os::raw::c_int,
            af: ::std::os::raw::c_int,
            addr: *mut ::std::os::raw::c_void,
            netprefix_len: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_add_gateway - add a gateway"]
        #[doc = " @af - address family of the ip address. Must be LKL_AF_INET or LKL_AF_INET6"]
        #[doc = " @gwaddr - 4-byte IP address of the gateway (i.e., struct in_addr)"]
        pub fn lkl_add_gateway(
            af: ::std::os::raw::c_int,
            gwaddr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " XXX Should I use OIF selector?"]
        #[doc = " temporary table idx = ifindex * 2 + 0 <- ipv4"]
        #[doc = " temporary table idx = ifindex * 2 + 1 <- ipv6"]
        #[doc = " lkl_if_add_rule_from_addr - create an ip rule table with \"from\" selector"]
        #[doc = " @ifindex - the ifindex of the interface, used for table id calculation"]
        #[doc = " @af - address family of the ip address. Must be LKL_AF_INET or LKL_AF_INET6"]
        #[doc = " @saddr - network byte order ip address, \"from\" selector address of this rule"]
        pub fn lkl_if_add_rule_from_saddr(
            ifindex: ::std::os::raw::c_int,
            af: ::std::os::raw::c_int,
            saddr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_add_gateway - add gateway to rule table"]
        #[doc = " @ifindex - the ifindex of the interface, used for table id calculation"]
        #[doc = " @af - address family of the ip address. Must be LKL_AF_INET or LKL_AF_INET6"]
        #[doc = " @gwaddr - 4-byte IP address of the gateway (i.e., struct in_addr)"]
        pub fn lkl_if_add_gateway(
            ifindex: ::std::os::raw::c_int,
            af: ::std::os::raw::c_int,
            gwaddr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_add_linklocal - add linklocal route to rule table"]
        #[doc = " @ifindex - the ifindex of the interface, used for table id calculation"]
        #[doc = " @af - address family of the ip address. Must be LKL_AF_INET or LKL_AF_INET6"]
        #[doc = " @addr - ip address of the entry in network byte order"]
        #[doc = " @netprefix_len - prefix length of the @addr"]
        pub fn lkl_if_add_linklocal(
            ifindex: ::std::os::raw::c_int,
            af: ::std::os::raw::c_int,
            addr: *mut ::std::os::raw::c_void,
            netprefix_len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_if_wait_ipv6_dad - wait for DAD to be done for a ipv6 address"]
        #[doc = " must be called after interface is up"]
        #[doc = ""]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @addr - ip address of the entry in network byte order"]
        pub fn lkl_if_wait_ipv6_dad(
            ifindex: ::std::os::raw::c_int,
            addr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_set_fd_limit - set the maximum number of file descriptors allowed"]
        #[doc = " @fd_limit - fd max limit"]
        pub fn lkl_set_fd_limit(fd_limit: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_qdisc_add - set qdisc rule onto an interface"]
        #[doc = ""]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @root - the name of root class (e.g., \"root\");"]
        #[doc = " @type - the type of qdisc (e.g., \"fq\")"]
        pub fn lkl_qdisc_add(
            ifindex: ::std::os::raw::c_int,
            root: *const ::std::os::raw::c_char,
            type_: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_qdisc_parse_add - Add a qdisc entry for an interface with strings"]
        #[doc = ""]
        #[doc = " @ifindex - the ifindex of the interface"]
        #[doc = " @entries - strings of qdisc configurations in the form of"]
        #[doc = "            \"root|type;root|type;...\""]
        pub fn lkl_qdisc_parse_add(
            ifindex: ::std::os::raw::c_int,
            entries: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[doc = " lkl_sysctl - write a sysctl value"]
        #[doc = ""]
        #[doc = " @path - the path to an sysctl entry (e.g., \"net.ipv4.tcp_wmem\");"]
        #[doc = " @value - the value of the sysctl (e.g., \"4096 87380 2147483647\")"]
        pub fn lkl_sysctl(
            path: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " lkl_sysctl_parse_write - Configure sysctl parameters with strings"]
        #[doc = ""]
        #[doc = " @sysctls - Configure sysctl parameters as the form of \"key=value;...\""]
        pub fn lkl_sysctl_parse_write(sysctls: *const ::std::os::raw::c_char);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct msg {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sem {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sem_queue {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sem_undo {
        pub _address: u8,
    }*/
}
